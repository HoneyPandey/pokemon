@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	HealPlayerParty
	.type	 HealPlayerParty,function
	.thumb_func
HealPlayerParty:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	mov	r8, r0
	ldr	r0, .L13
	ldrb	r0, [r0]
	cmp	r8, r0
	bcs	.L4	@cond_branch
	ldr	r1, .L13+0x4
	mov	sl, r1
	mov	r6, sp
.L6:
	mov	r0, #0x64
	mov	r4, r8
	mul	r4, r4, r0
	add	r4, r4, sl
	add	r0, r4, #0
	mov	r1, #0x3a
	bl	GetMonData
	lsl	r1, r0, #0x10
	strb	r0, [r6]
	lsr	r1, r1, #0x18
	strb	r1, [r6, #0x1]
	add	r0, r4, #0
	mov	r1, #0x39
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x15
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r5, #0x0
	mov	r1, #0x1
	add	r1, r1, r8
	mov	r9, r1
.L10:
	add	r1, r5, #0
	add	r1, r1, #0xd
	add	r0, r4, #0
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r7, #0
	add	r2, r5, #0
	bl	CalculatePPWithBonus
	strb	r0, [r6]
	add	r1, r5, #0
	add	r1, r1, #0x11
	add	r0, r4, #0
	mov	r2, sp
	bl	SetMonData
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L10	@cond_branch
	mov	r0, #0x0
	strb	r0, [r6]
	strb	r0, [r6, #0x1]
	strb	r0, [r6, #0x2]
	strb	r0, [r6, #0x3]
	mov	r1, #0x64
	mov	r0, r8
	mul	r0, r0, r1
	add	r0, r0, sl
	mov	r1, #0x37
	mov	r2, sp
	bl	SetMonData
	mov	r1, r9
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r0, .L13
	ldrb	r0, [r0]
	cmp	r8, r0
	bcc	.L6	@cond_branch
.L4:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L14:
	.align	2, 0
.L13:
	.word	gPlayerPartyCount
	.word	gPlayerParty
.Lfe1:
	.size	 HealPlayerParty,.Lfe1-HealPlayerParty
	.align	2, 0
	.globl	ScriptGiveMon
	.type	 ScriptGiveMon,function
	.thumb_func
ScriptGiveMon:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0x78
	add	r5, r0, #0
	add	r3, r1, #0
	add	r4, r2, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x10
	lsr	r0, r4, #0x10
	mov	r8, r0
	add	r6, sp, #0x14
	mov	r0, #0x0
	str	r0, [sp]
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	add	r0, r6, #0
	add	r1, r5, #0
	add	r2, r3, #0
	mov	r3, #0x20
	bl	CreateMon
	add	r0, sp, #0x10
	mov	r1, r8
	strb	r1, [r0]
	lsr	r4, r4, #0x18
	strb	r4, [r0, #0x1]
	add	r0, r6, #0
	mov	r1, #0xc
	add	r2, sp, #0x10
	bl	SetMonData
	add	r0, r6, #0
	bl	GiveMonToPlayer
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r5, #0
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r4, #0x1
	bgt	.L16	@cond_branch
	cmp	r4, #0
	blt	.L16	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x2
	bl	GetSetPokedexFlag
	add	r0, r5, #0
	mov	r1, #0x3
	bl	GetSetPokedexFlag
.L16:
	add	r0, r4, #0
	add	sp, sp, #0x78
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 ScriptGiveMon,.Lfe2-ScriptGiveMon
	.align	2, 0
	.globl	ScriptGiveEgg
	.type	 ScriptGiveEgg,function
	.thumb_func
ScriptGiveEgg:
	push	{lr}
	add	sp, sp, #-0x68
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, sp
	mov	r2, #0x1
	bl	CreateEgg
	add	r2, sp, #0x64
	mov	r0, #0x1
	strb	r0, [r2]
	mov	r0, sp
	mov	r1, #0x2d
	bl	SetMonData
	mov	r0, sp
	bl	GiveMonToPlayer
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	sp, sp, #0x68
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 ScriptGiveEgg,.Lfe3-ScriptGiveEgg
	.align	2, 0
	.globl	HasEnoughMonsForDoubleBattle
	.type	 HasEnoughMonsForDoubleBattle,function
	.thumb_func
HasEnoughMonsForDoubleBattle:
	push	{lr}
	bl	GetMonsStateToDoubles
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x1
	beq	.L25	@cond_branch
	cmp	r1, #0x1
	bgt	.L29	@cond_branch
	cmp	r1, #0
	beq	.L26	@cond_branch
	b	.L23
.L29:
	cmp	r1, #0x2
	bne	.L23	@cond_branch
.L25:
.L26:
	ldr	r0, .L30
	strh	r1, [r0]
.L23:
	pop	{r0}
	bx	r0
.L31:
	.align	2, 0
.L30:
	.word	gSpecialVar_Result
.Lfe4:
	.size	 HasEnoughMonsForDoubleBattle,.Lfe4-HasEnoughMonsForDoubleBattle
	.align	2, 0
	.type	 CheckPartyMonHasHeldItem,function
	.thumb_func
CheckPartyMonHasHeldItem:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	mov	r5, #0x0
	ldr	r7, .L40
.L36:
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L40+0x4
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	beq	.L35	@cond_branch
	cmp	r0, r7
	beq	.L35	@cond_branch
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	cmp	r0, r6
	bne	.L35	@cond_branch
	mov	r0, #0x1
	b	.L39
.L41:
	.align	2, 0
.L40:
	.word	0x4b7
	.word	gPlayerParty
.L35:
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L36	@cond_branch
	mov	r0, #0x0
.L39:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 CheckPartyMonHasHeldItem,.Lfe5-CheckPartyMonHasHeldItem
	.align	2, 0
	.globl	DoesPartyHaveEnigmaBerry
	.type	 DoesPartyHaveEnigmaBerry,function
	.thumb_func
DoesPartyHaveEnigmaBerry:
	push	{r4, lr}
	mov	r0, #0xcd
	bl	CheckPartyMonHasHeldItem
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	cmp	r4, #0x1
	bne	.L43	@cond_branch
	mov	r0, #0xcd
	bl	ItemIdToBerryType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L44
	bl	GetBerryNameByBerryType
.L43:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L45:
	.align	2, 0
.L44:
	.word	gStringVar1
.Lfe6:
	.size	 DoesPartyHaveEnigmaBerry,.Lfe6-DoesPartyHaveEnigmaBerry
	.align	2, 0
	.globl	CreateScriptedWildMon
	.type	 CreateScriptedWildMon,function
	.thumb_func
CreateScriptedWildMon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x14
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r7, r2, #0x10
	lsr	r6, r7, #0x10
	bl	ZeroEnemyPartyMons
	ldr	r0, .L48
	mov	r8, r0
	mov	r0, #0x0
	str	r0, [sp]
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	mov	r0, r8
	add	r1, r4, #0
	add	r2, r5, #0
	mov	r3, #0x20
	bl	CreateMon
	cmp	r6, #0
	beq	.L47	@cond_branch
	add	r0, sp, #0x10
	strb	r6, [r0]
	add	r1, r0, #0
	lsr	r0, r7, #0x18
	strb	r0, [r1, #0x1]
	mov	r0, r8
	mov	r1, #0xc
	add	r2, sp, #0x10
	bl	SetMonData
.L47:
	add	sp, sp, #0x14
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L49:
	.align	2, 0
.L48:
	.word	gEnemyParty
.Lfe7:
	.size	 CreateScriptedWildMon,.Lfe7-CreateScriptedWildMon
	.align	2, 0
	.globl	CreateScriptedDoubleWildMon
	.type	 CreateScriptedDoubleWildMon,function
	.thumb_func
CreateScriptedDoubleWildMon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x24
	add	r4, r0, #0
	add	r5, r1, #0
	ldr	r0, [sp, #0x44]
	ldr	r1, [sp, #0x48]
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r2, r2, #0x10
	mov	r9, r2
	lsr	r2, r2, #0x10
	mov	r8, r2
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	str	r3, [sp, #0x18]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x1c]
	lsl	r1, r1, #0x10
	str	r1, [sp, #0x20]
	lsr	r1, r1, #0x10
	mov	sl, r1
	bl	ZeroEnemyPartyMons
	ldr	r7, .L53
	mov	r6, #0x0
	str	r6, [sp]
	str	r6, [sp, #0x4]
	str	r6, [sp, #0x8]
	str	r6, [sp, #0xc]
	add	r0, r7, #0
	add	r1, r4, #0
	add	r2, r5, #0
	mov	r3, #0x20
	bl	CreateMon
	mov	r0, r8
	cmp	r0, #0
	beq	.L51	@cond_branch
	add	r0, sp, #0x10
	mov	r1, r8
	strb	r1, [r0]
	add	r1, r0, #0
	mov	r2, r9
	lsr	r0, r2, #0x18
	strb	r0, [r1, #0x1]
	add	r0, r7, #0
	mov	r1, #0xc
	add	r2, sp, #0x10
	bl	SetMonData
.L51:
	mov	r0, #0x96
	lsl	r0, r0, #0x1
	add	r4, r7, r0
	str	r6, [sp]
	str	r6, [sp, #0x4]
	str	r6, [sp, #0x8]
	str	r6, [sp, #0xc]
	add	r0, r4, #0
	ldr	r1, [sp, #0x18]
	ldr	r2, [sp, #0x1c]
	mov	r3, #0x20
	bl	CreateMon
	mov	r1, sl
	cmp	r1, #0
	beq	.L52	@cond_branch
	add	r2, sp, #0x14
	strb	r1, [r2]
	ldr	r1, [sp, #0x20]
	lsr	r0, r1, #0x18
	strb	r0, [r2, #0x1]
	add	r0, r4, #0
	mov	r1, #0xc
	bl	SetMonData
.L52:
	add	sp, sp, #0x24
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L54:
	.align	2, 0
.L53:
	.word	gEnemyParty
.Lfe8:
	.size	 CreateScriptedDoubleWildMon,.Lfe8-CreateScriptedDoubleWildMon
	.align	2, 0
	.globl	ScriptSetMonMoveSlot
	.type	 ScriptSetMonMoveSlot,function
	.thumb_func
ScriptSetMonMoveSlot:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	cmp	r3, #0x6
	bls	.L56	@cond_branch
	ldr	r0, .L57
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
.L56:
	mov	r0, #0x64
	mul	r0, r0, r3
	ldr	r1, .L57+0x4
	add	r0, r0, r1
	add	r1, r4, #0
	bl	SetMonMoveSlot
	pop	{r4}
	pop	{r0}
	bx	r0
.L58:
	.align	2, 0
.L57:
	.word	gPlayerPartyCount
	.word	gPlayerParty
.Lfe9:
	.size	 ScriptSetMonMoveSlot,.Lfe9-ScriptSetMonMoveSlot
	.align	2, 0
	.globl	ChooseHalfPartyForBattle
	.type	 ChooseHalfPartyForBattle,function
	.thumb_func
ChooseHalfPartyForBattle:
	push	{lr}
	ldr	r0, .L60
	ldr	r1, .L60+0x4
	str	r1, [r0, #0x8]
	ldr	r0, .L60+0x8
	mov	r1, #0x9
	bl	VarSet
	mov	r0, #0x0
	bl	InitChooseHalfPartyForBattle
	pop	{r0}
	bx	r0
.L61:
	.align	2, 0
.L60:
	.word	gMain
	.word	CB2_ReturnFromChooseHalfParty
	.word	0x40cf
.Lfe10:
	.size	 ChooseHalfPartyForBattle,.Lfe10-ChooseHalfPartyForBattle
	.align	2, 0
	.type	 CB2_ReturnFromChooseHalfParty,function
	.thumb_func
CB2_ReturnFromChooseHalfParty:
	push	{lr}
	ldr	r0, .L67
	ldrb	r1, [r0]
	cmp	r1, #0
	bne	.L65	@cond_branch
	ldr	r0, .L67+0x4
	strh	r1, [r0]
	b	.L63
.L68:
	.align	2, 0
.L67:
	.word	gSelectedOrderFromParty
	.word	gSpecialVar_Result
.L65:
	ldr	r1, .L69
	mov	r0, #0x1
	strh	r0, [r1]
.L63:
	ldr	r0, .L69+0x4
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L70:
	.align	2, 0
.L69:
	.word	gSpecialVar_Result
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.Lfe11:
	.size	 CB2_ReturnFromChooseHalfParty,.Lfe11-CB2_ReturnFromChooseHalfParty
	.align	2, 0
	.globl	ChoosePartyForBattleFrontier
	.type	 ChoosePartyForBattleFrontier,function
	.thumb_func
ChoosePartyForBattleFrontier:
	push	{lr}
	ldr	r1, .L72
	ldr	r0, .L72+0x4
	str	r0, [r1, #0x8]
	ldr	r0, .L72+0x8
	ldrb	r0, [r0]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	InitChooseHalfPartyForBattle
	pop	{r0}
	bx	r0
.L73:
	.align	2, 0
.L72:
	.word	gMain
	.word	CB2_ReturnFromChooseBattleFrontierParty
	.word	gSpecialVar_0x8004
.Lfe12:
	.size	 ChoosePartyForBattleFrontier,.Lfe12-ChoosePartyForBattleFrontier
	.align	2, 0
	.type	 CB2_ReturnFromChooseBattleFrontierParty,function
	.thumb_func
CB2_ReturnFromChooseBattleFrontierParty:
	push	{lr}
	ldr	r0, .L79
	ldrb	r1, [r0]
	cmp	r1, #0
	bne	.L77	@cond_branch
	ldr	r0, .L79+0x4
	strh	r1, [r0]
	b	.L75
.L80:
	.align	2, 0
.L79:
	.word	gSelectedOrderFromParty
	.word	gSpecialVar_Result
.L77:
	ldr	r1, .L81
	mov	r0, #0x1
	strh	r0, [r1]
.L75:
	ldr	r0, .L81+0x4
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L82:
	.align	2, 0
.L81:
	.word	gSpecialVar_Result
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.Lfe13:
	.size	 CB2_ReturnFromChooseBattleFrontierParty,.Lfe13-CB2_ReturnFromChooseBattleFrontierParty
	.align	2, 0
	.globl	ReducePlayerPartyToSelectedMons
	.type	 ReducePlayerPartyToSelectedMons,function
	.thumb_func
ReducePlayerPartyToSelectedMons:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x198
	add	r0, sp, #0x190
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r2, .L95
	mov	r1, sp
	bl	CpuSet
	mov	r5, #0x0
	mov	r7, #0x64
	ldr	r6, .L95+0x4
	mov	r4, sp
.L87:
	ldr	r0, .L95+0x8
	add	r1, r5, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L86	@cond_branch
	sub	r0, r0, #0x1
	mov	r1, r0
	mul	r1, r1, r7
	add	r1, r1, r6
	add	r0, r4, #0
	mov	r2, #0x64
	bl	memcpy
.L86:
	add	r4, r4, #0x64
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L87	@cond_branch
	add	r0, sp, #0x194
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r4, .L95+0x4
	ldr	r2, .L95+0xc
	add	r1, r4, #0
	bl	CpuSet
	mov	r5, sp
	add	r6, sp, #0x12c
.L93:
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x64
	bl	memcpy
	add	r5, r5, #0x64
	add	r4, r4, #0x64
	cmp	r5, r6
	ble	.L93	@cond_branch
	bl	CalculatePlayerPartyCount
	add	sp, sp, #0x198
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L96:
	.align	2, 0
.L95:
	.word	0x5000064
	.word	gPlayerParty
	.word	gSelectedOrderFromParty
	.word	0x5000096
.Lfe14:
	.size	 ReducePlayerPartyToSelectedMons,.Lfe14-ReducePlayerPartyToSelectedMons
.text
	.align	2, 0

