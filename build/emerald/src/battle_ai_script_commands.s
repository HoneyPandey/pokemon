@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gAIScriptPtr
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gAIScriptPtr,object
	.size	 gAIScriptPtr,4
gAIScriptPtr:
	.word	0x0
	.type	 sBattler_AI,object
	.size	 sBattler_AI,1
sBattler_AI:
	.byte	0x0
	.section .rodata
	.align	2, 0
	.type	 sBattleAICmdTable,object
sBattleAICmdTable:
	.word	Cmd_if_random_less_than
	.word	Cmd_if_random_greater_than
	.word	Cmd_if_random_equal
	.word	Cmd_if_random_not_equal
	.word	Cmd_score
	.word	Cmd_if_hp_less_than
	.word	Cmd_if_hp_more_than
	.word	Cmd_if_hp_equal
	.word	Cmd_if_hp_not_equal
	.word	Cmd_if_status
	.word	Cmd_if_not_status
	.word	Cmd_if_status2
	.word	Cmd_if_not_status2
	.word	Cmd_if_status3
	.word	Cmd_if_not_status3
	.word	Cmd_if_side_affecting
	.word	Cmd_if_not_side_affecting
	.word	Cmd_if_less_than
	.word	Cmd_if_more_than
	.word	Cmd_if_equal
	.word	Cmd_if_not_equal
	.word	Cmd_if_less_than_ptr
	.word	Cmd_if_more_than_ptr
	.word	Cmd_if_equal_ptr
	.word	Cmd_if_not_equal_ptr
	.word	Cmd_if_move
	.word	Cmd_if_not_move
	.word	Cmd_if_in_bytes
	.word	Cmd_if_not_in_bytes
	.word	Cmd_if_in_hwords
	.word	Cmd_if_not_in_hwords
	.word	Cmd_if_user_has_attacking_move
	.word	Cmd_if_user_has_no_attacking_moves
	.word	Cmd_get_turn_count
	.word	Cmd_get_type
	.word	Cmd_get_considered_move_power
	.word	Cmd_get_how_powerful_move_is
	.word	Cmd_get_last_used_battler_move
	.word	Cmd_if_equal_u32
	.word	Cmd_if_not_equal_u32
	.word	Cmd_if_user_goes
	.word	Cmd_if_cant_use_belch
	.word	Cmd_nullsub_2A
	.word	Cmd_nullsub_2B
	.word	Cmd_count_usable_party_mons
	.word	Cmd_get_considered_move
	.word	Cmd_get_considered_move_effect
	.word	Cmd_get_ability
	.word	Cmd_get_highest_type_effectiveness
	.word	Cmd_if_type_effectiveness
	.word	Cmd_nullsub_32
	.word	Cmd_nullsub_33
	.word	Cmd_if_status_in_party
	.word	Cmd_if_status_not_in_party
	.word	Cmd_get_weather
	.word	Cmd_if_effect
	.word	Cmd_if_not_effect
	.word	Cmd_if_stat_level_less_than
	.word	Cmd_if_stat_level_more_than
	.word	Cmd_if_stat_level_equal
	.word	Cmd_if_stat_level_not_equal
	.word	Cmd_if_can_faint
	.word	Cmd_if_cant_faint
	.word	Cmd_if_has_move
	.word	Cmd_if_doesnt_have_move
	.word	Cmd_if_has_move_with_effect
	.word	Cmd_if_doesnt_have_move_with_effect
	.word	Cmd_if_any_move_disabled_or_encored
	.word	Cmd_if_curr_move_disabled_or_encored
	.word	Cmd_flee
	.word	Cmd_if_random_safari_flee
	.word	Cmd_watch
	.word	Cmd_get_hold_effect
	.word	Cmd_get_gender
	.word	Cmd_is_first_turn_for
	.word	Cmd_get_stockpile_count
	.word	Cmd_is_double_battle
	.word	Cmd_get_used_held_item
	.word	Cmd_get_move_type_from_result
	.word	Cmd_get_move_power_from_result
	.word	Cmd_get_move_effect_from_result
	.word	Cmd_get_protect_count
	.word	Cmd_if_move_flag
	.word	Cmd_if_field_status
	.word	Cmd_get_move_accuracy
	.word	Cmd_call_if_eq
	.word	Cmd_call_if_move_flag
	.word	Cmd_nullsub_57
	.word	Cmd_call
	.word	Cmd_goto
	.word	Cmd_end
	.word	Cmd_if_level_cond
	.word	Cmd_if_target_taunted
	.word	Cmd_if_target_not_taunted
	.word	Cmd_if_target_is_ally
	.word	Cmd_is_of_type
	.word	Cmd_check_ability
	.word	Cmd_if_flash_fired
	.word	Cmd_if_holds_item
	.word	Cmd_get_ally_chosen_move
	.word	Cmd_if_has_no_attacking_moves
	.word	Cmd_get_hazards_count
	.word	Cmd_if_doesnt_hold_berry
	.word	Cmd_if_share_type
	.word	Cmd_if_cant_use_last_resort
	.word	Cmd_if_has_move_with_split
	.word	Cmd_if_has_no_move_with_split
	.word	Cmd_if_physical_moves_unusable
	.word	Cmd_if_ai_can_go_down
	.word	Cmd_if_has_move_with_type
	.word	Cmd_if_no_move_used
	.word	Cmd_if_has_move_with_flag
	.word	Cmd_if_battler_absent
	.word	Cmd_is_grounded
	.word	Cmd_get_best_dmg_hp_percent
	.word	Cmd_get_curr_dmg_hp_percent
	.word	Cmd_get_move_split_from_result
	.word	Cmd_get_considered_move_split
	.word	Cmd_get_considered_move_target
	.word	Cmd_compare_speeds
	.word	Cmd_is_wakeup_turn
	.word	Cmd_if_has_move_with_accuracy_lt
	.size	 sBattleAICmdTable,488
	.align	1, 0
	.type	 sDiscouragedPowerfulMoveEffects,object
sDiscouragedPowerfulMoveEffects:
	.short	0x7
	.short	0x8
	.short	0x50
	.short	0x91
	.short	0x97
	.short	0xa1
	.short	0xaa
	.short	0xb6
	.short	0xbe
	.short	0xcc
	.short	0x154
	.short	0xffff
	.size	 sDiscouragedPowerfulMoveEffects,24
.text
	.align	2, 0
	.globl	BattleAI_SetupItems
	.type	 BattleAI_SetupItems,function
	.thumb_func
BattleAI_SetupItems:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L15
	ldr	r0, [r1]
	ldr	r3, [r0, #0x18]
	mov	r4, #0x0
	add	r7, r1, #0
	ldr	r2, .L15+0x4
	mov	r1, #0x0
.L6:
	add	r0, r3, r4
	strb	r1, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0x53
	bls	.L6	@cond_branch
	ldr	r0, [r2]
	ldr	r1, .L15+0x8
	and	r0, r0, r1
	cmp	r0, #0x8
	bne	.L8	@cond_branch
	mov	r4, #0x0
	ldr	r6, .L15+0xc
	ldr	r5, .L15+0x10
.L12:
	lsl	r2, r4, #0x1
	ldrh	r1, [r6]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r2, r2, r0
	add	r2, r2, r5
	ldrh	r3, [r2]
	cmp	r3, #0
	beq	.L11	@cond_branch
	ldr	r2, [r7]
	ldr	r1, [r2, #0x18]
	add	r0, r1, #0
	add	r0, r0, #0x50
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r1, r1, #0x48
	add	r1, r1, r0
	strh	r3, [r1]
	ldr	r1, [r2, #0x18]
	add	r1, r1, #0x50
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L11:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L12	@cond_branch
.L8:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L16:
	.align	2, 0
.L15:
	.word	gBattleResources
	.word	gBattleTypeFlags
	.word	0xa7f098a
	.word	gTrainerBattleOpponent_A
	.word	gTrainers+0x10
.Lfe1:
	.size	 BattleAI_SetupItems,.Lfe1-BattleAI_SetupItems
	.align	2, 0
	.globl	BattleAI_SetupFlags
	.type	 BattleAI_SetupFlags,function
	.thumb_func
BattleAI_SetupFlags:
	push	{r4, lr}
	ldr	r0, .L35
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L18	@cond_branch
	bl	GetAiScriptsInRecordedBattle
	b	.L34
.L36:
	.align	2, 0
.L35:
	.word	gBattleTypeFlags
.L18:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L20	@cond_branch
	ldr	r0, .L37
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x80
	lsl	r0, r0, #0x17
	str	r0, [r1, #0xc]
	b	.L19
.L38:
	.align	2, 0
.L37:
	.word	gBattleResources
.L20:
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L22	@cond_branch
	ldr	r0, .L39
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x80
	lsl	r0, r0, #0x16
	str	r0, [r1, #0xc]
	b	.L19
.L40:
	.align	2, 0
.L39:
	.word	gBattleResources
.L22:
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L24	@cond_branch
	ldr	r0, .L41
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x80
	lsl	r0, r0, #0x18
	str	r0, [r1, #0xc]
	b	.L19
.L42:
	.align	2, 0
.L41:
	.word	gBattleResources
.L24:
	mov	r0, #0x80
	lsl	r0, r0, #0xc
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L26	@cond_branch
	bl	GetAiScriptsInBattleFactory
.L34:
	ldr	r1, .L43
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
	str	r0, [r1, #0xc]
	b	.L19
.L44:
	.align	2, 0
.L43:
	.word	gBattleResources
.L26:
	ldr	r0, .L45
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L28	@cond_branch
	ldr	r0, .L45+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x7
	str	r0, [r1, #0xc]
	b	.L19
.L46:
	.align	2, 0
.L45:
	.word	0xc3f0900
	.word	gBattleResources
.L28:
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L30	@cond_branch
	ldr	r0, .L47
	ldr	r0, [r0]
	ldr	r4, [r0, #0x14]
	ldr	r3, .L47+0x4
	ldr	r0, .L47+0x8
	ldrh	r0, [r0]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r3, r3, #0x1c
	add	r1, r1, r3
	ldr	r0, .L47+0xc
	ldrh	r2, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	ldr	r1, [r1]
	ldr	r0, [r0]
	orr	r1, r1, r0
	str	r1, [r4, #0xc]
	b	.L19
.L48:
	.align	2, 0
.L47:
	.word	gBattleResources
	.word	gTrainers
	.word	gTrainerBattleOpponent_A
	.word	gTrainerBattleOpponent_B
.L30:
	ldr	r0, .L49
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L49+0x4
	ldr	r0, .L49+0x8
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r0, [r0]
	str	r0, [r3, #0xc]
.L19:
	ldr	r0, .L49+0xc
	ldr	r0, [r0]
	ldr	r1, .L49+0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L33	@cond_branch
	ldr	r2, .L49+0x4
	ldr	r0, .L49+0x8
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x18]
	cmp	r0, #0
	beq	.L32	@cond_branch
.L33:
	ldr	r0, .L49
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r0, [r2, #0xc]
	mov	r1, #0x80
	orr	r0, r0, r1
	str	r0, [r2, #0xc]
.L32:
	pop	{r4}
	pop	{r0}
	bx	r0
.L50:
	.align	2, 0
.L49:
	.word	gBattleResources
	.word	gTrainers
	.word	gTrainerBattleOpponent_A
	.word	gBattleTypeFlags
	.word	0x8001
.Lfe2:
	.size	 BattleAI_SetupFlags,.Lfe2-BattleAI_SetupFlags
	.align	2, 0
	.globl	BattleAI_SetupAIData
	.type	 BattleAI_SetupAIData,function
	.thumb_func
BattleAI_SetupAIData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r4, .L79
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	ldr	r5, [r0, #0xc]
	mov	r2, #0xac
	lsl	r2, r2, #0x1
	mov	r1, #0x0
	bl	memset
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	str	r5, [r0, #0xc]
	mov	r5, #0x0
	mov	r2, #0x1
.L55:
	add	r1, r6, #0
	and	r1, r1, r2
	cmp	r1, #0
	beq	.L56	@cond_branch
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r0, r0, r5
	mov	r1, #0x64
	b	.L78
.L80:
	.align	2, 0
.L79:
	.word	gBattleResources
.L56:
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r0, r0, r5
.L78:
	strb	r1, [r0]
	lsr	r6, r6, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L55	@cond_branch
	ldr	r0, .L81
	ldrb	r0, [r0]
	mov	r1, #0x0
	mov	r2, #0xff
	bl	CheckMoveLimitations
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r5, #0x0
	ldr	r4, .L81+0x4
	mov	r3, #0x0
	ldr	r1, .L81+0x8
.L62:
	ldr	r0, [r1]
	mov	r2, r8
	and	r0, r0, r2
	ldr	r2, .L81+0x4
	cmp	r0, #0
	beq	.L61	@cond_branch
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r0, r0, r5
	strb	r3, [r0]
.L61:
	add	r1, r1, #0x4
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L62	@cond_branch
	ldr	r0, [r2]
	ldr	r0, [r0, #0x1c]
	add	r0, r0, #0x20
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r3, .L81+0xc
	ldr	r0, .L81
	ldrb	r0, [r0]
	strb	r0, [r3]
	ldr	r0, .L81+0x10
	strb	r1, [r0]
	ldr	r2, .L81+0x14
	ldrb	r2, [r2]
	cmp	r1, r2
	bcs	.L66	@cond_branch
	ldr	r0, .L81+0x18
	mov	sl, r0
	ldr	r7, .L81+0x10
.L68:
	ldr	r1, .L81+0xc
	ldrb	r0, [r1]
	add	r0, r0, sl
	ldrb	r3, [r0]
	mov	r1, #0x1
	ldr	r2, .L81+0x10
	ldrb	r0, [r2]
	add	r0, r0, sl
	ldrb	r2, [r0]
	add	r0, r1, #0
	and	r0, r0, r3
	and	r1, r1, r2
	cmp	r0, r1
	beq	.L67	@cond_branch
	mov	r5, #0x0
	ldr	r0, .L81+0x1c
	mov	r9, r0
	mov	r6, #0x0
.L73:
	mov	r4, #0x0
	lsl	r1, r5, #0x1
	ldr	r0, .L81+0xc
	ldrb	r3, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r1, r1, r0
	add	r1, r1, r9
	ldrh	r2, [r1]
	ldr	r1, .L81+0x20
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L74	@cond_branch
	ldr	r0, .L81+0x8
	add	r0, r6, r0
	ldr	r0, [r0]
	mov	r1, r8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L74	@cond_branch
	add	r0, r2, #0
	ldrb	r2, [r7]
	add	r1, r3, #0
	bl	AI_CalcDamage
	add	r4, r0, #0
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	sub	r1, r1, r0
	mov	r0, r4
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L74	@cond_branch
	mov	r4, #0x1
.L74:
	ldr	r0, .L81+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x4
	add	r1, r6, r1
	ldr	r0, .L81+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r2, r2, #0x14
	add	r2, r2, r1
	str	r4, [r2]
	add	r6, r6, #0x4
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L73	@cond_branch
.L67:
	ldrb	r0, [r7]
	add	r0, r0, #0x1
	strb	r0, [r7]
	ldr	r1, .L81+0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L68	@cond_branch
.L66:
	ldr	r2, .L81+0xc
	ldrb	r0, [r2]
	bl	SetRandomTarget
	ldr	r1, .L81+0x10
	strb	r0, [r1]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L82:
	.align	2, 0
.L81:
	.word	gActiveBattler
	.word	gBattleResources
	.word	gBitTable
	.word	sBattler_AI
	.word	gBattlerTarget
	.word	gBattlersCount
	.word	gBattlerPositions
	.word	gBattleMons+0xc
	.word	gBattleMoves
.Lfe3:
	.size	 BattleAI_SetupAIData,.Lfe3-BattleAI_SetupAIData
	.align	2, 0
	.globl	BattleAI_ChooseMoveOrAction
	.type	 BattleAI_ChooseMoveOrAction,function
	.thumb_func
BattleAI_ChooseMoveOrAction:
	push	{r4, lr}
	ldr	r0, .L87
	ldrh	r4, [r0]
	ldr	r0, .L87+0x4
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L84	@cond_branch
	bl	ChooseMoveOrAction_Singles
	b	.L86
.L88:
	.align	2, 0
.L87:
	.word	gCurrentMove
	.word	gBattleTypeFlags
.L84:
	bl	ChooseMoveOrAction_Doubles
.L86:
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r0, .L89
	strh	r4, [r0]
	add	r0, r1, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L90:
	.align	2, 0
.L89:
	.word	gCurrentMove
.Lfe4:
	.size	 BattleAI_ChooseMoveOrAction,.Lfe4-BattleAI_ChooseMoveOrAction
	.align	2, 0
	.type	 GetTotalBaseStat,function
	.thumb_func
GetTotalBaseStat:
	ldr	r2, .L92
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1]
	ldrb	r2, [r1, #0x1]
	add	r0, r0, r2
	ldrb	r2, [r1, #0x2]
	add	r0, r0, r2
	ldrb	r2, [r1, #0x3]
	add	r0, r0, r2
	ldrb	r2, [r1, #0x4]
	add	r0, r0, r2
	ldrb	r1, [r1, #0x5]
	add	r0, r0, r1
	bx	lr
.L93:
	.align	2, 0
.L92:
	.word	gBaseStats
.Lfe5:
	.size	 GetTotalBaseStat,.Lfe5-GetTotalBaseStat
	.align	2, 0
	.globl	IsTruantMonVulnerable
	.type	 IsTruantMonVulnerable,function
	.thumb_func
IsTruantMonVulnerable:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r5, r1, #0
	mov	r4, #0x0
	ldr	r6, .L104
	mov	r8, r6
	lsl	r7, r0, #0x18
.L98:
	ldr	r0, .L104+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x18]
	lsl	r2, r4, #0x1
	lsl	r0, r5, #0x3
	add	r2, r2, r0
	add	r1, r1, #0xc
	add	r1, r1, r2
	ldrh	r1, [r1]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrh	r0, [r0]
	cmp	r0, #0x6f
	bne	.L99	@cond_branch
	cmp	r1, #0xcb
	bne	.L103	@cond_branch
.L99:
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r0, [r0]
	cmp	r0, #0x9b
	bne	.L97	@cond_branch
	lsl	r1, r5, #0x18
	lsr	r0, r7, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x1
	bl	GetWhoStrikesFirst
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L97	@cond_branch
.L103:
	mov	r0, #0x1
	b	.L102
.L105:
	.align	2, 0
.L104:
	.word	gBattleMoves
	.word	gBattleResources
.L97:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L98	@cond_branch
	mov	r0, #0x0
.L102:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 IsTruantMonVulnerable,.Lfe6-IsTruantMonVulnerable
	.align	2, 0
	.type	 ChooseMoveOrAction_Singles,function
	.thumb_func
ChooseMoveOrAction_Singles:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	ldr	r5, .L142
	ldr	r0, [r5]
	ldr	r0, [r0, #0x14]
	ldr	r4, [r0, #0xc]
	bl	RecordLastUsedMoveByTarget
	cmp	r4, #0
	beq	.L108	@cond_branch
	mov	r6, #0x0
.L109:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L110	@cond_branch
	ldr	r0, [r5]
	ldr	r0, [r0, #0x14]
	strb	r6, [r0]
	bl	BattleAI_DoAIProcessing
.L110:
	lsr	r4, r4, #0x1
	ldr	r0, [r5]
	ldr	r1, [r0, #0x14]
	ldrb	r0, [r1, #0x11]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x11]
	ldr	r0, [r5]
	ldr	r0, [r0, #0x14]
	strb	r6, [r0, #0x1]
	cmp	r4, #0
	bne	.L109	@cond_branch
.L108:
	mov	r4, #0x0
	ldr	r0, .L142
	mov	r8, r0
	ldr	r1, .L142+0x4
	mov	r9, r1
	ldr	r7, .L142+0x8
	ldr	r6, .L142+0xc
	mov	r5, r9
	mov	r3, #0xbf
	lsl	r3, r3, #0x2
.L115:
	ldr	r2, [r7]
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r4, r1
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	add	r2, r2, r3
	add	r2, r2, r1
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r0, r0, r4
	ldrb	r0, [r0]
	strb	r0, [r2]
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L115	@cond_branch
	ldr	r0, [r1]
	ldr	r0, [r0, #0x14]
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L117	@cond_branch
	mov	r0, #0x4
	b	.L140
.L143:
	.align	2, 0
.L142:
	.word	gBattleResources
	.word	sBattler_AI
	.word	gBattleStruct
	.word	gBattlerTarget
.L117:
	mov	r7, #0x4
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L118	@cond_branch
	mov	r0, #0x5
	b	.L140
.L118:
	ldr	r6, .L144
	mov	r2, r9
	ldrb	r0, [r2]
	strb	r0, [r6]
	ldrb	r0, [r2]
	bl	CountUsablePartyMons
	cmp	r0, #0
	bgt	.LCB887
	b	.L119	@long jump
.LCB887:
	mov	r1, r9
	ldrb	r0, [r1]
	bl	IsAbilityPreventingEscape
	cmp	r0, #0
	beq	.LCB894
	b	.L119	@long jump
.LCB894:
	ldr	r5, .L144+0x4
	ldrb	r2, [r6]
	mov	r4, #0x5c
	mov	r0, r2
	mul	r0, r0, r4
	add	r1, r5, #0
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L144+0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB906
	b	.L119	@long jump
.LCB906:
	ldr	r1, .L144+0xc
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB915
	b	.L119	@long jump
.LCB915:
	ldr	r0, .L144+0x10
	ldr	r0, [r0]
	mov	r1, #0xc0
	lsl	r1, r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB922
	b	.L119	@long jump
.LCB922:
	mov	r2, r8
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x47
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB930
	b	.L119	@long jump
.LCB930:
	mov	r1, r9
	ldrb	r0, [r1]
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r0, [r0]
	bl	GetTotalBaseStat
	ldr	r1, .L144+0x14
	cmp	r0, r1
	bls	.L120	@cond_branch
	mov	r2, r9
	ldrb	r0, [r2]
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r1, [r0, #0x2e]
	ldrh	r0, [r0, #0x2a]
	lsr	r1, r1, #0x1
	cmp	r0, r1
	bcc	.L120	@cond_branch
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r1, [r0, #0x14]
	ldr	r0, [r1, #0xc]
	and	r0, r0, r7
	mov	r2, #0x5d
	cmp	r0, #0
	beq	.L121	@cond_branch
	mov	r2, #0x5f
.L121:
	mov	r4, #0x0
	mov	r0, #0x4
	ldrsb	r0, [r1, r0]
	cmp	r0, r2
	bgt	.L124	@cond_branch
	mov	r3, r8
.L125:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L124	@cond_branch
	ldr	r0, [r3]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r0, r0, r4
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, r2
	ble	.L125	@cond_branch
.L124:
	cmp	r4, #0x4
	bne	.L120	@cond_branch
	bl	GetMostSuitableMonToSwitchInto
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x6
	beq	.L120	@cond_branch
	ldr	r0, .L144+0x18
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	mov	r2, #0xaa
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	b	.L141
.L145:
	.align	2, 0
.L144:
	.word	gActiveBattler
	.word	gBattleMons
	.word	0x4002000
	.word	gStatuses3
	.word	gBattleTypeFlags
	.word	0x135
	.word	gBattleResources
.L120:
	ldr	r4, .L146
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0x36
	bne	.L119	@cond_branch
	ldrb	r0, [r4]
	ldr	r1, .L146+0x4
	ldrb	r1, [r1]
	bl	IsTruantMonVulnerable
	cmp	r0, #0
	beq	.L119	@cond_branch
	ldr	r0, .L146+0x8
	ldrb	r4, [r4]
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1a]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L119	@cond_branch
	ldr	r1, .L146+0xc
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r0, r0, r1
	ldrh	r1, [r0, #0x2e]
	ldrh	r0, [r0, #0x2a]
	lsr	r1, r1, #0x1
	cmp	r0, r1
	bcc	.L119	@cond_branch
	bl	GetMostSuitableMonToSwitchInto
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x6
	beq	.L119	@cond_branch
	ldr	r0, .L146+0x10
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	mov	r1, #0xaa
	lsl	r1, r1, #0x1
	add	r0, r0, r1
.L141:
	mov	r1, #0x1
	strb	r1, [r0]
	mov	r0, #0x7
	b	.L140
.L147:
	.align	2, 0
.L146:
	.word	sBattler_AI
	.word	gBattlerTarget
	.word	gDisableStructs
	.word	gBattleMons
	.word	gBattleResources
.L119:
	mov	r6, #0x1
	mov	r2, sp
	ldr	r3, .L148
	ldr	r0, [r3]
	ldr	r0, [r0, #0x14]
	ldrb	r0, [r0, #0x4]
	mov	r1, #0x0
	strb	r0, [r2]
	add	r0, sp, #0x4
	strb	r1, [r0]
	mov	r4, #0x1
	mov	r8, r3
	ldr	r2, .L148+0x4
	mov	sl, r0
	ldr	r1, .L148+0x8
	ldrb	r2, [r2]
	mov	r5, sp
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r3, r1, #0
	add	r3, r3, #0xe
	mov	r7, sl
.L135:
	ldrh	r0, [r3]
	cmp	r0, #0
	beq	.L134	@cond_branch
	ldrb	r1, [r5]
	mov	r2, r8
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r2, r0, r4
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r1, r0
	bne	.L137	@cond_branch
	mov	r1, sp
	add	r0, r1, r6
	ldrb	r1, [r2]
	strb	r1, [r0]
	add	r0, r7, r6
	strb	r4, [r0]
	add	r6, r6, #0x1
.L137:
	ldrb	r1, [r5]
	mov	r2, r8
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r2, r0, r4
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r1, r0
	bge	.L134	@cond_branch
	mov	r6, #0x1
	ldrb	r0, [r2]
	strb	r0, [r5]
	strb	r4, [r7]
.L134:
	add	r3, r3, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L135	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r6, #0
	bl	__umodsi3
	add	r0, r0, sl
	ldrb	r0, [r0]
.L140:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L149:
	.align	2, 0
.L148:
	.word	gBattleResources
	.word	sBattler_AI
	.word	gBattleMons
.Lfe7:
	.size	 ChooseMoveOrAction_Singles,.Lfe7-ChooseMoveOrAction_Singles
	.align	2, 0
	.type	 ChooseMoveOrAction_Doubles,function
	.thumb_func
ChooseMoveOrAction_Doubles:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x24
	mov	r0, #0x0
	mov	r8, r0
	ldr	r7, .L192
	mov	r1, sp
	add	r1, r1, #0xc
	str	r1, [sp, #0x1c]
	mov	r2, sp
	add	r2, r2, #0x8
	str	r2, [sp, #0x18]
	str	r1, [sp, #0x20]
	mov	r9, sp
.L154:
	ldrb	r0, [r7]
	cmp	r8, r0
	beq	.L156	@cond_branch
	mov	r0, #0x5c
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r2, .L192+0x4
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	bne	.L155	@cond_branch
.L156:
	mov	r0, #0xff
	ldr	r1, [sp, #0x20]
	strb	r0, [r1]
	ldr	r0, .L192+0x8
	mov	r2, r9
	strh	r0, [r2]
	b	.L153
.L193:
	.align	2, 0
.L192:
	.word	sBattler_AI
	.word	gBattleMons
	.word	0xffff
.L155:
	ldr	r0, .L194
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xa
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L158	@cond_branch
	ldr	r0, .L194+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x8b
	ldrb	r0, [r0]
	lsr	r0, r0, #0x4
	bl	BattleAI_SetupAIData
	b	.L159
.L195:
	.align	2, 0
.L194:
	.word	gBattleTypeFlags
	.word	gBattleStruct
.L158:
	mov	r0, #0xf
	bl	BattleAI_SetupAIData
.L159:
	ldr	r0, .L196
	mov	r7, r8
	strb	r7, [r0]
	mov	r1, #0x1
	mov	r2, r8
	and	r2, r2, r1
	ldr	r0, .L196+0x4
	ldrb	r0, [r0]
	and	r1, r1, r0
	cmp	r2, r1
	beq	.L160	@cond_branch
	bl	RecordLastUsedMoveByTarget
.L160:
	ldr	r2, .L196+0x8
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	mov	r1, #0x0
	strb	r1, [r0, #0x11]
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	strb	r1, [r0, #0x1]
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	ldr	r4, [r0, #0xc]
	cmp	r4, #0
	beq	.L162	@cond_branch
	add	r5, r2, #0
	mov	r6, #0x0
.L163:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L164	@cond_branch
	ldr	r0, [r5]
	ldr	r0, [r0, #0x14]
	strb	r6, [r0]
	bl	BattleAI_DoAIProcessing
.L164:
	lsr	r4, r4, #0x1
	ldr	r0, [r5]
	ldr	r1, [r0, #0x14]
	ldrb	r0, [r1, #0x11]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x11]
	ldr	r0, [r5]
	ldr	r0, [r0, #0x14]
	strb	r6, [r0, #0x1]
	cmp	r4, #0
	bne	.L163	@cond_branch
.L162:
	ldr	r1, .L196+0x8
	ldr	r0, [r1]
	ldr	r3, [r0, #0x14]
	ldrb	r1, [r3, #0x10]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L166	@cond_branch
	mov	r0, #0x4
	ldr	r2, [sp, #0x20]
	strb	r0, [r2]
	b	.L167
.L197:
	.align	2, 0
.L196:
	.word	gBattlerTarget
	.word	sBattler_AI
	.word	gBattleResources
.L166:
	mov	r0, #0x4
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.L168	@cond_branch
	mov	r0, #0x5
	ldr	r7, [sp, #0x20]
	strb	r0, [r7]
	b	.L167
.L168:
	add	r1, sp, #0x10
	ldrb	r0, [r3, #0x4]
	strb	r0, [r1]
	add	r0, sp, #0x14
	strb	r2, [r0]
	mov	r5, #0x1
	mov	r3, #0x1
	ldr	r7, .L198
	add	r6, r1, #0
	mov	sl, r0
	ldrb	r1, [r7]
	mov	r0, #0x5c
	mul	r0, r0, r1
	ldr	r1, .L198+0x4
	add	r0, r0, r1
	add	r4, r0, #0x2
	mov	r7, sl
.L173:
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L172	@cond_branch
	ldrb	r1, [r6]
	ldr	r2, .L198+0x8
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r2, r0, r3
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r1, r0
	bne	.L175	@cond_branch
	add	r0, r6, r5
	ldrb	r1, [r2]
	strb	r1, [r0]
	add	r0, r7, r5
	strb	r3, [r0]
	add	r5, r5, #0x1
.L175:
	ldrb	r1, [r6]
	ldr	r2, .L198+0x8
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r2, r0, r3
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r1, r0
	bge	.L172	@cond_branch
	ldrb	r0, [r2]
	strb	r0, [r6]
	strb	r3, [r7]
	mov	r5, #0x1
.L172:
	add	r4, r4, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L173	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r5, #0
	bl	__modsi3
	add	r0, r0, sl
	ldrb	r0, [r0]
	ldr	r7, [sp, #0x20]
	strb	r0, [r7]
	ldrb	r2, [r6]
	mov	r0, r9
	strh	r2, [r0]
	ldr	r0, .L198
	ldrb	r1, [r0]
	mov	r0, #0x2
	eor	r0, r0, r1
	cmp	r8, r0
	bne	.L167	@cond_branch
	cmp	r2, #0x63
	bgt	.L167	@cond_branch
	ldr	r0, .L198+0xc
	mov	r1, r9
	strh	r0, [r1]
.L167:
	mov	r3, #0x0
	ldr	r7, .L198
	ldr	r5, .L198+0x10
	ldr	r4, .L198+0x14
.L182:
	ldr	r2, [r5]
	ldrb	r1, [r4]
	lsl	r1, r1, #0x2
	add	r1, r3, r1
	ldrb	r0, [r7]
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	mov	r0, #0xbf
	lsl	r0, r0, #0x2
	add	r2, r2, r0
	add	r2, r2, r1
	ldr	r1, .L198+0x8
	ldr	r0, [r1]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r0, r0, r3
	ldrb	r0, [r0]
	strb	r0, [r2]
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L182	@cond_branch
.L153:
	ldr	r2, [sp, #0x20]
	add	r2, r2, #0x1
	str	r2, [sp, #0x20]
	mov	r0, #0x2
	add	r9, r9, r0
	mov	r1, #0x1
	add	r8, r8, r1
	mov	r2, r8
	cmp	r2, #0x3
	bgt	.LCB1571
	b	.L154	@long jump
.LCB1571:
	mov	r0, sp
	ldrh	r5, [r0]
	mov	r0, #0x0
	ldr	r7, [sp, #0x18]
	strb	r0, [r7]
	mov	r4, #0x1
	mov	r8, r4
	ldr	r6, .L198+0x14
	ldr	r3, [sp, #0x18]
	mov	r1, sp
	add	r1, r1, #0x2
.L188:
	lsl	r0, r5, #0x10
	asr	r2, r0, #0x10
	mov	r7, #0x0
	ldrsh	r0, [r1, r7]
	cmp	r2, r0
	bne	.L189	@cond_branch
	add	r0, r3, r4
	mov	r7, r8
	strb	r7, [r0]
	add	r4, r4, #0x1
.L189:
	mov	r7, #0x0
	ldrsh	r0, [r1, r7]
	cmp	r2, r0
	bge	.L187	@cond_branch
	ldrh	r5, [r1]
	mov	r0, r8
	strb	r0, [r3]
	mov	r4, #0x1
.L187:
	add	r1, r1, #0x2
	mov	r2, #0x1
	add	r8, r8, r2
	mov	r7, r8
	cmp	r7, #0x3
	ble	.L188	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r4, #0
	bl	__modsi3
	ldr	r1, [sp, #0x18]
	add	r0, r1, r0
	ldrb	r0, [r0]
	strb	r0, [r6]
	ldrb	r0, [r6]
	ldr	r2, [sp, #0x1c]
	add	r0, r2, r0
	ldrb	r0, [r0]
	add	sp, sp, #0x24
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L199:
	.align	2, 0
.L198:
	.word	sBattler_AI
	.word	gBattleMons+0xc
	.word	gBattleResources
	.word	0xffff
	.word	gBattleStruct
	.word	gBattlerTarget
.Lfe8:
	.size	 ChooseMoveOrAction_Doubles,.Lfe8-ChooseMoveOrAction_Doubles
	.align	2, 0
	.type	 BattleAI_DoAIProcessing,function
	.thumb_func
BattleAI_DoAIProcessing:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r7, .L220
	ldr	r0, [r7]
	ldr	r0, [r0, #0x14]
	ldrb	r0, [r0]
	add	r6, r7, #0
	cmp	r0, #0x2
	bne	.LCB1688
	b	.L202	@long jump
.LCB1688:
	mov	r9, r7
	ldr	r0, .L220+0x4
	mov	r8, r0
.L203:
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r2, [r0, #0x14]
	ldrb	r0, [r2]
	cmp	r0, #0x1
	beq	.L209	@cond_branch
	cmp	r0, #0x1
	bgt	.L201	@cond_branch
	cmp	r0, #0
	bne	.L201	@cond_branch
	ldr	r1, .L220+0x8
	ldrb	r0, [r2, #0x11]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, r8
	str	r0, [r1]
	ldr	r5, .L220+0xc
	ldrb	r4, [r2, #0x1]
	ldr	r0, .L220+0x10
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mov	r3, r1
	mul	r3, r3, r0
	add	r0, r4, r3
	add	r1, r5, #0
	add	r1, r1, #0x25
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L219	@cond_branch
	lsl	r0, r4, #0x1
	add	r0, r0, r3
	add	r1, r5, #0
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldrh	r0, [r0]
.L219:
	strh	r0, [r2, #0x2]
	ldr	r0, [r6]
	ldr	r1, [r0, #0x14]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L201
.L221:
	.align	2, 0
.L220:
	.word	gBattleResources
	.word	gAIScriptPtr
	.word	gBattleAI_ScriptsTable
	.word	gBattleMons
	.word	sBattler_AI
.L209:
	ldrh	r1, [r2, #0x2]
	cmp	r1, #0
	beq	.L210	@cond_branch
	ldr	r1, .L222
	mov	r2, r8
	ldr	r0, [r2]
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	b	.L211
.L223:
	.align	2, 0
.L222:
	.word	sBattleAICmdTable
.L210:
	add	r0, r2, #0x4
	ldrb	r2, [r2, #0x1]
	add	r0, r0, r2
	strb	r1, [r0]
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r2, [r0, #0x14]
	ldrb	r1, [r2, #0x10]
	mov	r0, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x10]
.L211:
	ldr	r2, .L224
	ldr	r0, [r2]
	ldr	r3, [r0, #0x14]
	ldrb	r1, [r3, #0x10]
	mov	r0, #0x1
	and	r0, r0, r1
	add	r6, r2, #0
	cmp	r0, #0
	beq	.L201	@cond_branch
	ldrb	r0, [r3, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r3, #0x1]
	ldr	r0, [r6]
	ldr	r2, [r0, #0x14]
	ldrb	r0, [r2, #0x1]
	cmp	r0, #0x3
	bhi	.L213	@cond_branch
	ldrb	r1, [r2, #0x10]
	mov	r0, #0x8
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L213	@cond_branch
	strb	r0, [r2]
	b	.L214
.L225:
	.align	2, 0
.L224:
	.word	gBattleResources
.L213:
	ldr	r0, [r6]
	ldr	r1, [r0, #0x14]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L214:
	ldr	r0, [r6]
	ldr	r2, [r0, #0x14]
	ldrb	r1, [r2, #0x10]
	mov	r0, #0xfe
	and	r0, r0, r1
	strb	r0, [r2, #0x10]
.L201:
	ldr	r0, [r7]
	ldr	r0, [r0, #0x14]
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.LCB1860
	b	.L203	@long jump
.LCB1860:
.L202:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 BattleAI_DoAIProcessing,.Lfe9-BattleAI_DoAIProcessing
	.align	2, 0
	.type	 RecordLastUsedMoveByTarget,function
	.thumb_func
RecordLastUsedMoveByTarget:
	push	{lr}
	ldr	r0, .L227
	ldrb	r0, [r0]
	ldr	r2, .L227+0x4
	lsl	r1, r0, #0x1
	add	r1, r1, r2
	ldrh	r1, [r1]
	bl	RecordKnownMove
	pop	{r0}
	bx	r0
.L228:
	.align	2, 0
.L227:
	.word	gBattlerTarget
	.word	gLastMoves
.Lfe10:
	.size	 RecordLastUsedMoveByTarget,.Lfe10-RecordLastUsedMoveByTarget
	.align	2, 0
	.globl	IsBattlerAIControlled
	.type	 IsBattlerAIControlled,function
	.thumb_func
IsBattlerAIControlled:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L235	@cond_branch
	cmp	r0, #0x1
	ble	.L232	@cond_branch
	cmp	r0, #0x2
	beq	.L234	@cond_branch
	cmp	r0, #0x3
	beq	.L235	@cond_branch
.L232:
	mov	r0, #0x0
	b	.L238
.L234:
	ldr	r0, .L239
	ldr	r0, [r0]
	lsr	r0, r0, #0x16
	mov	r1, #0x1
	and	r0, r0, r1
	b	.L238
.L240:
	.align	2, 0
.L239:
	.word	gBattleTypeFlags
.L235:
	mov	r0, #0x1
.L238:
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 IsBattlerAIControlled,.Lfe11-IsBattlerAIControlled
	.align	2, 0
	.globl	ClearBattlerMoveHistory
	.type	 ClearBattlerMoveHistory,function
	.thumb_func
ClearBattlerMoveHistory:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L242
	ldr	r0, [r5]
	ldr	r1, [r0, #0x18]
	lsl	r0, r4, #0x3
	add	r0, r0, r1
	add	r0, r0, #0xc
	mov	r1, #0x0
	mov	r2, #0x8
	bl	memset
	ldr	r0, [r5]
	ldr	r1, [r0, #0x18]
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, #0x2c
	mov	r1, #0x0
	mov	r2, #0x6
	bl	memset
	ldr	r0, [r5]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0x44
	add	r0, r0, r4
	mov	r1, #0x0
	strb	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L243:
	.align	2, 0
.L242:
	.word	gBattleResources
.Lfe12:
	.size	 ClearBattlerMoveHistory,.Lfe12-ClearBattlerMoveHistory
	.align	2, 0
	.globl	RecordLastUsedMoveBy
	.type	 RecordLastUsedMoveBy,function
	.thumb_func
RecordLastUsedMoveBy:
	push	{r4, r5, lr}
	add	r3, r0, #0
	add	r5, r1, #0
	ldr	r4, .L246
	ldr	r0, [r4]
	add	r1, r3, #0
	add	r1, r1, #0x44
	ldr	r0, [r0, #0x18]
	add	r2, r0, r1
	ldrb	r0, [r2]
	add	r0, r0, #0x1
	strb	r0, [r2]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bls	.L245	@cond_branch
	mov	r0, #0x0
	strb	r0, [r2]
.L245:
	ldr	r0, [r4]
	ldr	r1, [r0, #0x18]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	ldrb	r2, [r2]
	add	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r1, r1, #0x2c
	add	r1, r1, r0
	strh	r5, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L247:
	.align	2, 0
.L246:
	.word	gBattleResources
.Lfe13:
	.size	 RecordLastUsedMoveBy,.Lfe13-RecordLastUsedMoveBy
	.align	2, 0
	.globl	RecordKnownMove
	.type	 RecordKnownMove,function
	.thumb_func
RecordKnownMove:
	push	{r4, r5, r6, r7, lr}
	add	r6, r1, #0
	lsl	r0, r0, #0x18
	mov	r7, #0x0
	ldr	r2, .L256
	ldr	r1, [r2]
	ldr	r1, [r1, #0x18]
	lsr	r3, r0, #0x15
	add	r1, r1, #0xc
	add	r1, r1, r3
	ldrh	r0, [r1]
	cmp	r0, r6
	beq	.L250	@cond_branch
	mov	ip, r2
	mov	r5, #0x0
.L253:
	mov	r1, ip
	ldr	r0, [r1]
	ldr	r1, [r0, #0x18]
	add	r4, r3, #0
	add	r0, r5, r4
	add	r1, r1, #0xc
	add	r2, r1, r0
	ldrh	r0, [r2]
	cmp	r0, #0
	bne	.L251	@cond_branch
	strh	r6, [r2]
	b	.L250
.L257:
	.align	2, 0
.L256:
	.word	gBattleResources
.L251:
	add	r5, r5, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x3
	bgt	.L250	@cond_branch
	add	r0, r5, r4
	add	r0, r1, r0
	ldrh	r0, [r0]
	cmp	r0, r6
	bne	.L253	@cond_branch
.L250:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 RecordKnownMove,.Lfe14-RecordKnownMove
	.align	2, 0
	.globl	RecordAbilityBattle
	.type	 RecordAbilityBattle,function
	.thumb_func
RecordAbilityBattle:
	lsl	r0, r0, #0x18
	ldr	r2, .L259
	ldr	r2, [r2]
	ldr	r2, [r2, #0x18]
	lsr	r0, r0, #0x17
	add	r2, r2, r0
	strh	r1, [r2]
	bx	lr
.L260:
	.align	2, 0
.L259:
	.word	gBattleResources
.Lfe15:
	.size	 RecordAbilityBattle,.Lfe15-RecordAbilityBattle
	.align	2, 0
	.globl	ClearBattlerAbilityHistory
	.type	 ClearBattlerAbilityHistory,function
	.thumb_func
ClearBattlerAbilityHistory:
	lsl	r0, r0, #0x18
	ldr	r1, .L262
	ldr	r1, [r1]
	ldr	r1, [r1, #0x18]
	lsr	r0, r0, #0x17
	add	r1, r1, r0
	mov	r0, #0x0
	strh	r0, [r1]
	bx	lr
.L263:
	.align	2, 0
.L262:
	.word	gBattleResources
.Lfe16:
	.size	 ClearBattlerAbilityHistory,.Lfe16-ClearBattlerAbilityHistory
	.align	2, 0
	.globl	RecordItemEffectBattle
	.type	 RecordItemEffectBattle,function
	.thumb_func
RecordItemEffectBattle:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L265
	ldr	r2, [r2]
	ldr	r2, [r2, #0x18]
	add	r2, r2, #0x8
	add	r2, r2, r0
	strb	r1, [r2]
	bx	lr
.L266:
	.align	2, 0
.L265:
	.word	gBattleResources
.Lfe17:
	.size	 RecordItemEffectBattle,.Lfe17-RecordItemEffectBattle
	.align	2, 0
	.globl	ClearBattlerItemEffectHistory
	.type	 ClearBattlerItemEffectHistory,function
	.thumb_func
ClearBattlerItemEffectHistory:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L268
	ldr	r1, [r1]
	ldr	r1, [r1, #0x18]
	add	r1, r1, #0x8
	add	r1, r1, r0
	mov	r0, #0x0
	strb	r0, [r1]
	bx	lr
.L269:
	.align	2, 0
.L268:
	.word	gBattleResources
.Lfe18:
	.size	 ClearBattlerItemEffectHistory,.Lfe18-ClearBattlerItemEffectHistory
	.align	2, 0
	.type	 SaveBattlerData,function
	.thumb_func
SaveBattlerData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r6, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	bne	.L271	@cond_branch
	ldr	r0, .L277
	mov	r8, r0
	ldr	r3, [r0]
	ldr	r1, [r3, #0x14]
	lsl	r5, r6, #0x4
	add	r1, r1, r5
	ldr	r4, .L277+0x4
	mov	r0, #0x5c
	mul	r6, r6, r0
	add	r2, r6, r4
	ldrh	r0, [r2, #0x20]
	mov	r7, #0x8a
	lsl	r7, r7, #0x1
	add	r1, r1, r7
	strh	r0, [r1]
	ldr	r0, [r3, #0x14]
	add	r0, r0, r5
	ldrh	r1, [r2, #0x30]
	add	r7, r7, #0xa
	add	r0, r0, r7
	strh	r1, [r0]
	ldr	r0, [r3, #0x14]
	add	r0, r0, r5
	ldrh	r1, [r2]
	mov	r2, #0x90
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	strh	r1, [r0]
	mov	r2, #0x0
	mov	r7, r8
	mov	r3, #0x8b
	lsl	r3, r3, #0x1
	add	r4, r4, #0xc
	add	r6, r6, r4
.L275:
	ldr	r0, [r7]
	ldr	r0, [r0, #0x14]
	add	r0, r0, r3
	add	r0, r0, r5
	ldrh	r1, [r6]
	strh	r1, [r0]
	add	r6, r6, #0x2
	add	r5, r5, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bls	.L275	@cond_branch
.L271:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L278:
	.align	2, 0
.L277:
	.word	gBattleResources
	.word	gBattleMons
.Lfe19:
	.size	 SaveBattlerData,.Lfe19-SaveBattlerData
	.align	2, 0
	.type	 SetBattlerData,function
	.thumb_func
SetBattlerData:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r5, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	bne	.L280	@cond_branch
	ldr	r2, .L294
	ldr	r0, [r2]
	ldr	r0, [r0, #0x18]
	lsl	r1, r5, #0x1
	add	r0, r0, r1
	ldrh	r3, [r0]
	add	r6, r3, #0
	add	r7, r2, #0
	cmp	r6, #0
	beq	.L281	@cond_branch
	ldr	r1, .L294+0x4
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r1
	strh	r3, [r0, #0x20]
	b	.L282
.L295:
	.align	2, 0
.L294:
	.word	gBattleResources
	.word	gBattleMons
.L281:
	ldr	r3, .L296
	ldr	r2, .L296+0x4
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r4, r0, r2
	ldrh	r1, [r4]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r3, [r0, #0x1a]
	add	r1, r2, #0
	cmp	r3, #0
	beq	.L284	@cond_branch
	ldrh	r2, [r0, #0x18]
	cmp	r3, r2
	bne	.L283	@cond_branch
.L284:
	ldrh	r0, [r0, #0x18]
	strh	r0, [r4, #0x20]
	b	.L282
.L297:
	.align	2, 0
.L296:
	.word	gBaseStats
	.word	gBattleMons
.L283:
	strh	r6, [r4, #0x20]
.L282:
	ldr	r0, [r7]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0x8
	add	r0, r0, r5
	ldrb	r3, [r0]
	cmp	r3, #0
	bne	.L286	@cond_branch
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r1
	strh	r3, [r0, #0x30]
.L286:
	mov	r4, #0x0
	add	r2, r7, #0
	ldr	r0, .L298
	mov	r1, #0x5c
	mul	r1, r1, r5
	add	r0, r0, #0xc
	add	r1, r1, r0
	lsl	r3, r5, #0x3
.L290:
	ldr	r0, [r2]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0xc
	add	r0, r0, r3
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L289	@cond_branch
	strh	r0, [r1]
.L289:
	add	r1, r1, #0x2
	add	r3, r3, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bls	.L290	@cond_branch
	add	r0, r5, #0
	bl	GetIllusionMonPtr
	cmp	r0, #0
	beq	.L280	@cond_branch
	mov	r1, #0x41
	bl	GetMonData
	ldr	r2, .L298
	mov	r1, #0x5c
	mul	r1, r1, r5
	add	r1, r1, r2
	strh	r0, [r1]
.L280:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L299:
	.align	2, 0
.L298:
	.word	gBattleMons
.Lfe20:
	.size	 SetBattlerData,.Lfe20-SetBattlerData
	.align	2, 0
	.type	 RestoreBattlerData,function
	.thumb_func
RestoreBattlerData:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	add	r0, r7, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	bne	.L301	@cond_branch
	ldr	r4, .L307
	mov	r0, #0x5c
	mov	r6, r7
	mul	r6, r6, r0
	add	r3, r6, r4
	ldr	r5, .L307+0x4
	ldr	r1, [r5]
	ldr	r0, [r1, #0x14]
	lsl	r2, r7, #0x4
	add	r0, r0, r2
	mov	r7, #0x8a
	lsl	r7, r7, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	strh	r0, [r3, #0x20]
	ldr	r0, [r1, #0x14]
	add	r0, r0, r2
	add	r7, r7, #0xa
	add	r0, r0, r7
	ldrh	r0, [r0]
	strh	r0, [r3, #0x30]
	ldr	r0, [r1, #0x14]
	add	r0, r0, r2
	mov	r1, #0x90
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r3]
	mov	r1, #0x0
	add	r4, r4, #0xc
	add	r6, r6, r4
	mov	r3, #0x8b
	lsl	r3, r3, #0x1
.L305:
	ldr	r0, [r5]
	ldr	r0, [r0, #0x14]
	add	r0, r0, r3
	add	r0, r0, r2
	ldrh	r0, [r0]
	strh	r0, [r6]
	add	r6, r6, #0x2
	add	r2, r2, #0x2
	add	r1, r1, #0x1
	cmp	r1, #0x3
	bls	.L305	@cond_branch
.L301:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L308:
	.align	2, 0
.L307:
	.word	gBattleMons
	.word	gBattleResources
.Lfe21:
	.size	 RestoreBattlerData,.Lfe21-RestoreBattlerData
	.align	2, 0
	.type	 AI_GetIfCrit,function
	.thumb_func
AI_GetIfCrit:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r1, #0
	add	r1, r2, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r2, r4, #0
	mov	r3, #0x0
	bl	CalcCritChanceStage
	add	r0, r0, #0x2
	cmp	r0, #0x6
	bhi	.L320	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L327
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L328:
	.align	2, 0
.L327:
	.word	.L325
	.align	2, 0
	.align	2, 0
.L325:
	.word	.L324
	.word	.L320
	.word	.L320
	.word	.L314
	.word	.L317
	.word	.L324
	.word	.L324
.L314:
	ldr	r1, .L329
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L320	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x5
	bl	__umodsi3
	lsl	r0, r0, #0x10
	mov	r2, #0x1
	cmp	r0, #0
	beq	.L310	@cond_branch
	b	.L320
.L330:
	.align	2, 0
.L329:
	.word	gBattleMoves
.L317:
	ldr	r1, .L331
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L326	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L320	@cond_branch
	b	.L324
.L332:
	.align	2, 0
.L331:
	.word	gBattleMoves
.L326:
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r0
	mov	r2, #0x1
	cmp	r1, #0
	beq	.L310	@cond_branch
.L320:
	mov	r2, #0x0
	b	.L310
.L324:
	mov	r2, #0x1
.L310:
	add	r0, r2, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe22:
	.size	 AI_GetIfCrit,.Lfe22-AI_GetIfCrit
	.align	2, 0
	.globl	AI_CalcDamage
	.type	 AI_CalcDamage,function
	.thumb_func
AI_CalcDamage:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	add	r0, r5, #0
	bl	SaveBattlerData
	add	r0, r7, #0
	bl	SaveBattlerData
	add	r0, r5, #0
	bl	SetBattlerData
	add	r0, r7, #0
	bl	SetBattlerData
	ldr	r4, .L336
	ldr	r1, [r4]
	mov	r0, #0x0
	strb	r0, [r1, #0x12]
	add	r0, r6, #0
	add	r1, r5, #0
	bl	SetTypeBeforeUsingMove
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x12]
	cmp	r0, #0
	beq	.L334	@cond_branch
	mov	r4, #0x3f
	and	r4, r4, r0
	b	.L335
.L337:
	.align	2, 0
.L336:
	.word	gBattleStruct
.L334:
	ldr	r1, .L338
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r4, [r0, #0x3]
.L335:
	add	r0, r6, #0
	add	r1, r5, #0
	add	r2, r7, #0
	bl	AI_GetIfCrit
	add	r3, r4, #0
	mov	r1, #0x0
	str	r1, [sp]
	str	r0, [sp, #0x4]
	str	r1, [sp, #0x8]
	str	r1, [sp, #0xc]
	add	r0, r6, #0
	add	r1, r5, #0
	add	r2, r7, #0
	bl	CalculateMoveDamage
	add	r4, r0, #0
	add	r0, r5, #0
	bl	RestoreBattlerData
	add	r0, r7, #0
	bl	RestoreBattlerData
	add	r0, r4, #0
	add	sp, sp, #0x10
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L339:
	.align	2, 0
.L338:
	.word	gBattleMoves
.Lfe23:
	.size	 AI_CalcDamage,.Lfe23-AI_CalcDamage
	.align	2, 0
	.globl	AI_CalcPartyMonDamage
	.type	 AI_CalcPartyMonDamage,function
	.thumb_func
AI_CalcPartyMonDamage:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	str	r3, [sp, #0x4]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	sl, r2
	mov	r0, #0xb8
	lsl	r0, r0, #0x1
	bl	Alloc
	add	r7, r0, #0
	add	r4, r7, #0
	mov	r5, #0x0
	mov	r0, #0x8a
	lsl	r0, r0, #0x1
	add	r6, r7, r0
	ldr	r0, .L351
	mov	r8, r0
.L344:
	mov	r0, r8
	add	r1, r5, r0
	add	r0, r4, #0
	mov	r2, #0x5c
	bl	memcpy
	add	r4, r4, #0x5c
	add	r5, r5, #0x5c
	cmp	r4, r6
	bls	.L344	@cond_branch
	mov	r0, #0x5c
	mov	r1, r9
	mul	r1, r1, r0
	ldr	r4, .L351
	add	r1, r1, r4
	ldr	r0, [sp, #0x4]
	bl	PokemonToBattleMon
	ldr	r0, [sp]
	mov	r1, r9
	mov	r2, sl
	bl	AI_CalcDamage
	mov	r8, r0
	add	r5, r7, #0
	mov	r0, #0x8a
	lsl	r0, r0, #0x1
	add	r6, r7, r0
.L349:
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x5c
	bl	memcpy
	add	r5, r5, #0x5c
	add	r4, r4, #0x5c
	cmp	r5, r6
	bls	.L349	@cond_branch
	add	r0, r7, #0
	bl	Free
	mov	r0, r8
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L352:
	.align	2, 0
.L351:
	.word	gBattleMons
.Lfe24:
	.size	 AI_CalcPartyMonDamage,.Lfe24-AI_CalcPartyMonDamage
	.align	2, 0
	.globl	AI_GetTypeEffectiveness
	.type	 AI_GetTypeEffectiveness,function
	.thumb_func
AI_GetTypeEffectiveness:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	add	r0, r5, #0
	bl	SaveBattlerData
	add	r0, r7, #0
	bl	SaveBattlerData
	add	r0, r5, #0
	bl	SetBattlerData
	add	r0, r7, #0
	bl	SetBattlerData
	ldr	r4, .L356
	ldr	r1, [r4]
	mov	r0, #0x0
	strb	r0, [r1, #0x12]
	add	r0, r6, #0
	add	r1, r5, #0
	bl	SetTypeBeforeUsingMove
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x12]
	cmp	r0, #0
	beq	.L354	@cond_branch
	mov	r1, #0x3f
	and	r1, r1, r0
	b	.L355
.L357:
	.align	2, 0
.L356:
	.word	gBattleStruct
.L354:
	ldr	r1, .L358
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x3]
.L355:
	mov	r0, #0x0
	str	r0, [sp]
	add	r0, r6, #0
	add	r2, r5, #0
	add	r3, r7, #0
	bl	CalcTypeEffectivenessMultiplier
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	bl	RestoreBattlerData
	add	r0, r7, #0
	bl	RestoreBattlerData
	add	r0, r4, #0
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L359:
	.align	2, 0
.L358:
	.word	gBattleMoves
.Lfe25:
	.size	 AI_GetTypeEffectiveness,.Lfe25-AI_GetTypeEffectiveness
	.align	2, 0
	.type	 Cmd_if_random_less_than,function
	.thumb_func
Cmd_if_random_less_than:
	push	{lr}
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xff
	lsl	r1, r1, #0x10
	ldr	r3, .L363
	ldr	r2, [r3]
	and	r1, r1, r0
	lsr	r1, r1, #0x10
	ldrb	r0, [r2, #0x1]
	cmp	r1, r0
	bcs	.L361	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L362
.L364:
	.align	2, 0
.L363:
	.word	gAIScriptPtr
.L361:
	add	r0, r2, #0x6
	str	r0, [r3]
.L362:
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 Cmd_if_random_less_than,.Lfe26-Cmd_if_random_less_than
	.align	2, 0
	.type	 Cmd_if_random_greater_than,function
	.thumb_func
Cmd_if_random_greater_than:
	push	{lr}
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xff
	lsl	r1, r1, #0x10
	ldr	r3, .L368
	ldr	r2, [r3]
	and	r1, r1, r0
	lsr	r1, r1, #0x10
	ldrb	r0, [r2, #0x1]
	cmp	r1, r0
	bls	.L366	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L367
.L369:
	.align	2, 0
.L368:
	.word	gAIScriptPtr
.L366:
	add	r0, r2, #0x6
	str	r0, [r3]
.L367:
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 Cmd_if_random_greater_than,.Lfe27-Cmd_if_random_greater_than
	.align	2, 0
	.type	 Cmd_if_random_equal,function
	.thumb_func
Cmd_if_random_equal:
	push	{lr}
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xff
	lsl	r1, r1, #0x10
	ldr	r3, .L373
	ldr	r2, [r3]
	and	r1, r1, r0
	lsr	r1, r1, #0x10
	ldrb	r0, [r2, #0x1]
	cmp	r1, r0
	bne	.L371	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L372
.L374:
	.align	2, 0
.L373:
	.word	gAIScriptPtr
.L371:
	add	r0, r2, #0x6
	str	r0, [r3]
.L372:
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 Cmd_if_random_equal,.Lfe28-Cmd_if_random_equal
	.align	2, 0
	.type	 Cmd_if_random_not_equal,function
	.thumb_func
Cmd_if_random_not_equal:
	push	{lr}
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xff
	lsl	r1, r1, #0x10
	ldr	r3, .L378
	ldr	r2, [r3]
	and	r1, r1, r0
	lsr	r1, r1, #0x10
	ldrb	r0, [r2, #0x1]
	cmp	r1, r0
	beq	.L376	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L377
.L379:
	.align	2, 0
.L378:
	.word	gAIScriptPtr
.L376:
	add	r0, r2, #0x6
	str	r0, [r3]
.L377:
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 Cmd_if_random_not_equal,.Lfe29-Cmd_if_random_not_equal
	.align	2, 0
	.type	 Cmd_score,function
	.thumb_func
Cmd_score:
	push	{r4, lr}
	ldr	r2, .L382
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	add	r1, r0, #0x4
	ldrb	r0, [r0, #0x1]
	add	r1, r1, r0
	ldr	r3, .L382+0x4
	ldr	r0, [r3]
	ldrb	r0, [r0, #0x1]
	ldrb	r4, [r1]
	add	r0, r0, r4
	strb	r0, [r1]
	ldr	r0, [r2]
	ldr	r1, [r0, #0x14]
	add	r0, r1, #0x4
	ldrb	r1, [r1, #0x1]
	add	r1, r0, r1
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	cmp	r0, #0
	bge	.L381	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1]
.L381:
	ldr	r0, [r3]
	add	r0, r0, #0x2
	str	r0, [r3]
	pop	{r4}
	pop	{r0}
	bx	r0
.L383:
	.align	2, 0
.L382:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe30:
	.size	 Cmd_score,.Lfe30-Cmd_score
	.align	2, 0
	.type	 BattleAI_GetWantedBattler,function
	.thumb_func
BattleAI_GetWantedBattler:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L386	@cond_branch
	ldr	r0, .L396
	ldrb	r0, [r0]
	b	.L394
.L397:
	.align	2, 0
.L396:
	.word	sBattler_AI
.L386:
	cmp	r0, #0x1
	ble	.L388	@cond_branch
	cmp	r0, #0x2
	beq	.L390	@cond_branch
	cmp	r0, #0x3
	beq	.L389	@cond_branch
.L388:
	ldr	r0, .L398
	ldrb	r0, [r0]
	b	.L394
.L399:
	.align	2, 0
.L398:
	.word	gBattlerTarget
.L389:
	ldr	r0, .L400
	b	.L395
.L401:
	.align	2, 0
.L400:
	.word	sBattler_AI
.L390:
	ldr	r0, .L402
.L395:
	ldrb	r1, [r0]
	mov	r0, #0x2
	eor	r0, r0, r1
.L394:
	pop	{r1}
	bx	r1
.L403:
	.align	2, 0
.L402:
	.word	gBattlerTarget
.Lfe31:
	.size	 BattleAI_GetWantedBattler,.Lfe31-BattleAI_GetWantedBattler
	.align	2, 0
	.type	 Cmd_if_hp_less_than,function
	.thumb_func
Cmd_if_hp_less_than:
	push	{r4, lr}
	ldr	r4, .L407
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L407+0x4
	mov	r1, #0x5c
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r2, [r1, #0x2a]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldrh	r1, [r1, #0x2e]
	bl	__divsi3
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	cmp	r0, r1
	bcs	.L405	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L406
.L408:
	.align	2, 0
.L407:
	.word	gAIScriptPtr
	.word	gBattleMons
.L405:
	add	r0, r2, #0x7
	str	r0, [r4]
.L406:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 Cmd_if_hp_less_than,.Lfe32-Cmd_if_hp_less_than
	.align	2, 0
	.type	 Cmd_if_hp_more_than,function
	.thumb_func
Cmd_if_hp_more_than:
	push	{r4, lr}
	ldr	r4, .L412
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L412+0x4
	mov	r1, #0x5c
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r2, [r1, #0x2a]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldrh	r1, [r1, #0x2e]
	bl	__divsi3
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	cmp	r0, r1
	bls	.L410	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L411
.L413:
	.align	2, 0
.L412:
	.word	gAIScriptPtr
	.word	gBattleMons
.L410:
	add	r0, r2, #0x7
	str	r0, [r4]
.L411:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 Cmd_if_hp_more_than,.Lfe33-Cmd_if_hp_more_than
	.align	2, 0
	.type	 Cmd_if_hp_equal,function
	.thumb_func
Cmd_if_hp_equal:
	push	{r4, lr}
	ldr	r4, .L417
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L417+0x4
	mov	r1, #0x5c
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r2, [r1, #0x2a]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldrh	r1, [r1, #0x2e]
	bl	__divsi3
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	cmp	r0, r1
	bne	.L415	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L416
.L418:
	.align	2, 0
.L417:
	.word	gAIScriptPtr
	.word	gBattleMons
.L415:
	add	r0, r2, #0x7
	str	r0, [r4]
.L416:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 Cmd_if_hp_equal,.Lfe34-Cmd_if_hp_equal
	.align	2, 0
	.type	 Cmd_if_hp_not_equal,function
	.thumb_func
Cmd_if_hp_not_equal:
	push	{r4, lr}
	ldr	r4, .L422
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L422+0x4
	mov	r1, #0x5c
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r2, [r1, #0x2a]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldrh	r1, [r1, #0x2e]
	bl	__divsi3
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	cmp	r0, r1
	beq	.L420	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L421
.L423:
	.align	2, 0
.L422:
	.word	gAIScriptPtr
	.word	gBattleMons
.L420:
	add	r0, r2, #0x7
	str	r0, [r4]
.L421:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe35:
	.size	 Cmd_if_hp_not_equal,.Lfe35-Cmd_if_hp_not_equal
	.align	2, 0
	.type	 Cmd_if_status,function
	.thumb_func
Cmd_if_status:
	push	{r4, r5, lr}
	ldr	r5, .L427
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, [r5]
	ldrb	r3, [r4, #0x2]
	ldrb	r1, [r4, #0x3]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	ldrb	r1, [r4, #0x4]
	lsl	r1, r1, #0x10
	orr	r3, r3, r1
	ldrb	r1, [r4, #0x5]
	lsl	r1, r1, #0x18
	orr	r3, r3, r1
	ldr	r1, .L427+0x4
	mov	r2, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L425	@cond_branch
	ldrb	r1, [r4, #0x6]
	ldrb	r0, [r4, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L426
.L428:
	.align	2, 0
.L427:
	.word	gAIScriptPtr
	.word	gBattleMons
.L425:
	add	r0, r4, #0
	add	r0, r0, #0xa
	str	r0, [r5]
.L426:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 Cmd_if_status,.Lfe36-Cmd_if_status
	.align	2, 0
	.type	 Cmd_if_not_status,function
	.thumb_func
Cmd_if_not_status:
	push	{r4, r5, lr}
	ldr	r5, .L432
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, [r5]
	ldrb	r3, [r4, #0x2]
	ldrb	r1, [r4, #0x3]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	ldrb	r1, [r4, #0x4]
	lsl	r1, r1, #0x10
	orr	r3, r3, r1
	ldrb	r1, [r4, #0x5]
	lsl	r1, r1, #0x18
	orr	r3, r3, r1
	ldr	r1, .L432+0x4
	mov	r2, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L430	@cond_branch
	ldrb	r1, [r4, #0x6]
	ldrb	r0, [r4, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L431
.L433:
	.align	2, 0
.L432:
	.word	gAIScriptPtr
	.word	gBattleMons
.L430:
	add	r0, r4, #0
	add	r0, r0, #0xa
	str	r0, [r5]
.L431:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 Cmd_if_not_status,.Lfe37-Cmd_if_not_status
	.align	2, 0
	.type	 Cmd_if_status2,function
	.thumb_func
Cmd_if_status2:
	push	{r4, r5, lr}
	ldr	r5, .L437
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, [r5]
	ldrb	r3, [r4, #0x2]
	ldrb	r1, [r4, #0x3]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	ldrb	r1, [r4, #0x4]
	lsl	r1, r1, #0x10
	orr	r3, r3, r1
	ldrb	r1, [r4, #0x5]
	lsl	r1, r1, #0x18
	orr	r3, r3, r1
	ldr	r1, .L437+0x4
	mov	r2, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L435	@cond_branch
	ldrb	r1, [r4, #0x6]
	ldrb	r0, [r4, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L436
.L438:
	.align	2, 0
.L437:
	.word	gAIScriptPtr
	.word	gBattleMons
.L435:
	add	r0, r4, #0
	add	r0, r0, #0xa
	str	r0, [r5]
.L436:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 Cmd_if_status2,.Lfe38-Cmd_if_status2
	.align	2, 0
	.type	 Cmd_if_not_status2,function
	.thumb_func
Cmd_if_not_status2:
	push	{r4, r5, lr}
	ldr	r5, .L442
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, [r5]
	ldrb	r3, [r4, #0x2]
	ldrb	r1, [r4, #0x3]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	ldrb	r1, [r4, #0x4]
	lsl	r1, r1, #0x10
	orr	r3, r3, r1
	ldrb	r1, [r4, #0x5]
	lsl	r1, r1, #0x18
	orr	r3, r3, r1
	ldr	r1, .L442+0x4
	mov	r2, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L440	@cond_branch
	ldrb	r1, [r4, #0x6]
	ldrb	r0, [r4, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L441
.L443:
	.align	2, 0
.L442:
	.word	gAIScriptPtr
	.word	gBattleMons
.L440:
	add	r0, r4, #0
	add	r0, r0, #0xa
	str	r0, [r5]
.L441:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 Cmd_if_not_status2,.Lfe39-Cmd_if_not_status2
	.align	2, 0
	.type	 Cmd_if_status3,function
	.thumb_func
Cmd_if_status3:
	push	{r4, lr}
	ldr	r4, .L447
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	ldr	r3, [r4]
	ldrb	r2, [r3, #0x2]
	ldrb	r1, [r3, #0x3]
	lsl	r1, r1, #0x8
	orr	r2, r2, r1
	ldrb	r1, [r3, #0x4]
	lsl	r1, r1, #0x10
	orr	r2, r2, r1
	ldrb	r1, [r3, #0x5]
	lsl	r1, r1, #0x18
	orr	r2, r2, r1
	ldr	r1, .L447+0x4
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L445	@cond_branch
	ldrb	r1, [r3, #0x6]
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L446
.L448:
	.align	2, 0
.L447:
	.word	gAIScriptPtr
	.word	gStatuses3
.L445:
	add	r0, r3, #0
	add	r0, r0, #0xa
	str	r0, [r4]
.L446:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 Cmd_if_status3,.Lfe40-Cmd_if_status3
	.align	2, 0
	.type	 Cmd_if_not_status3,function
	.thumb_func
Cmd_if_not_status3:
	push	{r4, lr}
	ldr	r4, .L452
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	ldr	r3, [r4]
	ldrb	r2, [r3, #0x2]
	ldrb	r1, [r3, #0x3]
	lsl	r1, r1, #0x8
	orr	r2, r2, r1
	ldrb	r1, [r3, #0x4]
	lsl	r1, r1, #0x10
	orr	r2, r2, r1
	ldrb	r1, [r3, #0x5]
	lsl	r1, r1, #0x18
	orr	r2, r2, r1
	ldr	r1, .L452+0x4
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L450	@cond_branch
	ldrb	r1, [r3, #0x6]
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L451
.L453:
	.align	2, 0
.L452:
	.word	gAIScriptPtr
	.word	gStatuses3
.L450:
	add	r0, r3, #0
	add	r0, r0, #0xa
	str	r0, [r4]
.L451:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 Cmd_if_not_status3,.Lfe41-Cmd_if_not_status3
	.align	2, 0
	.type	 Cmd_if_side_affecting,function
	.thumb_func
Cmd_if_side_affecting:
	push	{r4, r5, lr}
	ldr	r5, .L457
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	ldr	r2, [r5]
	ldrb	r4, [r2, #0x2]
	ldrb	r1, [r2, #0x3]
	lsl	r1, r1, #0x8
	orr	r4, r4, r1
	ldrb	r1, [r2, #0x4]
	lsl	r1, r1, #0x10
	orr	r4, r4, r1
	ldrb	r1, [r2, #0x5]
	lsl	r1, r1, #0x18
	orr	r4, r4, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerPosition
	mov	r1, #0x1
	and	r1, r1, r0
	ldr	r0, .L457+0x4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L455	@cond_branch
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x6]
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L456
.L458:
	.align	2, 0
.L457:
	.word	gAIScriptPtr
	.word	gSideStatuses
.L455:
	ldr	r0, [r5]
	add	r0, r0, #0xa
	str	r0, [r5]
.L456:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 Cmd_if_side_affecting,.Lfe42-Cmd_if_side_affecting
	.align	2, 0
	.type	 Cmd_if_not_side_affecting,function
	.thumb_func
Cmd_if_not_side_affecting:
	push	{r4, r5, lr}
	ldr	r5, .L462
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	ldr	r2, [r5]
	ldrb	r4, [r2, #0x2]
	ldrb	r1, [r2, #0x3]
	lsl	r1, r1, #0x8
	orr	r4, r4, r1
	ldrb	r1, [r2, #0x4]
	lsl	r1, r1, #0x10
	orr	r4, r4, r1
	ldrb	r1, [r2, #0x5]
	lsl	r1, r1, #0x18
	orr	r4, r4, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerPosition
	mov	r1, #0x1
	and	r1, r1, r0
	ldr	r0, .L462+0x4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	and	r0, r0, r4
	cmp	r0, #0
	bne	.L460	@cond_branch
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x6]
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L461
.L463:
	.align	2, 0
.L462:
	.word	gAIScriptPtr
	.word	gSideStatuses
.L460:
	ldr	r0, [r5]
	add	r0, r0, #0xa
	str	r0, [r5]
.L461:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe43:
	.size	 Cmd_if_not_side_affecting,.Lfe43-Cmd_if_not_side_affecting
	.align	2, 0
	.type	 Cmd_if_less_than,function
	.thumb_func
Cmd_if_less_than:
	push	{lr}
	ldr	r0, .L467
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r3, .L467+0x4
	ldr	r2, [r3]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	bcs	.L465	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L466
.L468:
	.align	2, 0
.L467:
	.word	gBattleResources
	.word	gAIScriptPtr
.L465:
	add	r0, r2, #0x6
	str	r0, [r3]
.L466:
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 Cmd_if_less_than,.Lfe44-Cmd_if_less_than
	.align	2, 0
	.type	 Cmd_if_more_than,function
	.thumb_func
Cmd_if_more_than:
	push	{lr}
	ldr	r0, .L472
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r3, .L472+0x4
	ldr	r2, [r3]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	bls	.L470	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L471
.L473:
	.align	2, 0
.L472:
	.word	gBattleResources
	.word	gAIScriptPtr
.L470:
	add	r0, r2, #0x6
	str	r0, [r3]
.L471:
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 Cmd_if_more_than,.Lfe45-Cmd_if_more_than
	.align	2, 0
	.type	 Cmd_if_equal,function
	.thumb_func
Cmd_if_equal:
	push	{lr}
	ldr	r0, .L477
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r3, .L477+0x4
	ldr	r2, [r3]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	bne	.L475	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L476
.L478:
	.align	2, 0
.L477:
	.word	gBattleResources
	.word	gAIScriptPtr
.L475:
	add	r0, r2, #0x6
	str	r0, [r3]
.L476:
	pop	{r0}
	bx	r0
.Lfe46:
	.size	 Cmd_if_equal,.Lfe46-Cmd_if_equal
	.align	2, 0
	.type	 Cmd_if_not_equal,function
	.thumb_func
Cmd_if_not_equal:
	push	{lr}
	ldr	r0, .L482
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r3, .L482+0x4
	ldr	r2, [r3]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	beq	.L480	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L481
.L483:
	.align	2, 0
.L482:
	.word	gBattleResources
	.word	gAIScriptPtr
.L480:
	add	r0, r2, #0x6
	str	r0, [r3]
.L481:
	pop	{r0}
	bx	r0
.Lfe47:
	.size	 Cmd_if_not_equal,.Lfe47-Cmd_if_not_equal
	.align	2, 0
	.type	 Cmd_if_less_than_ptr,function
	.thumb_func
Cmd_if_less_than_ptr:
	push	{lr}
	ldr	r3, .L487
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L487+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L485	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L486
.L488:
	.align	2, 0
.L487:
	.word	gAIScriptPtr
	.word	gBattleResources
.L485:
	add	r0, r2, #0
	add	r0, r0, #0x9
	str	r0, [r3]
.L486:
	pop	{r0}
	bx	r0
.Lfe48:
	.size	 Cmd_if_less_than_ptr,.Lfe48-Cmd_if_less_than_ptr
	.align	2, 0
	.type	 Cmd_if_more_than_ptr,function
	.thumb_func
Cmd_if_more_than_ptr:
	push	{lr}
	ldr	r3, .L492
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L492+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r1]
	cmp	r0, r1
	bls	.L490	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L491
.L493:
	.align	2, 0
.L492:
	.word	gAIScriptPtr
	.word	gBattleResources
.L490:
	add	r0, r2, #0
	add	r0, r0, #0x9
	str	r0, [r3]
.L491:
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 Cmd_if_more_than_ptr,.Lfe49-Cmd_if_more_than_ptr
	.align	2, 0
	.type	 Cmd_if_equal_ptr,function
	.thumb_func
Cmd_if_equal_ptr:
	push	{lr}
	ldr	r3, .L497
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L497+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L495	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L496
.L498:
	.align	2, 0
.L497:
	.word	gAIScriptPtr
	.word	gBattleResources
.L495:
	add	r0, r2, #0
	add	r0, r0, #0x9
	str	r0, [r3]
.L496:
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 Cmd_if_equal_ptr,.Lfe50-Cmd_if_equal_ptr
	.align	2, 0
	.type	 Cmd_if_not_equal_ptr,function
	.thumb_func
Cmd_if_not_equal_ptr:
	push	{lr}
	ldr	r3, .L502
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L502+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L500	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L501
.L503:
	.align	2, 0
.L502:
	.word	gAIScriptPtr
	.word	gBattleResources
.L500:
	add	r0, r2, #0
	add	r0, r0, #0x9
	str	r0, [r3]
.L501:
	pop	{r0}
	bx	r0
.Lfe51:
	.size	 Cmd_if_not_equal_ptr,.Lfe51-Cmd_if_not_equal_ptr
	.align	2, 0
	.type	 Cmd_if_move,function
	.thumb_func
Cmd_if_move:
	push	{lr}
	ldr	r3, .L507
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldr	r0, .L507+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r0, [r0, #0x2]
	cmp	r0, r1
	bne	.L505	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L506
.L508:
	.align	2, 0
.L507:
	.word	gAIScriptPtr
	.word	gBattleResources
.L505:
	add	r0, r2, #0x7
	str	r0, [r3]
.L506:
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 Cmd_if_move,.Lfe52-Cmd_if_move
	.align	2, 0
	.type	 Cmd_if_not_move,function
	.thumb_func
Cmd_if_not_move:
	push	{lr}
	ldr	r3, .L512
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldr	r0, .L512+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r0, [r0, #0x2]
	cmp	r0, r1
	beq	.L510	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L511
.L513:
	.align	2, 0
.L512:
	.word	gAIScriptPtr
	.word	gBattleResources
.L510:
	add	r0, r2, #0x7
	str	r0, [r3]
.L511:
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 Cmd_if_not_move,.Lfe53-Cmd_if_not_move
	.align	2, 0
	.type	 Cmd_if_in_bytes,function
	.thumb_func
Cmd_if_in_bytes:
	push	{r4, lr}
	ldr	r2, .L520
	ldr	r1, [r2]
	ldrb	r3, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldrb	r0, [r3]
	cmp	r0, #0xff
	beq	.L516	@cond_branch
	ldr	r0, .L520+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r1, [r0, #0x8]
	add	r4, r2, #0
.L517:
	ldrb	r0, [r3]
	cmp	r1, r0
	bne	.L518	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L514
.L521:
	.align	2, 0
.L520:
	.word	gAIScriptPtr
	.word	gBattleResources
.L518:
	add	r3, r3, #0x1
	ldrb	r0, [r3]
	cmp	r0, #0xff
	bne	.L517	@cond_branch
.L516:
	ldr	r0, [r2]
	add	r0, r0, #0x9
	str	r0, [r2]
.L514:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe54:
	.size	 Cmd_if_in_bytes,.Lfe54-Cmd_if_in_bytes
	.align	2, 0
	.type	 Cmd_if_not_in_bytes,function
	.thumb_func
Cmd_if_not_in_bytes:
	push	{r4, lr}
	ldr	r2, .L528
	ldr	r1, [r2]
	ldrb	r3, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldrb	r0, [r3]
	add	r4, r2, #0
	cmp	r0, #0xff
	beq	.L524	@cond_branch
	ldr	r0, .L528+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r2, [r0, #0x8]
	add	r1, r4, #0
.L525:
	ldrb	r0, [r3]
	cmp	r2, r0
	bne	.L526	@cond_branch
	ldr	r0, [r1]
	add	r0, r0, #0x9
	str	r0, [r1]
	b	.L522
.L529:
	.align	2, 0
.L528:
	.word	gAIScriptPtr
	.word	gBattleResources
.L526:
	add	r3, r3, #0x1
	ldrb	r0, [r3]
	cmp	r0, #0xff
	bne	.L525	@cond_branch
.L524:
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
.L522:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 Cmd_if_not_in_bytes,.Lfe55-Cmd_if_not_in_bytes
	.align	2, 0
	.type	 Cmd_if_in_hwords,function
	.thumb_func
Cmd_if_in_hwords:
	push	{r4, r5, lr}
	ldr	r2, .L536
	ldr	r1, [r2]
	ldrb	r3, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldrh	r0, [r3]
	ldr	r5, .L536+0x4
	cmp	r0, r5
	beq	.L532	@cond_branch
	ldr	r0, .L536+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r1, [r0, #0x8]
	add	r4, r2, #0
.L533:
	ldrh	r0, [r3]
	cmp	r1, r0
	bne	.L534	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L530
.L537:
	.align	2, 0
.L536:
	.word	gAIScriptPtr
	.word	0xffff
	.word	gBattleResources
.L534:
	add	r3, r3, #0x2
	ldrh	r0, [r3]
	cmp	r0, r5
	bne	.L533	@cond_branch
.L532:
	ldr	r0, [r2]
	add	r0, r0, #0x9
	str	r0, [r2]
.L530:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 Cmd_if_in_hwords,.Lfe56-Cmd_if_in_hwords
	.align	2, 0
	.type	 Cmd_if_not_in_hwords,function
	.thumb_func
Cmd_if_not_in_hwords:
	push	{r4, r5, lr}
	ldr	r2, .L544
	ldr	r1, [r2]
	ldrb	r3, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldrh	r0, [r3]
	ldr	r4, .L544+0x4
	add	r5, r2, #0
	cmp	r0, r4
	beq	.L540	@cond_branch
	ldr	r0, .L544+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r2, [r0, #0x8]
	add	r1, r5, #0
.L541:
	ldrh	r0, [r3]
	cmp	r2, r0
	bne	.L542	@cond_branch
	ldr	r0, [r1]
	add	r0, r0, #0x9
	str	r0, [r1]
	b	.L538
.L545:
	.align	2, 0
.L544:
	.word	gAIScriptPtr
	.word	0xffff
	.word	gBattleResources
.L542:
	add	r3, r3, #0x2
	ldrh	r0, [r3]
	cmp	r0, r4
	bne	.L541	@cond_branch
.L540:
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
.L538:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 Cmd_if_not_in_hwords,.Lfe57-Cmd_if_not_in_hwords
	.align	2, 0
	.type	 Cmd_if_user_has_attacking_move,function
	.thumb_func
Cmd_if_user_has_attacking_move:
	push	{r4, r5, lr}
	mov	r3, #0x0
	ldr	r4, .L555
	ldr	r1, .L555+0x4
	ldr	r0, .L555+0x8
	ldrb	r2, [r0]
	ldr	r5, .L555+0xc
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0xc
	add	r2, r0, r1
.L550:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L549	@cond_branch
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L548	@cond_branch
.L549:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L550	@cond_branch
.L548:
	cmp	r3, #0x4
	bne	.L553	@cond_branch
	ldr	r0, [r4]
	add	r0, r0, #0x5
	str	r0, [r4]
	b	.L554
.L556:
	.align	2, 0
.L555:
	.word	gAIScriptPtr
	.word	gBattleMons
	.word	sBattler_AI
	.word	gBattleMoves
.L553:
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
.L554:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 Cmd_if_user_has_attacking_move,.Lfe58-Cmd_if_user_has_attacking_move
	.align	2, 0
	.type	 Cmd_if_user_has_no_attacking_moves,function
	.thumb_func
Cmd_if_user_has_no_attacking_moves:
	push	{r4, r5, lr}
	mov	r3, #0x0
	ldr	r4, .L566
	ldr	r1, .L566+0x4
	ldr	r0, .L566+0x8
	ldrb	r2, [r0]
	ldr	r5, .L566+0xc
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0xc
	add	r2, r0, r1
.L561:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L560	@cond_branch
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L559	@cond_branch
.L560:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L561	@cond_branch
.L559:
	cmp	r3, #0x4
	beq	.L564	@cond_branch
	ldr	r0, [r4]
	add	r0, r0, #0x5
	str	r0, [r4]
	b	.L565
.L567:
	.align	2, 0
.L566:
	.word	gAIScriptPtr
	.word	gBattleMons
	.word	sBattler_AI
	.word	gBattleMoves
.L564:
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
.L565:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe59:
	.size	 Cmd_if_user_has_no_attacking_moves,.Lfe59-Cmd_if_user_has_no_attacking_moves
	.align	2, 0
	.type	 Cmd_get_turn_count,function
	.thumb_func
Cmd_get_turn_count:
	ldr	r0, .L569
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	ldr	r0, .L569+0x4
	ldrb	r0, [r0, #0x13]
	str	r0, [r1, #0x8]
	ldr	r1, .L569+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L570:
	.align	2, 0
.L569:
	.word	gBattleResources
	.word	gBattleResults
	.word	gAIScriptPtr
.Lfe60:
	.size	 Cmd_get_turn_count,.Lfe60-Cmd_get_turn_count
	.align	2, 0
	.type	 Cmd_get_type,function
	.thumb_func
Cmd_get_type:
	push	{r4, lr}
	ldr	r1, .L581
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x1]
	add	r4, r1, #0
	cmp	r0, #0x4
	bhi	.L572	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L581+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L582:
	.align	2, 0
.L581:
	.word	gAIScriptPtr
	.word	.L578
	.align	2, 0
	.align	2, 0
.L578:
	.word	.L574
	.word	.L573
	.word	.L576
	.word	.L575
	.word	.L577
.L573:
	ldr	r0, .L583
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L583+0x4
	ldr	r0, .L583+0x8
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	b	.L580
.L584:
	.align	2, 0
.L583:
	.word	gBattleResources
	.word	gBattleMons
	.word	sBattler_AI
.L574:
	ldr	r0, .L585
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L585+0x4
	ldr	r0, .L585+0x8
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	b	.L580
.L586:
	.align	2, 0
.L585:
	.word	gBattleResources
	.word	gBattleMons
	.word	gBattlerTarget
.L575:
	ldr	r0, .L587
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L587+0x4
	ldr	r0, .L587+0x8
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	b	.L580
.L588:
	.align	2, 0
.L587:
	.word	gBattleResources
	.word	gBattleMons
	.word	sBattler_AI
.L576:
	ldr	r0, .L589
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L589+0x4
	ldr	r0, .L589+0x8
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	b	.L580
.L590:
	.align	2, 0
.L589:
	.word	gBattleResources
	.word	gBattleMons
	.word	gBattlerTarget
.L577:
	ldr	r0, .L591
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L591+0x4
	ldrh	r1, [r3, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x3]
.L580:
	str	r0, [r3, #0x8]
.L572:
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L592:
	.align	2, 0
.L591:
	.word	gBattleResources
	.word	gBattleMoves
.Lfe61:
	.size	 Cmd_get_type,.Lfe61-Cmd_get_type
	.align	2, 0
	.type	 Cmd_is_of_type,function
	.thumb_func
Cmd_is_of_type:
	push	{r4, lr}
	ldr	r4, .L598
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L598+0x4
	mov	r1, #0x5c
	mul	r0, r0, r1
	add	r3, r0, r2
	add	r1, r3, #0
	add	r1, r1, #0x22
	ldr	r0, [r4]
	ldrb	r1, [r1]
	ldrb	r2, [r0, #0x2]
	cmp	r1, r2
	beq	.L595	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, r2
	beq	.L595	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, r2
	bne	.L594	@cond_branch
.L595:
	ldr	r0, .L598+0x8
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x1
	b	.L597
.L599:
	.align	2, 0
.L598:
	.word	gAIScriptPtr
	.word	gBattleMons
	.word	gBattleResources
.L594:
	ldr	r0, .L600
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x0
.L597:
	str	r0, [r1, #0x8]
	ldr	r1, .L600+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x3
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L601:
	.align	2, 0
.L600:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe62:
	.size	 Cmd_is_of_type,.Lfe62-Cmd_is_of_type
	.align	2, 0
	.type	 Cmd_get_considered_move_power,function
	.thumb_func
Cmd_get_considered_move_power:
	ldr	r0, .L603
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L603+0x4
	ldrh	r1, [r3, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	str	r0, [r3, #0x8]
	ldr	r1, .L603+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L604:
	.align	2, 0
.L603:
	.word	gBattleResources
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe63:
	.size	 Cmd_get_considered_move_power,.Lfe63-Cmd_get_considered_move_power
	.align	2, 0
	.type	 WhichMoveBetter,function
	.thumb_func
WhichMoveBetter:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	ldr	r7, .L627
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	AI_GetAbility
	add	r6, r0, #0
	ldr	r0, .L627+0x4
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	cmp	r0, #0x95
	beq	.L606	@cond_branch
	ldr	r0, .L627+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0x8
	ldrb	r7, [r7]
	add	r0, r0, r7
	ldrb	r0, [r0]
	cmp	r0, #0x78
	beq	.L607	@cond_branch
	cmp	r6, #0xa0
	beq	.L607	@cond_branch
	cmp	r6, #0x18
	bne	.L606	@cond_branch
.L607:
	add	r0, r5, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L608	@cond_branch
	add	r0, r4, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L625	@cond_branch
.L608:
	add	r0, r4, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L606	@cond_branch
	add	r0, r5, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L626	@cond_branch
.L606:
	ldr	r0, .L627+0x4
	ldrb	r0, [r0]
	bl	GetBattlerAbility
	lsl	r6, r5, #0x2
	lsl	r3, r4, #0x2
	cmp	r0, #0x45
	beq	.L610	@cond_branch
	ldr	r1, .L627+0xc
	add	r0, r6, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r2, [r0]
	add	r7, r1, #0
	cmp	r2, #0x30
	beq	.L612	@cond_branch
	cmp	r2, #0x2d
	beq	.L612	@cond_branch
	ldr	r0, .L627+0x10
	cmp	r2, r0
	beq	.L612	@cond_branch
	cmp	r2, #0xc6
	beq	.L612	@cond_branch
	sub	r0, r0, #0x2
	cmp	r2, r0
	bne	.L611	@cond_branch
.L612:
	lsl	r1, r4, #0x2
	add	r0, r1, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r2, [r0]
	add	r3, r1, #0
	cmp	r2, #0x30
	beq	.L614	@cond_branch
	cmp	r2, #0x2d
	beq	.L611	@cond_branch
	ldr	r0, .L627+0x10
	cmp	r2, r0
	beq	.L611	@cond_branch
	cmp	r2, #0xc6
	beq	.L611	@cond_branch
	sub	r0, r0, #0x2
	cmp	r2, r0
	beq	.L611	@cond_branch
	cmp	r2, #0x50
	bne	.L625	@cond_branch
.L611:
	add	r0, r3, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r0]
	cmp	r1, #0x30
	beq	.L614	@cond_branch
	cmp	r1, #0x2d
	beq	.L614	@cond_branch
	ldr	r0, .L627+0x10
	cmp	r1, r0
	beq	.L614	@cond_branch
	cmp	r1, #0xc6
	beq	.L614	@cond_branch
	sub	r0, r0, #0x2
	cmp	r1, r0
	bne	.L610	@cond_branch
.L614:
	add	r0, r6, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r0]
	cmp	r1, #0x30
	beq	.L610	@cond_branch
	cmp	r1, #0x2d
	beq	.L610	@cond_branch
	ldr	r0, .L627+0x10
	cmp	r1, r0
	beq	.L610	@cond_branch
	cmp	r1, #0xc6
	beq	.L610	@cond_branch
	sub	r0, r0, #0x2
	cmp	r1, r0
	beq	.L610	@cond_branch
	cmp	r1, #0x50
	beq	.L620	@cond_branch
.L626:
	mov	r0, #0x0
	b	.L619
.L628:
	.align	2, 0
.L627:
	.word	gBattlerTarget
	.word	sBattler_AI
	.word	gBattleResources
	.word	gBattleMoves
	.word	0x121
.L610:
	ldr	r0, .L629
	add	r1, r6, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r1, [r1]
	add	r7, r0, #0
	cmp	r1, #0x50
	bne	.L615	@cond_branch
.L620:
	add	r0, r3, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, #0x50
	beq	.L621	@cond_branch
.L625:
	mov	r0, #0x1
	b	.L619
.L630:
	.align	2, 0
.L629:
	.word	gBattleMoves
.L615:
	add	r0, r3, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, #0x50
	bne	.L616	@cond_branch
.L621:
	add	r0, r6, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, #0x50
	bne	.L626	@cond_branch
.L616:
	add	r0, r6, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L617	@cond_branch
	add	r0, r3, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L622	@cond_branch
	b	.L625
.L617:
	add	r0, r3, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L618	@cond_branch
.L622:
	add	r0, r6, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L626	@cond_branch
.L618:
	mov	r0, #0x2
.L619:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe64:
	.size	 WhichMoveBetter,.Lfe64-WhichMoveBetter
	.align	2, 0
	.type	 Cmd_get_how_powerful_move_is,function
	.thumb_func
Cmd_get_how_powerful_move_is:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	mov	r4, #0x0
	ldr	r0, .L678
	ldrh	r1, [r0]
	ldr	r3, .L678+0x4
	add	r5, r0, #0
	ldr	r6, .L678+0x8
	ldr	r0, .L678+0xc
	mov	sl, r0
	cmp	r1, r3
	beq	.L633	@cond_branch
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r1, [r0, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r2, [r0]
	add	r1, r5, #0
.L635:
	ldrh	r0, [r1]
	cmp	r2, r0
	beq	.L633	@cond_branch
	add	r1, r1, #0x2
	add	r4, r4, #0x1
	ldrh	r0, [r1]
	cmp	r0, r3
	bne	.L635	@cond_branch
.L633:
	mov	r1, sl
	ldr	r0, [r1]
	ldr	r0, [r0, #0x14]
	ldrh	r1, [r0, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	bne	.LCB5692
	b	.L638	@long jump
.LCB5692:
	lsl	r0, r4, #0x1
	add	r0, r0, r5
	ldrh	r1, [r0]
	ldr	r0, .L678+0x4
	cmp	r1, r0
	beq	.LCB5703
	b	.L638	@long jump
.LCB5703:
	mov	r0, #0x0
	ldr	r2, .L678+0x10
	mov	ip, r2
	mov	r9, r5
	ldrh	r4, [r5]
	str	r4, [sp, #0x10]
	add	r7, r1, #0
.L642:
	mov	r4, #0x0
	lsl	r3, r0, #0x1
	lsl	r5, r0, #0x2
	add	r0, r0, #0x1
	mov	r8, r0
	ldr	r0, [sp, #0x10]
	cmp	r0, r7
	beq	.L644	@cond_branch
	ldr	r2, .L678+0x8
	ldr	r0, .L678+0x14
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r3, r0
	ldr	r1, .L678+0x18
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r2, [r0]
	ldr	r1, .L678
.L646:
	ldrh	r0, [r1]
	cmp	r2, r0
	beq	.L644	@cond_branch
	add	r1, r1, #0x2
	add	r4, r4, #0x1
	ldrh	r0, [r1]
	cmp	r0, r7
	bne	.L646	@cond_branch
.L644:
	ldr	r1, .L678+0x14
	ldrb	r6, [r1]
	mov	r0, #0x5c
	mul	r0, r0, r6
	add	r0, r3, r0
	ldr	r1, .L678+0x1c
	add	r1, r1, #0xc
	add	r1, r0, r1
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L649	@cond_branch
	lsl	r0, r4, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	cmp	r0, r7
	bne	.L649	@cond_branch
	ldrh	r0, [r1]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r2, .L678+0x8
	add	r1, r1, r2
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	beq	.L649	@cond_branch
	mov	r4, sp
	add	r3, r4, r5
	mov	r1, sl
	ldr	r0, [r1]
	ldr	r2, [r0, #0x14]
	mov	r4, ip
	ldrb	r0, [r4]
	lsl	r0, r0, #0x4
	add	r0, r5, r0
	lsl	r1, r6, #0x6
	add	r0, r0, r1
	add	r2, r2, #0x14
	add	r2, r2, r0
	ldr	r0, [r2]
	str	r0, [r3]
	b	.L641
.L679:
	.align	2, 0
.L678:
	.word	sDiscouragedPowerfulMoveEffects
	.word	0xffff
	.word	gBattleMoves
	.word	gBattleResources
	.word	gBattlerTarget
	.word	sBattler_AI
	.word	gBattleMons+0xc
	.word	gBattleMons
.L649:
	mov	r0, sp
	add	r1, r0, r5
	mov	r0, #0x0
	str	r0, [r1]
.L641:
	mov	r0, r8
	cmp	r0, #0x3
	ble	.L642	@cond_branch
	mov	r2, ip
	ldrb	r1, [r2]
	mov	r0, #0x5c
	mul	r0, r0, r1
	ldr	r4, .L680
	add	r0, r0, r4
	ldrh	r4, [r0, #0x2a]
	add	r0, r4, #0
	mov	r1, #0x5
	bl	__divsi3
	add	r6, r4, r0
	mov	r1, sp
	mov	r4, #0x3
.L655:
	ldr	r0, [r1]
	cmp	r0, r6
	ble	.L654	@cond_branch
	str	r6, [r1]
.L654:
	add	r1, r1, #0x4
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L655	@cond_branch
	mov	r7, #0x0
	mov	r4, #0x1
	ldr	r0, .L680+0x4
	mov	r8, r0
	add	r5, sp, #0x4
.L661:
	lsl	r0, r7, #0x2
	add	r0, r0, sp
	ldr	r1, [r5]
	ldr	r0, [r0]
	cmp	r1, r0
	ble	.L662	@cond_branch
	add	r7, r4, #0
.L662:
	lsl	r0, r7, #0x2
	add	r0, r0, sp
	ldr	r0, [r0]
	cmp	r1, r0
	bne	.L660	@cond_branch
	lsl	r1, r7, #0x1
	ldr	r0, .L680+0x8
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r2, r2, r0
	add	r1, r1, r2
	add	r1, r1, r8
	ldrh	r0, [r1]
	lsl	r1, r4, #0x1
	add	r1, r1, r2
	add	r1, r1, r8
	ldrh	r1, [r1]
	bl	WhichMoveBetter
	cmp	r0, #0x1
	beq	.L667	@cond_branch
	cmp	r0, #0x2
	bne	.L660	@cond_branch
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L660	@cond_branch
.L667:
	add	r7, r4, #0
.L660:
	add	r5, r5, #0x4
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L661	@cond_branch
	ldr	r1, .L680+0xc
	mov	sl, r1
	ldr	r0, [r1]
	ldr	r1, [r0, #0x14]
	ldrb	r2, [r1, #0x1]
	mov	r8, r2
	cmp	r8, r7
	bne	.L671	@cond_branch
	mov	r0, #0x1
	b	.L677
.L681:
	.align	2, 0
.L680:
	.word	gBattleMons
	.word	gBattleMons+0xc
	.word	sBattler_AI
	.word	gBattleResources
.L671:
	mov	r4, r8
	lsl	r0, r4, #0x2
	add	r0, r0, sp
	ldr	r0, [r0]
	mov	r9, r0
	lsl	r1, r7, #0x2
	cmp	r9, r6
	bge	.L674	@cond_branch
	mov	r2, sp
	add	r0, r2, r1
	ldr	r0, [r0]
	cmp	r0, r6
	bge	.L673	@cond_branch
.L674:
	mov	r4, sp
	add	r0, r4, r1
	ldr	r0, [r0]
	mov	r5, #0x64
	mul	r0, r0, r5
	add	r1, r6, #0
	bl	__divsi3
	add	r4, r0, #0
	mov	r0, r9
	mul	r0, r0, r5
	add	r1, r6, #0
	bl	__divsi3
	sub	r4, r4, r0
	cmp	r4, #0x1e
	bgt	.L673	@cond_branch
	ldr	r3, .L682
	lsl	r1, r7, #0x1
	ldr	r0, .L682+0x4
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r2, r2, r0
	add	r1, r1, r2
	add	r3, r3, #0xc
	add	r1, r1, r3
	ldrh	r0, [r1]
	mov	r4, r8
	lsl	r1, r4, #0x1
	add	r1, r1, r2
	add	r1, r1, r3
	ldrh	r1, [r1]
	bl	WhichMoveBetter
	cmp	r0, #0
	beq	.L673	@cond_branch
	mov	r1, sl
	ldr	r0, [r1]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x2
	b	.L677
.L683:
	.align	2, 0
.L682:
	.word	gBattleMons
	.word	sBattler_AI
.L673:
	ldr	r0, .L684
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x3
	b	.L677
.L685:
	.align	2, 0
.L684:
	.word	gBattleResources
.L638:
	mov	r2, sl
	ldr	r0, [r2]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x0
.L677:
	str	r0, [r1, #0x8]
	ldr	r1, .L686
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L687:
	.align	2, 0
.L686:
	.word	gAIScriptPtr
.Lfe65:
	.size	 Cmd_get_how_powerful_move_is,.Lfe65-Cmd_get_how_powerful_move_is
	.align	2, 0
	.type	 Cmd_get_last_used_battler_move,function
	.thumb_func
Cmd_get_last_used_battler_move:
	push	{r4, lr}
	ldr	r4, .L689
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	ldr	r1, .L689+0x4
	ldr	r1, [r1]
	ldr	r2, [r1, #0x14]
	ldr	r1, .L689+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r1
	ldrh	r0, [r0]
	str	r0, [r2, #0x8]
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L690:
	.align	2, 0
.L689:
	.word	gAIScriptPtr
	.word	gBattleResources
	.word	gLastMoves
.Lfe66:
	.size	 Cmd_get_last_used_battler_move,.Lfe66-Cmd_get_last_used_battler_move
	.align	2, 0
	.type	 Cmd_if_equal_u32,function
	.thumb_func
Cmd_if_equal_u32:
	push	{lr}
	ldr	r3, .L694
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L694+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0x8]
	cmp	r1, r0
	bne	.L692	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L693
.L695:
	.align	2, 0
.L694:
	.word	gAIScriptPtr
	.word	gBattleResources
.L692:
	add	r0, r2, #0
	add	r0, r0, #0x9
	str	r0, [r3]
.L693:
	pop	{r0}
	bx	r0
.Lfe67:
	.size	 Cmd_if_equal_u32,.Lfe67-Cmd_if_equal_u32
	.align	2, 0
	.type	 Cmd_if_not_equal_u32,function
	.thumb_func
Cmd_if_not_equal_u32:
	push	{lr}
	ldr	r3, .L699
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L699+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0x8]
	cmp	r1, r0
	beq	.L697	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L698
.L700:
	.align	2, 0
.L699:
	.word	gAIScriptPtr
	.word	gBattleResources
.L697:
	add	r0, r2, #0
	add	r0, r0, #0x9
	str	r0, [r3]
.L698:
	pop	{r0}
	bx	r0
.Lfe68:
	.size	 Cmd_if_not_equal_u32,.Lfe68-Cmd_if_not_equal_u32
	.align	2, 0
	.type	 Cmd_if_user_goes,function
	.thumb_func
Cmd_if_user_goes:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r6, #0x0
	mov	r5, #0x0
	ldr	r0, .L723
	ldrb	r0, [r0]
	ldr	r1, .L723+0x4
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
	ldrh	r1, [r1, #0x2]
	bl	GetMovePriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r4, .L723+0x8
	ldrb	r0, [r4]
	bl	SaveBattlerData
	ldrb	r0, [r4]
	bl	SetBattlerData
	mov	r4, #0x0
	ldr	r0, .L723+0xc
	mov	sl, r0
	ldr	r1, .L723+0x10
	mov	r9, r1
.L705:
	lsl	r1, r4, #0x1
	ldr	r2, .L723+0x8
	ldrb	r3, [r2]
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r1, r1, r0
	add	r1, r1, sl
	ldrh	r0, [r1]
	add	r7, r2, #0
	cmp	r0, #0
	beq	.L704	@cond_branch
	cmp	r0, r9
	beq	.L704	@cond_branch
	add	r1, r0, #0
	add	r0, r3, #0
	bl	GetMovePriority
	mov	r2, r8
	lsl	r1, r2, #0x18
	asr	r1, r1, #0x18
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r1, r0
	ble	.L708	@cond_branch
	add	r6, r6, #0x1
	b	.L704
.L724:
	.align	2, 0
.L723:
	.word	sBattler_AI
	.word	gBattleResources
	.word	gBattlerTarget
	.word	gBattleMons+0xc
	.word	0xffff
.L708:
	cmp	r0, r1
	ble	.L704	@cond_branch
	add	r5, r5, #0x1
.L704:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bls	.L705	@cond_branch
	ldrb	r0, [r7]
	bl	RestoreBattlerData
	cmp	r6, r5
	bls	.L712	@cond_branch
	ldr	r3, .L725
	ldr	r2, [r3]
	ldrb	r0, [r2, #0x1]
	cmp	r0, #0
	beq	.L722	@cond_branch
	b	.L720
.L726:
	.align	2, 0
.L725:
	.word	gAIScriptPtr
.L712:
	cmp	r6, r5
	bcs	.L716	@cond_branch
	ldr	r3, .L727
	ldr	r2, [r3]
	ldrb	r0, [r2, #0x1]
	cmp	r0, #0x1
	beq	.L722	@cond_branch
	b	.L720
.L728:
	.align	2, 0
.L727:
	.word	gAIScriptPtr
.L716:
	ldr	r0, .L729
	ldrb	r0, [r0]
	ldrb	r1, [r7]
	mov	r2, #0x1
	bl	GetWhoStrikesFirst
	ldr	r3, .L729+0x4
	ldr	r2, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	bne	.L720	@cond_branch
.L722:
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L715
.L730:
	.align	2, 0
.L729:
	.word	sBattler_AI
	.word	gAIScriptPtr
.L720:
	add	r0, r2, #0x6
	str	r0, [r3]
.L715:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe69:
	.size	 Cmd_if_user_goes,.Lfe69-Cmd_if_user_goes
	.align	2, 0
	.type	 Cmd_nullsub_2A,function
	.thumb_func
Cmd_nullsub_2A:
	bx	lr
.Lfe70:
	.size	 Cmd_nullsub_2A,.Lfe70-Cmd_nullsub_2A
	.align	2, 0
	.type	 Cmd_nullsub_2B,function
	.thumb_func
Cmd_nullsub_2B:
	bx	lr
.Lfe71:
	.size	 Cmd_nullsub_2B,.Lfe71-Cmd_nullsub_2B
	.align	2, 0
	.type	 CountUsablePartyMons,function
	.thumb_func
CountUsablePartyMons:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r4, r5, #0
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L744
	mov	r9, r1
	cmp	r0, #0
	bne	.L734	@cond_branch
	ldr	r0, .L744+0x4
	mov	r9, r0
.L734:
	ldr	r0, .L744+0x8
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L736	@cond_branch
	ldr	r4, .L744+0xc
	lsl	r0, r5, #0x1
	add	r0, r0, r4
	ldrh	r0, [r0]
	mov	r8, r0
	add	r0, r5, #0
	bl	GetBattlerPosition
	mov	r1, #0x2
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r4
	ldrh	r6, [r0]
	b	.L737
.L745:
	.align	2, 0
.L744:
	.word	gEnemyParty
	.word	gPlayerParty
	.word	gBattleTypeFlags
	.word	gBattlerPartyIndexes
.L736:
	ldr	r1, .L746
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r6, [r0]
	mov	r8, r6
.L737:
	mov	r7, #0x0
	mov	r5, #0x0
.L741:
	cmp	r5, r8
	beq	.L740	@cond_branch
	cmp	r5, r6
	beq	.L740	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, r9
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L740	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L740	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L746+0x4
	cmp	r0, r1
	beq	.L740	@cond_branch
	add	r7, r7, #0x1
.L740:
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L741	@cond_branch
	add	r0, r7, #0
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L747:
	.align	2, 0
.L746:
	.word	gBattlerPartyIndexes
	.word	0x4b7
.Lfe72:
	.size	 CountUsablePartyMons,.Lfe72-CountUsablePartyMons
	.align	2, 0
	.type	 Cmd_count_usable_party_mons,function
	.thumb_func
Cmd_count_usable_party_mons:
	push	{r4, lr}
	ldr	r4, .L749
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	CountUsablePartyMons
	ldr	r1, .L749+0x4
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
	str	r0, [r1, #0x8]
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L750:
	.align	2, 0
.L749:
	.word	gAIScriptPtr
	.word	gBattleResources
.Lfe73:
	.size	 Cmd_count_usable_party_mons,.Lfe73-Cmd_count_usable_party_mons
	.align	2, 0
	.type	 Cmd_get_considered_move,function
	.thumb_func
Cmd_get_considered_move:
	ldr	r0, .L752
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	ldrh	r0, [r1, #0x2]
	str	r0, [r1, #0x8]
	ldr	r1, .L752+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L753:
	.align	2, 0
.L752:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe74:
	.size	 Cmd_get_considered_move,.Lfe74-Cmd_get_considered_move
	.align	2, 0
	.type	 Cmd_get_considered_move_effect,function
	.thumb_func
Cmd_get_considered_move_effect:
	ldr	r0, .L755
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L755+0x4
	ldrh	r1, [r3, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	str	r0, [r3, #0x8]
	ldr	r1, .L755+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L756:
	.align	2, 0
.L755:
	.word	gBattleResources
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe75:
	.size	 Cmd_get_considered_move_effect,.Lfe75-Cmd_get_considered_move_effect
	.align	2, 0
	.type	 AI_GetAbility,function
	.thumb_func
AI_GetAbility:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r6, r1, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	beq	.L758	@cond_branch
	ldr	r1, .L767
	b	.L761
.L768:
	.align	2, 0
.L767:
	.word	gBattleMons
.L758:
	ldr	r0, .L769
	ldr	r0, [r0]
	ldr	r1, [r0, #0x18]
	lsl	r0, r4, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L766	@cond_branch
	ldr	r0, .L769+0x4
	mov	r1, #0x5c
	mul	r1, r1, r4
	add	r5, r1, r0
	ldrh	r2, [r5, #0x20]
	add	r1, r0, #0
	cmp	r2, #0x17
	beq	.L761	@cond_branch
	cmp	r2, #0x2a
	beq	.L761	@cond_branch
	cmp	r2, #0x47
	bne	.L760	@cond_branch
.L761:
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r0, r0, r1
	ldrh	r0, [r0, #0x20]
	b	.L766
.L770:
	.align	2, 0
.L769:
	.word	gBattleResources
	.word	gBattleMons
.L760:
	ldr	r4, .L771
	ldrh	r0, [r5]
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r1, #0x18]
	cmp	r0, #0
	beq	.L762	@cond_branch
	ldrh	r0, [r1, #0x1a]
	cmp	r0, #0
	beq	.L763	@cond_branch
	cmp	r6, #0
	beq	.L762	@cond_branch
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	ldrh	r2, [r5]
	lsl	r0, r2, #0x3
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	add	r0, r4, #0
	add	r0, r0, #0x18
	add	r1, r1, r0
	ldrh	r0, [r1]
	b	.L766
.L772:
	.align	2, 0
.L771:
	.word	gBaseStats
.L763:
	ldrh	r0, [r1, #0x18]
	b	.L766
.L762:
	mov	r0, #0x1
	neg	r0, r0
.L766:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe76:
	.size	 AI_GetAbility,.Lfe76-AI_GetAbility
	.align	2, 0
	.type	 Cmd_get_ability,function
	.thumb_func
Cmd_get_ability:
	push	{r4, lr}
	ldr	r4, .L774
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	bl	AI_GetAbility
	ldr	r1, .L774+0x4
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
	str	r0, [r1, #0x8]
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L775:
	.align	2, 0
.L774:
	.word	gAIScriptPtr
	.word	gBattleResources
.Lfe77:
	.size	 Cmd_get_ability,.Lfe77-Cmd_get_ability
	.align	2, 0
	.type	 Cmd_check_ability,function
	.thumb_func
Cmd_check_ability:
	push	{r4, lr}
	ldr	r4, .L782
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	AI_GetAbility
	add	r1, r0, #0
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L777	@cond_branch
	ldr	r0, .L782+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x2
	b	.L781
.L783:
	.align	2, 0
.L782:
	.word	gAIScriptPtr
	.word	gBattleResources
.L777:
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x2]
	cmp	r1, r0
	bne	.L779	@cond_branch
	ldr	r0, .L784
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x1
	b	.L781
.L785:
	.align	2, 0
.L784:
	.word	gBattleResources
.L779:
	ldr	r0, .L786
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x0
.L781:
	str	r0, [r1, #0x8]
	ldr	r1, .L786+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x3
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L787:
	.align	2, 0
.L786:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe78:
	.size	 Cmd_check_ability,.Lfe78-Cmd_check_ability
	.align	2, 0
	.type	 Cmd_get_highest_type_effectiveness,function
	.thumb_func
Cmd_get_highest_type_effectiveness:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r1, .L808
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r0, .L808+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x0
	str	r0, [r1, #0x8]
	mov	r5, #0x0
	ldr	r7, .L808+0x8
	ldr	r6, .L808+0xc
	ldr	r0, .L808+0x10
	mov	r8, r0
	ldr	r4, .L808+0x14
.L792:
	lsl	r1, r5, #0x1
	ldrb	r2, [r6]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r1, r1, r8
	ldrh	r0, [r1]
	strh	r0, [r7]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L791	@cond_branch
	ldrh	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, .L808+0x18
	ldrb	r2, [r2]
	bl	AI_GetTypeEffectiveness
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	cmp	r1, r0
	beq	.L798	@cond_branch
	cmp	r1, r0
	bhi	.L803	@cond_branch
	cmp	r1, #0
	beq	.L796	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	beq	.L797	@cond_branch
	b	.L796
.L809:
	.align	2, 0
.L808:
	.word	gMoveResultFlags
	.word	gBattleResources
	.word	gCurrentMove
	.word	sBattler_AI
	.word	gBattleMons+0xc
	.word	gBattleMoveDamage
	.word	gBattlerTarget
.L803:
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	cmp	r1, r0
	beq	.L800	@cond_branch
	cmp	r1, r0
	bhi	.L804	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	cmp	r1, r0
	beq	.L799	@cond_branch
	b	.L796
.L804:
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	cmp	r1, r0
	beq	.L801	@cond_branch
.L796:
	mov	r0, #0x0
	b	.L807
.L797:
	mov	r0, #0xa
	b	.L807
.L798:
	mov	r0, #0x14
	b	.L807
.L799:
	mov	r0, #0x28
	b	.L807
.L800:
	mov	r0, #0x50
	b	.L807
.L801:
	mov	r0, #0xa0
.L807:
	str	r0, [r4]
	ldr	r1, .L810
	ldr	r0, .L810+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r0, [r2, #0x8]
	ldr	r1, [r1]
	cmp	r0, r1
	bcs	.L791	@cond_branch
	str	r1, [r2, #0x8]
.L791:
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L792	@cond_branch
	ldr	r1, .L810+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L811:
	.align	2, 0
.L810:
	.word	gBattleMoveDamage
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe79:
	.size	 Cmd_get_highest_type_effectiveness,.Lfe79-Cmd_get_highest_type_effectiveness
	.align	2, 0
	.type	 Cmd_if_type_effectiveness,function
	.thumb_func
Cmd_if_type_effectiveness:
	push	{lr}
	ldr	r1, .L826
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L826+0x4
	ldr	r0, .L826+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r0, [r0, #0x2]
	strh	r0, [r1]
	ldrh	r0, [r1]
	ldr	r1, .L826+0xc
	ldrb	r1, [r1]
	ldr	r2, .L826+0x10
	ldrb	r2, [r2]
	bl	AI_GetTypeEffectiveness
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	cmp	r1, r0
	beq	.L817	@cond_branch
	cmp	r1, r0
	bhi	.L822	@cond_branch
	cmp	r1, #0
	beq	.L815	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	beq	.L816	@cond_branch
	b	.L815
.L827:
	.align	2, 0
.L826:
	.word	gMoveResultFlags
	.word	gCurrentMove
	.word	gBattleResources
	.word	sBattler_AI
	.word	gBattlerTarget
.L822:
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	cmp	r1, r0
	beq	.L819	@cond_branch
	cmp	r1, r0
	bhi	.L823	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	cmp	r1, r0
	beq	.L818	@cond_branch
	b	.L815
.L823:
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	cmp	r1, r0
	beq	.L820	@cond_branch
.L815:
	mov	r0, #0x0
	b	.L813
.L816:
	mov	r0, #0xa
	b	.L813
.L817:
	mov	r0, #0x14
	b	.L813
.L818:
	mov	r0, #0x28
	b	.L813
.L819:
	mov	r0, #0x50
	b	.L813
.L820:
	mov	r0, #0xa0
.L813:
	ldr	r3, .L828
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	bne	.L824	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L825
.L829:
	.align	2, 0
.L828:
	.word	gAIScriptPtr
.L824:
	add	r0, r2, #0x6
	str	r0, [r3]
.L825:
	pop	{r0}
	bx	r0
.Lfe80:
	.size	 Cmd_if_type_effectiveness,.Lfe80-Cmd_if_type_effectiveness
	.align	2, 0
	.type	 Cmd_nullsub_32,function
	.thumb_func
Cmd_nullsub_32:
	bx	lr
.Lfe81:
	.size	 Cmd_nullsub_32,.Lfe81-Cmd_nullsub_32
	.align	2, 0
	.type	 Cmd_nullsub_33,function
	.thumb_func
Cmd_nullsub_33:
	bx	lr
.Lfe82:
	.size	 Cmd_nullsub_33,.Lfe82-Cmd_nullsub_33
	.align	2, 0
	.type	 Cmd_if_status_in_party,function
	.thumb_func
Cmd_if_status_in_party:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r4, .L841
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L841+0x4
	mov	sl, r1
	cmp	r0, #0
	bne	.L833	@cond_branch
	ldr	r0, .L841+0x8
	mov	sl, r0
.L833:
	ldr	r1, [r4]
	ldrb	r7, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x8
	orr	r7, r7, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x10
	orr	r7, r7, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	orr	r7, r7, r0
	mov	r1, #0x0
	mov	r8, r1
	mov	r9, r4
.L838:
	mov	r0, #0x64
	mov	r4, r8
	mul	r4, r4, r0
	add	r4, r4, sl
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	cmp	r5, #0
	beq	.L837	@cond_branch
	ldr	r1, .L841+0xc
	cmp	r5, r1
	beq	.L837	@cond_branch
	cmp	r6, #0
	beq	.L837	@cond_branch
	cmp	r0, r7
	bne	.L837	@cond_branch
	mov	r0, r9
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x6]
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	mov	r0, r9
	str	r1, [r0]
	b	.L832
.L842:
	.align	2, 0
.L841:
	.word	gAIScriptPtr
	.word	gEnemyParty
	.word	gPlayerParty
	.word	0x4b7
.L837:
	mov	r1, #0x1
	add	r8, r8, r1
	mov	r0, r8
	cmp	r0, #0x5
	ble	.L838	@cond_branch
	ldr	r1, .L843
	ldr	r0, [r1]
	add	r0, r0, #0xa
	str	r0, [r1]
.L832:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L844:
	.align	2, 0
.L843:
	.word	gAIScriptPtr
.Lfe83:
	.size	 Cmd_if_status_in_party,.Lfe83-Cmd_if_status_in_party
	.align	2, 0
	.type	 Cmd_if_status_not_in_party,function
	.thumb_func
Cmd_if_status_not_in_party:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r4, .L854
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L854+0x4
	mov	sl, r1
	cmp	r0, #0
	bne	.L846	@cond_branch
	ldr	r0, .L854+0x8
	mov	sl, r0
.L846:
	ldr	r1, [r4]
	ldrb	r7, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x8
	orr	r7, r7, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x10
	orr	r7, r7, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	orr	r7, r7, r0
	mov	r1, #0x0
	mov	r8, r1
	mov	r9, r4
.L851:
	mov	r0, #0x64
	mov	r4, r8
	mul	r4, r4, r0
	add	r4, r4, sl
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	cmp	r5, #0
	beq	.L850	@cond_branch
	ldr	r1, .L854+0xc
	cmp	r5, r1
	beq	.L850	@cond_branch
	cmp	r6, #0
	beq	.L850	@cond_branch
	cmp	r0, r7
	bne	.L850	@cond_branch
	mov	r1, r9
	ldr	r0, [r1]
	add	r0, r0, #0xa
	str	r0, [r1]
	b	.L845
.L855:
	.align	2, 0
.L854:
	.word	gAIScriptPtr
	.word	gEnemyParty
	.word	gPlayerParty
	.word	0x4b7
.L850:
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r1, r8
	cmp	r1, #0x5
	ble	.L851	@cond_branch
	ldr	r3, .L856
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x6]
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L845:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L857:
	.align	2, 0
.L856:
	.word	gAIScriptPtr
.Lfe84:
	.size	 Cmd_if_status_not_in_party,.Lfe84-Cmd_if_status_not_in_party
	.align	2, 0
	.type	 Cmd_get_weather,function
	.thumb_func
Cmd_get_weather:
	push	{lr}
	ldr	r0, .L867
	ldrh	r2, [r0]
	mov	r0, #0x7
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L859	@cond_branch
	ldr	r0, .L867+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x2
	str	r0, [r1, #0x8]
	b	.L860
.L868:
	.align	2, 0
.L867:
	.word	gBattleWeather
	.word	gBattleResources
.L859:
	mov	r0, #0x18
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L861	@cond_branch
	ldr	r0, .L869
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x3
	str	r0, [r1, #0x8]
	b	.L860
.L870:
	.align	2, 0
.L869:
	.word	gBattleResources
.L861:
	mov	r0, #0x60
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L863	@cond_branch
	ldr	r0, .L871
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x1
	str	r0, [r1, #0x8]
	b	.L860
.L872:
	.align	2, 0
.L871:
	.word	gBattleResources
.L863:
	mov	r1, #0xc0
	lsl	r1, r1, #0x1
	and	r1, r1, r2
	cmp	r1, #0
	beq	.L865	@cond_branch
	ldr	r0, .L873
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x4
	str	r0, [r1, #0x8]
	b	.L860
.L874:
	.align	2, 0
.L873:
	.word	gBattleResources
.L865:
	ldr	r0, .L875
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	str	r1, [r0, #0x8]
.L860:
	ldr	r1, .L875+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L876:
	.align	2, 0
.L875:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe85:
	.size	 Cmd_get_weather,.Lfe85-Cmd_get_weather
	.align	2, 0
	.type	 Cmd_if_effect,function
	.thumb_func
Cmd_if_effect:
	push	{r4, lr}
	ldr	r2, .L880
	ldr	r0, .L880+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r1, [r0, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r2, [r0]
	ldr	r4, .L880+0x8
	ldr	r3, [r4]
	ldrb	r1, [r3, #0x1]
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	cmp	r2, r1
	bne	.L878	@cond_branch
	ldrb	r1, [r3, #0x3]
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L879
.L881:
	.align	2, 0
.L880:
	.word	gBattleMoves
	.word	gBattleResources
	.word	gAIScriptPtr
.L878:
	add	r0, r3, #0x7
	str	r0, [r4]
.L879:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe86:
	.size	 Cmd_if_effect,.Lfe86-Cmd_if_effect
	.align	2, 0
	.type	 Cmd_if_not_effect,function
	.thumb_func
Cmd_if_not_effect:
	push	{r4, lr}
	ldr	r2, .L885
	ldr	r0, .L885+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r1, [r0, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r2, [r0]
	ldr	r4, .L885+0x8
	ldr	r3, [r4]
	ldrb	r1, [r3, #0x1]
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	cmp	r2, r1
	beq	.L883	@cond_branch
	ldrb	r1, [r3, #0x3]
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L884
.L886:
	.align	2, 0
.L885:
	.word	gBattleMoves
	.word	gBattleResources
	.word	gAIScriptPtr
.L883:
	add	r0, r3, #0x7
	str	r0, [r4]
.L884:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe87:
	.size	 Cmd_if_not_effect,.Lfe87-Cmd_if_not_effect
	.align	2, 0
	.type	 Cmd_if_stat_level_less_than,function
	.thumb_func
Cmd_if_stat_level_less_than:
	push	{r4, lr}
	ldr	r0, .L893
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L888	@cond_branch
	ldr	r0, .L893+0x4
	b	.L892
.L894:
	.align	2, 0
.L893:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L888:
	ldr	r0, .L895
.L892:
	ldrb	r3, [r0]
	ldr	r1, .L895+0x4
	ldr	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r3
	ldrb	r3, [r2, #0x2]
	add	r0, r0, r3
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrb	r1, [r2, #0x3]
	cmp	r0, r1
	bge	.L890	@cond_branch
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L891
.L896:
	.align	2, 0
.L895:
	.word	gBattlerTarget
	.word	gBattleMons
.L890:
	add	r0, r2, #0
	add	r0, r0, #0x8
	str	r0, [r4]
.L891:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe88:
	.size	 Cmd_if_stat_level_less_than,.Lfe88-Cmd_if_stat_level_less_than
	.align	2, 0
	.type	 Cmd_if_stat_level_more_than,function
	.thumb_func
Cmd_if_stat_level_more_than:
	push	{r4, lr}
	ldr	r0, .L903
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L898	@cond_branch
	ldr	r0, .L903+0x4
	b	.L902
.L904:
	.align	2, 0
.L903:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L898:
	ldr	r0, .L905
.L902:
	ldrb	r3, [r0]
	ldr	r1, .L905+0x4
	ldr	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r3
	ldrb	r3, [r2, #0x2]
	add	r0, r0, r3
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrb	r1, [r2, #0x3]
	cmp	r0, r1
	ble	.L900	@cond_branch
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L901
.L906:
	.align	2, 0
.L905:
	.word	gBattlerTarget
	.word	gBattleMons
.L900:
	add	r0, r2, #0
	add	r0, r0, #0x8
	str	r0, [r4]
.L901:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe89:
	.size	 Cmd_if_stat_level_more_than,.Lfe89-Cmd_if_stat_level_more_than
	.align	2, 0
	.type	 Cmd_if_stat_level_equal,function
	.thumb_func
Cmd_if_stat_level_equal:
	push	{r4, lr}
	ldr	r0, .L913
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L908	@cond_branch
	ldr	r0, .L913+0x4
	b	.L912
.L914:
	.align	2, 0
.L913:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L908:
	ldr	r0, .L915
.L912:
	ldrb	r3, [r0]
	ldr	r1, .L915+0x4
	ldr	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r3
	ldrb	r3, [r2, #0x2]
	add	r0, r0, r3
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrb	r1, [r2, #0x3]
	cmp	r0, r1
	bne	.L910	@cond_branch
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L911
.L916:
	.align	2, 0
.L915:
	.word	gBattlerTarget
	.word	gBattleMons
.L910:
	add	r0, r2, #0
	add	r0, r0, #0x8
	str	r0, [r4]
.L911:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe90:
	.size	 Cmd_if_stat_level_equal,.Lfe90-Cmd_if_stat_level_equal
	.align	2, 0
	.type	 Cmd_if_stat_level_not_equal,function
	.thumb_func
Cmd_if_stat_level_not_equal:
	push	{r4, lr}
	ldr	r0, .L923
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L918	@cond_branch
	ldr	r0, .L923+0x4
	b	.L922
.L924:
	.align	2, 0
.L923:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L918:
	ldr	r0, .L925
.L922:
	ldrb	r3, [r0]
	ldr	r1, .L925+0x4
	ldr	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r3
	ldrb	r3, [r2, #0x2]
	add	r0, r0, r3
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrb	r1, [r2, #0x3]
	cmp	r0, r1
	beq	.L920	@cond_branch
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L921
.L926:
	.align	2, 0
.L925:
	.word	gBattlerTarget
	.word	gBattleMons
.L920:
	add	r0, r2, #0
	add	r0, r0, #0x8
	str	r0, [r4]
.L921:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe91:
	.size	 Cmd_if_stat_level_not_equal,.Lfe91-Cmd_if_stat_level_not_equal
	.align	2, 0
	.type	 Cmd_if_can_faint,function
	.thumb_func
Cmd_if_can_faint:
	push	{r4, lr}
	ldr	r2, .L931
	ldr	r0, .L931+0x4
	ldr	r0, [r0]
	ldr	r4, [r0, #0x14]
	ldrh	r1, [r4, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L929	@cond_branch
	ldrb	r1, [r4, #0x1]
	lsl	r1, r1, #0x2
	ldr	r0, .L931+0x8
	ldrb	r3, [r0]
	lsl	r0, r3, #0x4
	add	r1, r1, r0
	ldr	r0, .L931+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r0, r4, #0
	add	r0, r0, #0x14
	add	r0, r0, r1
	ldr	r2, [r0]
	ldr	r1, .L931+0x10
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2a]
	cmp	r0, r2
	bgt	.L929	@cond_branch
	ldr	r3, .L931+0x14
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L927
.L932:
	.align	2, 0
.L931:
	.word	gBattleMoves
	.word	gBattleResources
	.word	gBattlerTarget
	.word	sBattler_AI
	.word	gBattleMons
	.word	gAIScriptPtr
.L929:
	ldr	r1, .L933
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L927:
	pop	{r4}
	pop	{r0}
	bx	r0
.L934:
	.align	2, 0
.L933:
	.word	gAIScriptPtr
.Lfe92:
	.size	 Cmd_if_can_faint,.Lfe92-Cmd_if_can_faint
	.align	2, 0
	.type	 Cmd_if_cant_faint,function
	.thumb_func
Cmd_if_cant_faint:
	push	{r4, lr}
	ldr	r2, .L939
	ldr	r0, .L939+0x4
	ldr	r0, [r0]
	ldr	r4, [r0, #0x14]
	ldrh	r1, [r4, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0x1
	bls	.L937	@cond_branch
	ldrb	r1, [r4, #0x1]
	lsl	r1, r1, #0x2
	ldr	r0, .L939+0x8
	ldrb	r3, [r0]
	lsl	r0, r3, #0x4
	add	r1, r1, r0
	ldr	r0, .L939+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r0, r4, #0
	add	r0, r0, #0x14
	add	r0, r0, r1
	ldr	r2, [r0]
	ldr	r1, .L939+0x10
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2a]
	cmp	r0, r2
	ble	.L937	@cond_branch
	ldr	r3, .L939+0x14
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L935
.L940:
	.align	2, 0
.L939:
	.word	gBattleMoves
	.word	gBattleResources
	.word	gBattlerTarget
	.word	sBattler_AI
	.word	gBattleMons
	.word	gAIScriptPtr
.L937:
	ldr	r1, .L941
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L935:
	pop	{r4}
	pop	{r0}
	bx	r0
.L942:
	.align	2, 0
.L941:
	.word	gAIScriptPtr
.Lfe93:
	.size	 Cmd_if_cant_faint,.Lfe93-Cmd_if_cant_faint
	.align	2, 0
	.type	 Cmd_if_has_move,function
	.thumb_func
Cmd_if_has_move:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L980
	ldr	r5, [r0]
	add	r7, r5, #0x2
	ldrb	r1, [r5, #0x1]
	add	r6, r0, #0
	cmp	r1, #0x1
	beq	.L945	@cond_branch
	cmp	r1, #0x1
	bgt	.L977	@cond_branch
	cmp	r1, #0
	beq	.L966	@cond_branch
	b	.L944
.L981:
	.align	2, 0
.L980:
	.word	gAIScriptPtr
.L977:
	cmp	r1, #0x2
	beq	.L966	@cond_branch
	cmp	r1, #0x3
	beq	.L954	@cond_branch
	b	.L944
.L945:
	mov	r4, #0x0
	ldr	r3, .L982
	ldr	r2, .L982+0x4
	ldrb	r1, [r2]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r3, r3, #0xc
	add	r0, r0, r3
	ldrh	r0, [r0]
	ldrh	r5, [r5, #0x2]
	cmp	r0, r5
	beq	.L947	@cond_branch
	mov	r5, #0x5c
.L948:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L947	@cond_branch
	lsl	r1, r4, #0x1
	ldrb	r0, [r2]
	mul	r0, r0, r5
	add	r1, r1, r0
	add	r1, r1, r3
	ldrh	r0, [r1]
	ldrh	r1, [r7]
	cmp	r0, r1
	bne	.L948	@cond_branch
.L947:
	cmp	r4, #0x4
	beq	.L978	@cond_branch
	b	.L973
.L983:
	.align	2, 0
.L982:
	.word	gBattleMons
	.word	sBattler_AI
.L954:
	ldr	r3, .L984
	ldr	r2, .L984+0x4
	ldrb	r1, [r2]
	mov	r0, #0x2
	eor	r0, r0, r1
	mov	r1, #0x5c
	mul	r1, r1, r0
	add	r0, r1, r3
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	bne	.L955	@cond_branch
	add	r0, r5, #0
	b	.L979
.L985:
	.align	2, 0
.L984:
	.word	gBattleMons
	.word	sBattler_AI
.L955:
	mov	r4, #0x0
	add	r3, r3, #0xc
	add	r0, r1, r3
	ldrh	r0, [r0]
	ldrh	r5, [r5, #0x2]
	cmp	r0, r5
	beq	.L947	@cond_branch
	mov	ip, r3
	add	r5, r2, #0
	mov	r3, #0x2
.L959:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L947	@cond_branch
	lsl	r1, r4, #0x1
	ldrb	r0, [r5]
	add	r2, r3, #0
	eor	r2, r2, r0
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r1, r1, ip
	ldrh	r0, [r1]
	ldrh	r1, [r7]
	cmp	r0, r1
	bne	.L959	@cond_branch
	b	.L947
.L966:
	mov	r4, #0x0
	ldr	r3, .L986
	ldr	r0, [r3]
	ldr	r1, [r0, #0x18]
	ldr	r2, .L986+0x4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x3
	add	r1, r1, #0xc
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldrh	r1, [r7]
	cmp	r0, r1
	beq	.L968	@cond_branch
	add	r7, r3, #0
	add	r5, r2, #0
	add	r3, r1, #0
.L969:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L968	@cond_branch
	ldr	r0, [r7]
	ldr	r1, [r0, #0x18]
	lsl	r2, r4, #0x1
	ldrb	r0, [r5]
	lsl	r0, r0, #0x3
	add	r2, r2, r0
	add	r1, r1, #0xc
	add	r1, r1, r2
	ldrh	r0, [r1]
	cmp	r0, r3
	bne	.L969	@cond_branch
.L968:
	cmp	r4, #0x4
	bne	.L973	@cond_branch
.L978:
	ldr	r0, [r6]
.L979:
	add	r0, r0, #0x8
	str	r0, [r6]
	b	.L944
.L987:
	.align	2, 0
.L986:
	.word	gBattleResources
	.word	gBattlerTarget
.L973:
	ldr	r2, [r6]
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r6]
.L944:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe94:
	.size	 Cmd_if_has_move,.Lfe94-Cmd_if_has_move
	.align	2, 0
	.type	 Cmd_if_doesnt_have_move,function
	.thumb_func
Cmd_if_doesnt_have_move:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L1014
	ldr	r0, [r1]
	add	r6, r0, #0x2
	ldrb	r0, [r0, #0x1]
	add	r5, r1, #0
	cmp	r0, #0x1
	beq	.L991	@cond_branch
	cmp	r0, #0x1
	bgt	.L1012	@cond_branch
	cmp	r0, #0
	beq	.L1001	@cond_branch
	b	.L989
.L1015:
	.align	2, 0
.L1014:
	.word	gAIScriptPtr
.L1012:
	cmp	r0, #0x2
	beq	.L1001	@cond_branch
	cmp	r0, #0x3
	bne	.L989	@cond_branch
.L991:
	mov	r3, #0x0
	ldr	r2, .L1016
	ldr	r4, .L1016+0x4
	ldrb	r1, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldrh	r0, [r0]
	ldrh	r1, [r6]
	cmp	r0, r1
	beq	.L993	@cond_branch
	add	r7, r4, #0
	mov	r6, #0x5c
	add	r4, r2, #0
	add	r2, r1, #0
.L994:
	add	r3, r3, #0x1
	cmp	r3, #0x3
	bgt	.L993	@cond_branch
	lsl	r1, r3, #0x1
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r1, r1, r0
	add	r1, r1, r4
	ldrh	r0, [r1]
	cmp	r0, r2
	bne	.L994	@cond_branch
.L993:
	cmp	r3, #0x4
	bne	.L1013	@cond_branch
	b	.L1008
.L1017:
	.align	2, 0
.L1016:
	.word	gBattleMons
	.word	sBattler_AI
.L1001:
	mov	r3, #0x0
	ldr	r4, .L1018
	ldr	r0, [r4]
	ldr	r1, [r0, #0x18]
	ldr	r2, .L1018+0x4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x3
	add	r1, r1, #0xc
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldrh	r1, [r6]
	cmp	r0, r1
	beq	.L1003	@cond_branch
	add	r7, r4, #0
	add	r6, r2, #0
	add	r4, r1, #0
.L1004:
	add	r3, r3, #0x1
	cmp	r3, #0x3
	bgt	.L1003	@cond_branch
	ldr	r0, [r7]
	ldr	r1, [r0, #0x18]
	lsl	r2, r3, #0x1
	ldrb	r0, [r6]
	lsl	r0, r0, #0x3
	add	r2, r2, r0
	add	r1, r1, #0xc
	add	r1, r1, r2
	ldrh	r0, [r1]
	cmp	r0, r4
	bne	.L1004	@cond_branch
.L1003:
	cmp	r3, #0x4
	beq	.L1008	@cond_branch
.L1013:
	ldr	r0, [r5]
	add	r0, r0, #0x8
	str	r0, [r5]
	b	.L989
.L1019:
	.align	2, 0
.L1018:
	.word	gBattleResources
	.word	gBattlerTarget
.L1008:
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
.L989:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe95:
	.size	 Cmd_if_doesnt_have_move,.Lfe95-Cmd_if_doesnt_have_move
	.align	2, 0
	.type	 Cmd_if_has_move_with_effect,function
	.thumb_func
Cmd_if_has_move_with_effect:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L1046
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x1]
	add	r5, r1, #0
	cmp	r0, #0x1
	beq	.L1023	@cond_branch
	cmp	r0, #0x1
	bgt	.L1044	@cond_branch
	cmp	r0, #0
	beq	.L1033	@cond_branch
	b	.L1021
.L1047:
	.align	2, 0
.L1046:
	.word	gAIScriptPtr
.L1044:
	cmp	r0, #0x2
	beq	.L1033	@cond_branch
	cmp	r0, #0x3
	bne	.L1021	@cond_branch
.L1023:
	mov	r3, #0x0
	ldr	r1, .L1048
	ldr	r0, .L1048+0x4
	ldrb	r2, [r0]
	ldr	r6, .L1048+0x8
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0xc
	add	r2, r0, r1
	ldr	r4, .L1048+0xc
.L1027:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L1026	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r4]
	ldrh	r0, [r0]
	ldrb	r1, [r1, #0x2]
	cmp	r0, r1
	beq	.L1025	@cond_branch
.L1026:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L1027	@cond_branch
.L1025:
	cmp	r3, #0x4
	beq	.L1045	@cond_branch
	b	.L1040
.L1049:
	.align	2, 0
.L1048:
	.word	gBattleMons
	.word	sBattler_AI
	.word	gBattleMoves
	.word	gAIScriptPtr
.L1033:
	mov	r3, #0x0
	ldr	r1, .L1050
	ldr	r0, .L1050+0x4
	ldrb	r2, [r0]
	ldr	r7, .L1050+0x8
	ldr	r6, .L1050+0xc
	lsl	r4, r2, #0x3
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0xc
	add	r2, r0, r1
.L1037:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L1036	@cond_branch
	ldr	r0, [r6]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0xc
	add	r0, r0, r4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, [r5]
	ldrh	r0, [r0]
	ldrb	r1, [r1, #0x2]
	cmp	r0, r1
	beq	.L1035	@cond_branch
.L1036:
	add	r4, r4, #0x2
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L1037	@cond_branch
.L1035:
	cmp	r3, #0x4
	bne	.L1040	@cond_branch
.L1045:
	ldr	r0, [r5]
	add	r0, r0, #0x7
	str	r0, [r5]
	b	.L1021
.L1051:
	.align	2, 0
.L1050:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattleMoves
	.word	gBattleResources
.L1040:
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
.L1021:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe96:
	.size	 Cmd_if_has_move_with_effect,.Lfe96-Cmd_if_has_move_with_effect
	.align	2, 0
	.type	 Cmd_if_doesnt_have_move_with_effect,function
	.thumb_func
Cmd_if_doesnt_have_move_with_effect:
	push	{r4, r5, r6, lr}
	ldr	r1, .L1078
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x1]
	add	r4, r1, #0
	cmp	r0, #0x1
	beq	.L1055	@cond_branch
	cmp	r0, #0x1
	bgt	.L1076	@cond_branch
	cmp	r0, #0
	beq	.L1065	@cond_branch
	b	.L1053
.L1079:
	.align	2, 0
.L1078:
	.word	gAIScriptPtr
.L1076:
	cmp	r0, #0x2
	beq	.L1065	@cond_branch
	cmp	r0, #0x3
	bne	.L1053	@cond_branch
.L1055:
	mov	r3, #0x0
	ldr	r1, .L1080
	ldr	r0, .L1080+0x4
	ldrb	r2, [r0]
	ldr	r6, .L1080+0x8
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0xc
	add	r2, r0, r1
	ldr	r5, .L1080+0xc
.L1059:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L1058	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r5]
	ldrh	r0, [r0]
	ldrb	r1, [r1, #0x2]
	cmp	r0, r1
	beq	.L1057	@cond_branch
.L1058:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L1059	@cond_branch
.L1057:
	cmp	r3, #0x4
	bne	.L1077	@cond_branch
	b	.L1072
.L1081:
	.align	2, 0
.L1080:
	.word	gBattleMons
	.word	sBattler_AI
	.word	gBattleMoves
	.word	gAIScriptPtr
.L1065:
	mov	r3, #0x0
	ldr	r0, .L1082
	ldr	r0, [r0]
	ldr	r1, [r0, #0x18]
	ldr	r0, .L1082+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r1, r1, #0xc
	add	r2, r0, r1
	ldr	r5, .L1082+0x8
.L1069:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L1068	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r4]
	ldrh	r0, [r0]
	ldrb	r1, [r1, #0x2]
	cmp	r0, r1
	beq	.L1067	@cond_branch
.L1068:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L1069	@cond_branch
.L1067:
	cmp	r3, #0x4
	beq	.L1072	@cond_branch
.L1077:
	ldr	r0, [r4]
	add	r0, r0, #0x7
	str	r0, [r4]
	b	.L1053
.L1083:
	.align	2, 0
.L1082:
	.word	gBattleResources
	.word	gBattlerTarget
	.word	gBattleMoves
.L1072:
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
.L1053:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe97:
	.size	 Cmd_if_doesnt_have_move_with_effect,.Lfe97-Cmd_if_doesnt_have_move_with_effect
	.align	2, 0
	.type	 Cmd_if_any_move_disabled_or_encored,function
	.thumb_func
Cmd_if_any_move_disabled_or_encored:
	push	{r4, r5, lr}
	ldr	r0, .L1098
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r5, r0, #0
	cmp	r1, #0x1
	bne	.L1085	@cond_branch
	ldr	r0, .L1098+0x4
	b	.L1095
.L1099:
	.align	2, 0
.L1098:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L1085:
	ldr	r0, .L1100
.L1095:
	ldrb	r3, [r0]
	add	r4, r5, #0
	ldr	r2, [r4]
	ldrb	r0, [r2, #0x2]
	cmp	r0, #0
	bne	.L1087	@cond_branch
	ldr	r0, .L1100+0x4
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x4]
	cmp	r0, #0
	beq	.L1096	@cond_branch
	b	.L1097
.L1101:
	.align	2, 0
.L1100:
	.word	gBattlerTarget
	.word	gDisableStructs
.L1087:
	cmp	r0, #0x1
	beq	.L1091	@cond_branch
.L1096:
	add	r0, r2, #0x7
	str	r0, [r4]
	b	.L1090
.L1091:
	ldr	r0, .L1102
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x6]
	cmp	r0, #0
	beq	.L1093	@cond_branch
.L1097:
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1090
.L1103:
	.align	2, 0
.L1102:
	.word	gDisableStructs
.L1093:
	add	r0, r2, #0x7
	str	r0, [r5]
.L1090:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe98:
	.size	 Cmd_if_any_move_disabled_or_encored,.Lfe98-Cmd_if_any_move_disabled_or_encored
	.align	2, 0
	.type	 Cmd_if_curr_move_disabled_or_encored,function
	.thumb_func
Cmd_if_curr_move_disabled_or_encored:
	push	{r4, lr}
	ldr	r4, .L1115
	ldr	r3, [r4]
	ldrb	r0, [r3, #0x1]
	cmp	r0, #0
	beq	.L1106	@cond_branch
	cmp	r0, #0x1
	beq	.L1109	@cond_branch
	b	.L1110
.L1116:
	.align	2, 0
.L1115:
	.word	gAIScriptPtr
.L1106:
	ldr	r2, .L1117
	ldr	r0, .L1117+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L1117+0x8
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
	ldrh	r0, [r0, #0x4]
	ldrh	r1, [r1, #0x2]
	cmp	r0, r1
	beq	.L1114	@cond_branch
	b	.L1110
.L1118:
	.align	2, 0
.L1117:
	.word	gDisableStructs
	.word	gActiveBattler
	.word	gBattleResources
.L1109:
	ldr	r2, .L1119
	ldr	r0, .L1119+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L1119+0x8
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
	ldrh	r0, [r0, #0x6]
	ldrh	r1, [r1, #0x2]
	cmp	r0, r1
	bne	.L1110	@cond_branch
.L1114:
	ldrb	r1, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1105
.L1120:
	.align	2, 0
.L1119:
	.word	gDisableStructs
	.word	gActiveBattler
	.word	gBattleResources
.L1110:
	add	r0, r3, #0x6
	str	r0, [r4]
.L1105:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe99:
	.size	 Cmd_if_curr_move_disabled_or_encored,.Lfe99-Cmd_if_curr_move_disabled_or_encored
	.align	2, 0
	.type	 Cmd_flee,function
	.thumb_func
Cmd_flee:
	ldr	r0, .L1122
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldrb	r1, [r2, #0x10]
	mov	r0, #0xb
	orr	r0, r0, r1
	strb	r0, [r2, #0x10]
	bx	lr
.L1123:
	.align	2, 0
.L1122:
	.word	gBattleResources
.Lfe100:
	.size	 Cmd_flee,.Lfe100-Cmd_flee
	.align	2, 0
	.type	 Cmd_if_random_safari_flee,function
	.thumb_func
Cmd_if_random_safari_flee:
	push	{r4, lr}
	ldr	r0, .L1127
	ldr	r0, [r0]
	add	r0, r0, #0x7a
	ldrb	r0, [r0]
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r4
	bcs	.L1125	@cond_branch
	ldr	r3, .L1127+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L1126
.L1128:
	.align	2, 0
.L1127:
	.word	gBattleStruct
	.word	gAIScriptPtr
.L1125:
	ldr	r1, .L1129
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L1126:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1130:
	.align	2, 0
.L1129:
	.word	gAIScriptPtr
.Lfe101:
	.size	 Cmd_if_random_safari_flee,.Lfe101-Cmd_if_random_safari_flee
	.align	2, 0
	.type	 Cmd_watch,function
	.thumb_func
Cmd_watch:
	ldr	r0, .L1132
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldrb	r1, [r2, #0x10]
	mov	r0, #0xd
	orr	r0, r0, r1
	strb	r0, [r2, #0x10]
	bx	lr
.L1133:
	.align	2, 0
.L1132:
	.word	gBattleResources
.Lfe102:
	.size	 Cmd_watch,.Lfe102-Cmd_watch
	.align	2, 0
	.type	 Cmd_get_hold_effect,function
	.thumb_func
Cmd_get_hold_effect:
	push	{r4, lr}
	ldr	r0, .L1138
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	bne	.L1135	@cond_branch
	ldr	r0, .L1138+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0x8
	add	r0, r0, r4
	ldrb	r0, [r0]
	b	.L1137
.L1139:
	.align	2, 0
.L1138:
	.word	gAIScriptPtr
	.word	gBattleResources
.L1135:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetBattlerHoldEffect
	ldr	r1, .L1140
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
.L1137:
	str	r0, [r1, #0x8]
	ldr	r1, .L1140+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1141:
	.align	2, 0
.L1140:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe103:
	.size	 Cmd_get_hold_effect,.Lfe103-Cmd_get_hold_effect
	.align	2, 0
	.type	 Cmd_if_holds_item,function
	.thumb_func
Cmd_if_holds_item:
	push	{r4, lr}
	ldr	r0, .L1147
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r0, #0x1
	ldr	r1, .L1147+0x4
	ldrb	r2, [r1]
	add	r1, r3, #0
	and	r1, r1, r0
	and	r0, r0, r2
	cmp	r1, r0
	bne	.L1143	@cond_branch
	ldr	r1, .L1147+0x8
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r0, r0, r1
	ldrh	r3, [r0, #0x30]
	b	.L1144
.L1148:
	.align	2, 0
.L1147:
	.word	gAIScriptPtr
	.word	sBattler_AI
	.word	gBattleMons
.L1143:
	ldr	r0, .L1149
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0x8
	add	r0, r0, r3
	ldrb	r3, [r0]
.L1144:
	ldr	r4, .L1149+0x4
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	cmp	r1, r3
	bne	.L1145	@cond_branch
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1146
.L1150:
	.align	2, 0
.L1149:
	.word	gBattleResources
	.word	gAIScriptPtr
.L1145:
	add	r0, r2, #0
	add	r0, r0, #0x8
	str	r0, [r4]
.L1146:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe104:
	.size	 Cmd_if_holds_item,.Lfe104-Cmd_if_holds_item
	.align	2, 0
	.type	 Cmd_get_gender,function
	.thumb_func
Cmd_get_gender:
	push	{lr}
	ldr	r0, .L1155
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x1
	bne	.L1152	@cond_branch
	ldr	r0, .L1155+0x4
	b	.L1154
.L1156:
	.align	2, 0
.L1155:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L1152:
	ldr	r0, .L1157
.L1154:
	ldrb	r1, [r0]
	ldr	r2, .L1157+0x4
	mov	r0, #0x5c
	mul	r1, r1, r0
	add	r0, r1, r2
	ldrh	r0, [r0]
	add	r2, r2, #0x4c
	add	r1, r1, r2
	ldr	r1, [r1]
	bl	GetGenderFromSpeciesAndPersonality
	ldr	r1, .L1157+0x8
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [r1, #0x8]
	ldr	r1, .L1157+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1158:
	.align	2, 0
.L1157:
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe105:
	.size	 Cmd_get_gender,.Lfe105-Cmd_get_gender
	.align	2, 0
	.type	 Cmd_is_first_turn_for,function
	.thumb_func
Cmd_is_first_turn_for:
	push	{r4, lr}
	ldr	r0, .L1163
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L1160	@cond_branch
	ldr	r0, .L1163+0x4
	b	.L1162
.L1164:
	.align	2, 0
.L1163:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L1160:
	ldr	r0, .L1165
.L1162:
	ldrb	r3, [r0]
	ldr	r0, .L1165+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r1, .L1165+0x8
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x19]
	str	r0, [r2, #0x8]
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1166:
	.align	2, 0
.L1165:
	.word	gBattlerTarget
	.word	gBattleResources
	.word	gDisableStructs
.Lfe106:
	.size	 Cmd_is_first_turn_for,.Lfe106-Cmd_is_first_turn_for
	.align	2, 0
	.type	 Cmd_get_stockpile_count,function
	.thumb_func
Cmd_get_stockpile_count:
	push	{r4, lr}
	ldr	r0, .L1171
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L1168	@cond_branch
	ldr	r0, .L1171+0x4
	b	.L1170
.L1172:
	.align	2, 0
.L1171:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L1168:
	ldr	r0, .L1173
.L1170:
	ldrb	r3, [r0]
	ldr	r0, .L1173+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r1, .L1173+0x8
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x9]
	str	r0, [r2, #0x8]
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1174:
	.align	2, 0
.L1173:
	.word	gBattlerTarget
	.word	gBattleResources
	.word	gDisableStructs
.Lfe107:
	.size	 Cmd_get_stockpile_count,.Lfe107-Cmd_get_stockpile_count
	.align	2, 0
	.type	 Cmd_is_double_battle,function
	.thumb_func
Cmd_is_double_battle:
	ldr	r0, .L1176
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r0, .L1176+0x4
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	str	r0, [r2, #0x8]
	ldr	r1, .L1176+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L1177:
	.align	2, 0
.L1176:
	.word	gBattleResources
	.word	gBattleTypeFlags
	.word	gAIScriptPtr
.Lfe108:
	.size	 Cmd_is_double_battle,.Lfe108-Cmd_is_double_battle
	.align	2, 0
	.type	 Cmd_get_used_held_item,function
	.thumb_func
Cmd_get_used_held_item:
	push	{lr}
	ldr	r0, .L1182
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r3, r0, #0
	cmp	r1, #0x1
	bne	.L1179	@cond_branch
	ldr	r0, .L1182+0x4
	b	.L1181
.L1183:
	.align	2, 0
.L1182:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L1179:
	ldr	r0, .L1184
.L1181:
	ldrb	r1, [r0]
	ldr	r0, .L1184+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r0, .L1184+0x8
	ldr	r0, [r0]
	lsl	r1, r1, #0x1
	add	r0, r0, #0xb0
	add	r0, r0, r1
	ldrh	r0, [r0]
	str	r0, [r2, #0x8]
	ldr	r0, [r3]
	add	r0, r0, #0x2
	str	r0, [r3]
	pop	{r0}
	bx	r0
.L1185:
	.align	2, 0
.L1184:
	.word	gBattlerTarget
	.word	gBattleResources
	.word	gBattleStruct
.Lfe109:
	.size	 Cmd_get_used_held_item,.Lfe109-Cmd_get_used_held_item
	.align	2, 0
	.type	 Cmd_get_move_type_from_result,function
	.thumb_func
Cmd_get_move_type_from_result:
	ldr	r0, .L1187
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L1187+0x4
	ldr	r1, [r3, #0x8]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x3]
	str	r0, [r3, #0x8]
	ldr	r1, .L1187+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L1188:
	.align	2, 0
.L1187:
	.word	gBattleResources
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe110:
	.size	 Cmd_get_move_type_from_result,.Lfe110-Cmd_get_move_type_from_result
	.align	2, 0
	.type	 Cmd_get_move_power_from_result,function
	.thumb_func
Cmd_get_move_power_from_result:
	ldr	r0, .L1190
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L1190+0x4
	ldr	r1, [r3, #0x8]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	str	r0, [r3, #0x8]
	ldr	r1, .L1190+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L1191:
	.align	2, 0
.L1190:
	.word	gBattleResources
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe111:
	.size	 Cmd_get_move_power_from_result,.Lfe111-Cmd_get_move_power_from_result
	.align	2, 0
	.type	 Cmd_get_move_effect_from_result,function
	.thumb_func
Cmd_get_move_effect_from_result:
	ldr	r0, .L1193
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L1193+0x4
	ldr	r1, [r3, #0x8]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	str	r0, [r3, #0x8]
	ldr	r1, .L1193+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L1194:
	.align	2, 0
.L1193:
	.word	gBattleResources
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe112:
	.size	 Cmd_get_move_effect_from_result,.Lfe112-Cmd_get_move_effect_from_result
	.align	2, 0
	.type	 Cmd_get_protect_count,function
	.thumb_func
Cmd_get_protect_count:
	push	{r4, lr}
	ldr	r0, .L1199
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L1196	@cond_branch
	ldr	r0, .L1199+0x4
	b	.L1198
.L1200:
	.align	2, 0
.L1199:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L1196:
	ldr	r0, .L1201
.L1198:
	ldrb	r3, [r0]
	ldr	r0, .L1201+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r1, .L1201+0x8
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x8]
	str	r0, [r2, #0x8]
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1202:
	.align	2, 0
.L1201:
	.word	gBattlerTarget
	.word	gBattleResources
	.word	gDisableStructs
.Lfe113:
	.size	 Cmd_get_protect_count,.Lfe113-Cmd_get_protect_count
	.align	2, 0
	.type	 Cmd_if_move_flag,function
	.thumb_func
Cmd_if_move_flag:
	push	{r4, r5, lr}
	ldr	r5, .L1206
	ldr	r4, [r5]
	ldrb	r2, [r4, #0x1]
	ldrb	r0, [r4, #0x2]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r4, #0x4]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	ldr	r3, .L1206+0x4
	ldr	r0, .L1206+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r1, [r0, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r3, r3, #0xc
	add	r0, r0, r3
	ldr	r0, [r0]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L1204	@cond_branch
	ldrb	r1, [r4, #0x5]
	ldrb	r0, [r4, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L1205
.L1207:
	.align	2, 0
.L1206:
	.word	gAIScriptPtr
	.word	gBattleMoves
	.word	gBattleResources
.L1204:
	add	r0, r4, #0
	add	r0, r0, #0x9
	str	r0, [r5]
.L1205:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe114:
	.size	 Cmd_if_move_flag,.Lfe114-Cmd_if_move_flag
	.align	2, 0
	.type	 Cmd_if_field_status,function
	.thumb_func
Cmd_if_field_status:
	push	{lr}
	ldr	r3, .L1211
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L1211+0x4
	ldr	r0, [r0]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1209	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L1210
.L1212:
	.align	2, 0
.L1211:
	.word	gAIScriptPtr
	.word	gFieldStatuses
.L1209:
	add	r0, r2, #0
	add	r0, r0, #0x9
	str	r0, [r3]
.L1210:
	pop	{r0}
	bx	r0
.Lfe115:
	.size	 Cmd_if_field_status,.Lfe115-Cmd_if_field_status
	.align	2, 0
	.type	 Cmd_get_move_accuracy,function
	.thumb_func
Cmd_get_move_accuracy:
	ldr	r0, .L1214
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L1214+0x4
	ldrh	r1, [r3, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x4]
	str	r0, [r3, #0x8]
	ldr	r1, .L1214+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L1215:
	.align	2, 0
.L1214:
	.word	gBattleResources
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe116:
	.size	 Cmd_get_move_accuracy,.Lfe116-Cmd_get_move_accuracy
	.align	2, 0
	.type	 Cmd_call_if_eq,function
	.thumb_func
Cmd_call_if_eq:
	push	{r4, lr}
	ldr	r0, .L1219
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r4, .L1219+0x4
	ldr	r3, [r4]
	ldrb	r1, [r3, #0x1]
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldr	r0, [r2, #0x8]
	cmp	r0, r1
	bne	.L1217	@cond_branch
	add	r0, r3, #0x7
	bl	AIStackPushVar
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1218
.L1220:
	.align	2, 0
.L1219:
	.word	gBattleResources
	.word	gAIScriptPtr
.L1217:
	add	r0, r3, #0x7
	str	r0, [r4]
.L1218:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe117:
	.size	 Cmd_call_if_eq,.Lfe117-Cmd_call_if_eq
	.align	2, 0
	.type	 Cmd_call_if_move_flag,function
	.thumb_func
Cmd_call_if_move_flag:
	push	{r4, r5, lr}
	ldr	r5, .L1224
	ldr	r4, [r5]
	ldrb	r2, [r4, #0x1]
	ldrb	r0, [r4, #0x2]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r4, #0x4]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	ldr	r3, .L1224+0x4
	ldr	r0, .L1224+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r1, [r0, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r3, r3, #0xc
	add	r0, r0, r3
	ldr	r0, [r0]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L1222	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x9
	bl	AIStackPushVar
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L1223
.L1225:
	.align	2, 0
.L1224:
	.word	gAIScriptPtr
	.word	gBattleMoves
	.word	gBattleResources
.L1222:
	add	r0, r4, #0
	add	r0, r0, #0x9
	str	r0, [r5]
.L1223:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe118:
	.size	 Cmd_call_if_move_flag,.Lfe118-Cmd_call_if_move_flag
	.align	2, 0
	.type	 Cmd_nullsub_57,function
	.thumb_func
Cmd_nullsub_57:
	bx	lr
.Lfe119:
	.size	 Cmd_nullsub_57,.Lfe119-Cmd_nullsub_57
	.align	2, 0
	.type	 Cmd_call,function
	.thumb_func
Cmd_call:
	push	{r4, lr}
	ldr	r4, .L1228
	ldr	r0, [r4]
	add	r0, r0, #0x5
	bl	AIStackPushVar
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1229:
	.align	2, 0
.L1228:
	.word	gAIScriptPtr
.Lfe120:
	.size	 Cmd_call,.Lfe120-Cmd_call
	.align	2, 0
	.type	 Cmd_goto,function
	.thumb_func
Cmd_goto:
	ldr	r3, .L1231
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	bx	lr
.L1232:
	.align	2, 0
.L1231:
	.word	gAIScriptPtr
.Lfe121:
	.size	 Cmd_goto,.Lfe121-Cmd_goto
	.align	2, 0
	.type	 Cmd_end,function
	.thumb_func
Cmd_end:
	push	{lr}
	bl	AIStackPop
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1234	@cond_branch
	ldr	r0, .L1235
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldrb	r1, [r2, #0x10]
	mov	r0, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x10]
.L1234:
	pop	{r0}
	bx	r0
.L1236:
	.align	2, 0
.L1235:
	.word	gBattleResources
.Lfe122:
	.size	 Cmd_end,.Lfe122-Cmd_end
	.align	2, 0
	.type	 Cmd_if_level_cond,function
	.thumb_func
Cmd_if_level_cond:
	push	{r4, r5, lr}
	ldr	r5, .L1252
	ldr	r4, [r5]
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0x1
	beq	.L1242	@cond_branch
	cmp	r0, #0x1
	bgt	.L1250	@cond_branch
	cmp	r0, #0
	beq	.L1239	@cond_branch
	b	.L1238
.L1253:
	.align	2, 0
.L1252:
	.word	gAIScriptPtr
.L1250:
	cmp	r0, #0x2
	beq	.L1245	@cond_branch
	b	.L1238
.L1239:
	ldr	r3, .L1254
	ldr	r0, .L1254+0x4
	ldrb	r0, [r0]
	mov	r2, #0x5c
	mov	r1, r0
	mul	r1, r1, r2
	add	r1, r1, r3
	add	r1, r1, #0x2c
	ldr	r0, .L1254+0x8
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x2c
	ldrb	r1, [r1]
	ldrb	r0, [r0]
	cmp	r1, r0
	bhi	.L1251	@cond_branch
	b	.L1246
.L1255:
	.align	2, 0
.L1254:
	.word	gBattleMons
	.word	sBattler_AI
	.word	gBattlerTarget
.L1242:
	ldr	r3, .L1256
	ldr	r0, .L1256+0x4
	ldrb	r0, [r0]
	mov	r2, #0x5c
	mov	r1, r0
	mul	r1, r1, r2
	add	r1, r1, r3
	add	r1, r1, #0x2c
	ldr	r0, .L1256+0x8
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x2c
	ldrb	r1, [r1]
	ldrb	r0, [r0]
	cmp	r1, r0
	bcc	.L1251	@cond_branch
	b	.L1246
.L1257:
	.align	2, 0
.L1256:
	.word	gBattleMons
	.word	sBattler_AI
	.word	gBattlerTarget
.L1245:
	ldr	r3, .L1258
	ldr	r0, .L1258+0x4
	ldrb	r0, [r0]
	mov	r2, #0x5c
	mov	r1, r0
	mul	r1, r1, r2
	add	r1, r1, r3
	add	r1, r1, #0x2c
	ldr	r0, .L1258+0x8
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x2c
	ldrb	r1, [r1]
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L1246	@cond_branch
.L1251:
	ldrb	r1, [r4, #0x2]
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L1238
.L1259:
	.align	2, 0
.L1258:
	.word	gBattleMons
	.word	sBattler_AI
	.word	gBattlerTarget
.L1246:
	add	r0, r4, #0x6
	str	r0, [r5]
.L1238:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe123:
	.size	 Cmd_if_level_cond,.Lfe123-Cmd_if_level_cond
	.align	2, 0
	.type	 Cmd_if_target_taunted,function
	.thumb_func
Cmd_if_target_taunted:
	push	{lr}
	ldr	r2, .L1263
	ldr	r0, .L1263+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x16]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	beq	.L1261	@cond_branch
	ldr	r3, .L1263+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L1262
.L1264:
	.align	2, 0
.L1263:
	.word	gDisableStructs
	.word	gBattlerTarget
	.word	gAIScriptPtr
.L1261:
	ldr	r1, .L1265
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L1262:
	pop	{r0}
	bx	r0
.L1266:
	.align	2, 0
.L1265:
	.word	gAIScriptPtr
.Lfe124:
	.size	 Cmd_if_target_taunted,.Lfe124-Cmd_if_target_taunted
	.align	2, 0
	.type	 Cmd_if_target_not_taunted,function
	.thumb_func
Cmd_if_target_not_taunted:
	push	{lr}
	ldr	r2, .L1270
	ldr	r0, .L1270+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x16]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bne	.L1268	@cond_branch
	ldr	r3, .L1270+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L1269
.L1271:
	.align	2, 0
.L1270:
	.word	gDisableStructs
	.word	gBattlerTarget
	.word	gAIScriptPtr
.L1268:
	ldr	r1, .L1272
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L1269:
	pop	{r0}
	bx	r0
.L1273:
	.align	2, 0
.L1272:
	.word	gAIScriptPtr
.Lfe125:
	.size	 Cmd_if_target_not_taunted,.Lfe125-Cmd_if_target_not_taunted
	.align	2, 0
	.type	 Cmd_if_target_is_ally,function
	.thumb_func
Cmd_if_target_is_ally:
	push	{lr}
	ldr	r0, .L1277
	ldrb	r3, [r0]
	mov	r0, #0x1
	ldr	r1, .L1277+0x4
	ldrb	r2, [r1]
	add	r1, r0, #0
	and	r1, r1, r3
	and	r0, r0, r2
	cmp	r1, r0
	bne	.L1275	@cond_branch
	ldr	r3, .L1277+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L1276
.L1278:
	.align	2, 0
.L1277:
	.word	sBattler_AI
	.word	gBattlerTarget
	.word	gAIScriptPtr
.L1275:
	ldr	r1, .L1279
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L1276:
	pop	{r0}
	bx	r0
.L1280:
	.align	2, 0
.L1279:
	.word	gAIScriptPtr
.Lfe126:
	.size	 Cmd_if_target_is_ally,.Lfe126-Cmd_if_target_is_ally
	.align	2, 0
	.type	 Cmd_if_flash_fired,function
	.thumb_func
Cmd_if_flash_fired:
	push	{r4, lr}
	ldr	r4, .L1284
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	ldr	r1, .L1284+0x4
	ldr	r1, [r1]
	ldr	r1, [r1, #0x4]
	lsr	r0, r0, #0x16
	add	r1, r1, r0
	ldr	r0, [r1]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1282	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1283
.L1285:
	.align	2, 0
.L1284:
	.word	gAIScriptPtr
	.word	gBattleResources
.L1282:
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
.L1283:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe127:
	.size	 Cmd_if_flash_fired,.Lfe127-Cmd_if_flash_fired
	.align	2, 0
	.type	 AIStackPushVar,function
	.thumb_func
AIStackPushVar:
	push	{r4, lr}
	ldr	r1, .L1287
	ldr	r1, [r1]
	ldr	r3, [r1, #0x1c]
	add	r4, r3, #0
	add	r4, r4, #0x20
	ldrb	r1, [r4]
	add	r2, r1, #0x1
	strb	r2, [r4]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x16
	add	r3, r3, r1
	str	r0, [r3]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1288:
	.align	2, 0
.L1287:
	.word	gBattleResources
.Lfe128:
	.size	 AIStackPushVar,.Lfe128-AIStackPushVar
	.align	2, 0
	.type	 AIStackPushVar_cursor,function
	.thumb_func
AIStackPushVar_cursor:
	ldr	r0, .L1290
	ldr	r0, [r0]
	ldr	r2, [r0, #0x1c]
	add	r3, r2, #0
	add	r3, r3, #0x20
	ldrb	r0, [r3]
	add	r1, r0, #0x1
	strb	r1, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r2, r2, r0
	ldr	r0, .L1290+0x4
	ldr	r0, [r0]
	str	r0, [r2]
	bx	lr
.L1291:
	.align	2, 0
.L1290:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe129:
	.size	 AIStackPushVar_cursor,.Lfe129-AIStackPushVar_cursor
	.align	2, 0
	.type	 AIStackPop,function
	.thumb_func
AIStackPop:
	push	{lr}
	ldr	r3, .L1296
	ldr	r0, [r3]
	ldr	r0, [r0, #0x1c]
	add	r1, r0, #0
	add	r1, r1, #0x20
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L1293	@cond_branch
	mov	r0, #0x0
	b	.L1295
.L1297:
	.align	2, 0
.L1296:
	.word	gBattleResources
.L1293:
	sub	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r2, .L1298
	ldr	r0, [r3]
	ldr	r1, [r0, #0x1c]
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	str	r0, [r2]
	mov	r0, #0x1
.L1295:
	pop	{r1}
	bx	r1
.L1299:
	.align	2, 0
.L1298:
	.word	gAIScriptPtr
.Lfe130:
	.size	 AIStackPop,.Lfe130-AIStackPop
	.align	2, 0
	.type	 Cmd_get_ally_chosen_move,function
	.thumb_func
Cmd_get_ally_chosen_move:
	push	{r4, r5, lr}
	ldr	r5, .L1307
	ldrb	r0, [r5]
	mov	r1, #0x2
	add	r4, r1, #0
	eor	r4, r4, r0
	add	r0, r4, #0
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L1306	@cond_branch
	add	r0, r4, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	beq	.L1306	@cond_branch
	ldrb	r5, [r5]
	cmp	r4, r5
	bls	.L1304	@cond_branch
.L1306:
	ldr	r0, .L1307+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x0
	str	r0, [r1, #0x8]
	b	.L1303
.L1308:
	.align	2, 0
.L1307:
	.word	sBattler_AI
	.word	gBattleResources
.L1304:
	ldr	r0, .L1309
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L1309+0x4
	ldr	r0, .L1309+0x8
	ldr	r0, [r0]
	add	r0, r0, #0x7f
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r1, #0x5c
	mul	r1, r1, r4
	add	r0, r0, r1
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldrh	r0, [r0]
	str	r0, [r3, #0x8]
.L1303:
	ldr	r1, .L1309+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1310:
	.align	2, 0
.L1309:
	.word	gBattleResources
	.word	gBattleMons
	.word	gBattleStruct
	.word	gAIScriptPtr
.Lfe131:
	.size	 Cmd_get_ally_chosen_move,.Lfe131-Cmd_get_ally_chosen_move
	.align	2, 0
	.type	 Cmd_if_has_no_attacking_moves,function
	.thumb_func
Cmd_if_has_no_attacking_moves:
	push	{r4, r5, r6, lr}
	ldr	r5, .L1328
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	beq	.L1312	@cond_branch
	mov	r3, #0x0
	add	r6, r5, #0
	ldr	r0, .L1328+0x4
	ldr	r5, .L1328+0x8
	mov	r1, #0x5c
	mul	r1, r1, r4
	add	r0, r0, #0xc
	add	r2, r1, r0
.L1316:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L1315	@cond_branch
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L1319	@cond_branch
.L1315:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L1316	@cond_branch
	b	.L1319
.L1329:
	.align	2, 0
.L1328:
	.word	gAIScriptPtr
	.word	gBattleMons
	.word	gBattleMoves
.L1312:
	mov	r3, #0x0
	add	r6, r5, #0
	lsl	r1, r4, #0x3
	ldr	r0, .L1330
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0xc
	ldr	r4, .L1330+0x4
	add	r2, r1, r0
.L1323:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L1322	@cond_branch
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L1319	@cond_branch
.L1322:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L1323	@cond_branch
.L1319:
	cmp	r3, #0x4
	bne	.L1326	@cond_branch
	ldr	r2, [r6]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r6]
	b	.L1327
.L1331:
	.align	2, 0
.L1330:
	.word	gBattleResources
	.word	gBattleMoves
.L1326:
	ldr	r0, [r6]
	add	r0, r0, #0x6
	str	r0, [r6]
.L1327:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe132:
	.size	 Cmd_if_has_no_attacking_moves,.Lfe132-Cmd_if_has_no_attacking_moves
	.align	2, 0
	.type	 Cmd_get_hazards_count,function
	.thumb_func
Cmd_get_hazards_count:
	push	{r4, lr}
	ldr	r4, .L1339
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x2]
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	cmp	r1, #0x70
	beq	.L1334	@cond_branch
	cmp	r1, #0xf7
	beq	.L1335	@cond_branch
	b	.L1333
.L1340:
	.align	2, 0
.L1339:
	.word	gAIScriptPtr
.L1334:
	ldr	r0, .L1341
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r1, .L1341+0x4
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0xa]
	b	.L1338
.L1342:
	.align	2, 0
.L1341:
	.word	gBattleResources
	.word	gSideTimers
.L1335:
	ldr	r0, .L1343
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r1, .L1343+0x4
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0xb]
.L1338:
	str	r0, [r2, #0x8]
.L1333:
	ldr	r1, .L1343+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x4
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1344:
	.align	2, 0
.L1343:
	.word	gBattleResources
	.word	gSideTimers
	.word	gAIScriptPtr
.Lfe133:
	.size	 Cmd_get_hazards_count,.Lfe133-Cmd_get_hazards_count
	.align	2, 0
	.type	 Cmd_if_doesnt_hold_berry,function
	.thumb_func
Cmd_if_doesnt_hold_berry:
	push	{r4, lr}
	ldr	r0, .L1350
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	beq	.L1346	@cond_branch
	ldr	r1, .L1350+0x4
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r0, r0, r1
	ldrh	r0, [r0, #0x30]
	b	.L1347
.L1351:
	.align	2, 0
.L1350:
	.word	gAIScriptPtr
	.word	gBattleMons
.L1346:
	ldr	r0, .L1352
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0x8
	add	r0, r0, r4
	ldrb	r0, [r0]
.L1347:
	bl	ItemId_GetPocket
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bne	.L1348	@cond_branch
	ldr	r1, .L1352+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x6
	str	r0, [r1]
	b	.L1349
.L1353:
	.align	2, 0
.L1352:
	.word	gBattleResources
	.word	gAIScriptPtr
.L1348:
	ldr	r3, .L1354
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L1349:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1355:
	.align	2, 0
.L1354:
	.word	gAIScriptPtr
.Lfe134:
	.size	 Cmd_if_doesnt_hold_berry,.Lfe134-Cmd_if_doesnt_hold_berry
	.align	2, 0
	.type	 Cmd_if_share_type,function
	.thumb_func
Cmd_if_share_type:
	push	{r4, r5, lr}
	ldr	r5, .L1359
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x2]
	bl	BattleAI_GetWantedBattler
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	DoBattlersShareType
	cmp	r0, #0
	beq	.L1357	@cond_branch
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L1358
.L1360:
	.align	2, 0
.L1359:
	.word	gAIScriptPtr
.L1357:
	ldr	r0, [r5]
	add	r0, r0, #0x7
	str	r0, [r5]
.L1358:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe135:
	.size	 Cmd_if_share_type,.Lfe135-Cmd_if_share_type
	.align	2, 0
	.type	 Cmd_if_cant_use_last_resort,function
	.thumb_func
Cmd_if_cant_use_last_resort:
	push	{r4, lr}
	ldr	r4, .L1364
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	CanUseLastResort
	cmp	r0, #0
	beq	.L1362	@cond_branch
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
	b	.L1363
.L1365:
	.align	2, 0
.L1364:
	.word	gAIScriptPtr
.L1362:
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
.L1363:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe136:
	.size	 Cmd_if_cant_use_last_resort,.Lfe136-Cmd_if_cant_use_last_resort
	.align	2, 0
	.type	 GetMovesArray,function
	.thumb_func
GetMovesArray:
	push	{r4, lr}
	add	r4, r0, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	bne	.L1368	@cond_branch
	mov	r0, #0x2
	eor	r0, r0, r4
	bl	IsBattlerAIControlled
	cmp	r0, #0
	beq	.L1367	@cond_branch
.L1368:
	mov	r0, #0x5c
	mul	r0, r0, r4
	ldr	r1, .L1373
	b	.L1372
.L1374:
	.align	2, 0
.L1373:
	.word	gBattleMons+0xc
.L1367:
	ldr	r0, .L1375
	ldr	r0, [r0]
	lsl	r1, r4, #0x3
	add	r1, r1, #0xc
	ldr	r0, [r0, #0x18]
.L1372:
	add	r0, r0, r1
	pop	{r4}
	pop	{r1}
	bx	r1
.L1376:
	.align	2, 0
.L1375:
	.word	gBattleResources
.Lfe137:
	.size	 GetMovesArray,.Lfe137-GetMovesArray
	.align	2, 0
	.type	 HasMoveWithSplit,function
	.thumb_func
HasMoveWithSplit:
	push	{r4, r5, r6, r7, lr}
	add	r6, r1, #0
	bl	GetMovesArray
	mov	r5, #0x0
	ldr	r7, .L1385
	add	r4, r0, #0
.L1381:
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L1380	@cond_branch
	cmp	r0, r7
	beq	.L1380	@cond_branch
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r6
	bne	.L1380	@cond_branch
	mov	r0, #0x1
	b	.L1384
.L1386:
	.align	2, 0
.L1385:
	.word	0xffff
.L1380:
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L1381	@cond_branch
	mov	r0, #0x0
.L1384:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe138:
	.size	 HasMoveWithSplit,.Lfe138-HasMoveWithSplit
	.align	2, 0
	.type	 Cmd_if_has_move_with_split,function
	.thumb_func
Cmd_if_has_move_with_split:
	push	{r4, lr}
	ldr	r4, .L1390
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [r4]
	ldrb	r1, [r1, #0x2]
	bl	HasMoveWithSplit
	cmp	r0, #0
	beq	.L1388	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1389
.L1391:
	.align	2, 0
.L1390:
	.word	gAIScriptPtr
.L1388:
	ldr	r0, [r4]
	add	r0, r0, #0x7
	str	r0, [r4]
.L1389:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe139:
	.size	 Cmd_if_has_move_with_split,.Lfe139-Cmd_if_has_move_with_split
	.align	2, 0
	.type	 Cmd_if_has_no_move_with_split,function
	.thumb_func
Cmd_if_has_no_move_with_split:
	push	{r4, lr}
	ldr	r4, .L1395
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [r4]
	ldrb	r1, [r1, #0x2]
	bl	HasMoveWithSplit
	cmp	r0, #0
	bne	.L1393	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1394
.L1396:
	.align	2, 0
.L1395:
	.word	gAIScriptPtr
.L1393:
	ldr	r0, [r4]
	add	r0, r0, #0x7
	str	r0, [r4]
.L1394:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe140:
	.size	 Cmd_if_has_no_move_with_split,.Lfe140-Cmd_if_has_no_move_with_split
	.align	2, 0
	.type	 MovesWithSplitUnusable,function
	.thumb_func
MovesWithSplitUnusable:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	add	r7, r0, #0
	add	r4, r1, #0
	str	r2, [sp, #0x4]
	mov	r0, #0x0
	mov	r9, r0
	lsl	r0, r7, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	mov	r2, #0xff
	bl	CheckMoveLimitations
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
	add	r0, r7, #0
	bl	GetMovesArray
	ldr	r1, .L1408
	mov	r8, r1
	add	r5, r0, #0
	mov	r6, r8
	lsl	r4, r4, #0x18
	mov	sl, r4
.L1401:
	ldrh	r1, [r5]
	cmp	r1, #0
	beq	.L1400	@cond_branch
	ldr	r0, .L1408+0x4
	cmp	r1, r0
	beq	.L1400	@cond_branch
	add	r0, r1, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, [sp, #0x4]
	cmp	r0, r4
	bne	.L1400	@cond_branch
	ldr	r0, [r6]
	ldr	r1, [sp, #0x8]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1400	@cond_branch
	ldrh	r0, [r5]
	lsl	r4, r7, #0x18
	lsr	r1, r4, #0x18
	bl	SetTypeBeforeUsingMove
	ldr	r0, .L1408+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x12]
	cmp	r0, #0
	beq	.L1403	@cond_branch
	mov	r1, #0x3f
	and	r1, r1, r0
	b	.L1404
.L1409:
	.align	2, 0
.L1408:
	.word	gBitTable
	.word	0xffff
	.word	gBattleStruct
.L1403:
	ldr	r2, .L1410
	ldrh	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x3]
.L1404:
	ldrh	r0, [r5]
	lsr	r2, r4, #0x18
	mov	r3, #0x0
	str	r3, [sp]
	mov	r4, sl
	lsr	r3, r4, #0x18
	bl	CalcTypeEffectivenessMultiplier
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L1400	@cond_branch
	ldr	r0, [r6]
	mov	r1, r9
	orr	r1, r1, r0
	mov	r9, r1
.L1400:
	add	r5, r5, #0x2
	add	r6, r6, #0x4
	mov	r0, r8
	add	r0, r0, #0xc
	cmp	r6, r0
	ble	.L1401	@cond_branch
	mov	r0, #0x0
	mov	r4, r9
	cmp	r4, #0
	bne	.L1407	@cond_branch
	mov	r0, #0x1
.L1407:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1411:
	.align	2, 0
.L1410:
	.word	gBattleMoves
.Lfe141:
	.size	 MovesWithSplitUnusable,.Lfe141-MovesWithSplitUnusable
	.align	2, 0
	.type	 Cmd_if_physical_moves_unusable,function
	.thumb_func
Cmd_if_physical_moves_unusable:
	push	{r4, r5, lr}
	ldr	r5, .L1415
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x2]
	bl	BattleAI_GetWantedBattler
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	mov	r2, #0x0
	bl	MovesWithSplitUnusable
	cmp	r0, #0
	beq	.L1413	@cond_branch
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L1414
.L1416:
	.align	2, 0
.L1415:
	.word	gAIScriptPtr
.L1413:
	ldr	r0, [r5]
	add	r0, r0, #0x7
	str	r0, [r5]
.L1414:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe142:
	.size	 Cmd_if_physical_moves_unusable,.Lfe142-Cmd_if_physical_moves_unusable
	.align	2, 0
	.type	 Cmd_if_ai_can_go_down,function
	.thumb_func
Cmd_if_ai_can_go_down:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r4, .L1424
	ldrb	r0, [r4]
	mov	r1, #0x0
	mov	r2, #0xfd
	bl	CheckMoveLimitations
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r0, .L1424+0x4
	ldr	r1, [r0]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x3
	add	r0, r0, #0xc
	ldr	r1, [r1, #0x18]
	mov	r5, #0x0
	ldr	r6, .L1424+0x8
	ldr	r7, .L1424+0xc
	add	r4, r1, r0
	ldr	r0, .L1424+0x10
	mov	r9, r0
.L1421:
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L1420	@cond_branch
	cmp	r0, r9
	beq	.L1420	@cond_branch
	ldr	r0, .L1424+0x14
	lsl	r1, r5, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	mov	r1, r8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1420	@cond_branch
	ldrh	r0, [r4]
	ldr	r1, .L1424
	ldrb	r1, [r1]
	ldrb	r2, [r6]
	bl	AI_CalcDamage
	ldr	r3, .L1424+0x18
	ldrb	r2, [r6]
	mov	r1, #0x5c
	mul	r1, r1, r2
	add	r1, r1, r3
	ldrh	r1, [r1, #0x2a]
	cmp	r0, r1
	blt	.L1420	@cond_branch
	ldr	r2, [r7]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r7]
	b	.L1417
.L1425:
	.align	2, 0
.L1424:
	.word	gBattlerTarget
	.word	gBattleResources
	.word	sBattler_AI
	.word	gAIScriptPtr
	.word	0xffff
	.word	gBitTable
	.word	gBattleMons
.L1420:
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L1421	@cond_branch
	ldr	r1, .L1426
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L1417:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1427:
	.align	2, 0
.L1426:
	.word	gAIScriptPtr
.Lfe143:
	.size	 Cmd_if_ai_can_go_down,.Lfe143-Cmd_if_ai_can_go_down
	.align	2, 0
	.type	 Cmd_if_cant_use_belch,function
	.thumb_func
Cmd_if_cant_use_belch:
	push	{r4, lr}
	ldr	r4, .L1431
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1431+0x4
	ldr	r2, [r1]
	mov	r1, #0x1
	and	r1, r1, r0
	ldr	r3, .L1431+0x8
	add	r2, r2, r3
	add	r2, r2, r1
	ldrb	r2, [r2]
	ldr	r3, .L1431+0xc
	ldr	r1, .L1431+0x10
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L1429	@cond_branch
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
	b	.L1430
.L1432:
	.align	2, 0
.L1431:
	.word	gAIScriptPtr
	.word	gBattleStruct
	.word	0x2b6
	.word	gBitTable
	.word	gBattlerPartyIndexes
.L1429:
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
.L1430:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe144:
	.size	 Cmd_if_cant_use_belch,.Lfe144-Cmd_if_cant_use_belch
	.align	2, 0
	.type	 Cmd_if_has_move_with_type,function
	.thumb_func
Cmd_if_has_move_with_type:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L1445
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	GetMovesArray
	mov	r6, #0x0
	ldr	r7, .L1445+0x4
	add	r5, r0, #0
	lsl	r4, r4, #0x18
.L1437:
	ldrh	r0, [r5]
	cmp	r0, #0
	beq	.L1436	@cond_branch
	lsr	r1, r4, #0x18
	bl	SetTypeBeforeUsingMove
	ldr	r0, .L1445+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x12]
	cmp	r0, #0
	beq	.L1439	@cond_branch
	mov	r1, #0x3f
	and	r1, r1, r0
	b	.L1440
.L1446:
	.align	2, 0
.L1445:
	.word	gAIScriptPtr
	.word	gBattleMoves
	.word	gBattleStruct
.L1439:
	ldrh	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrb	r1, [r0, #0x3]
.L1440:
	ldr	r0, .L1447
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x2]
	cmp	r1, r0
	beq	.L1435	@cond_branch
.L1436:
	add	r5, r5, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	bls	.L1437	@cond_branch
.L1435:
	cmp	r6, #0x4
	bne	.L1443	@cond_branch
	ldr	r1, .L1447
	ldr	r0, [r1]
	add	r0, r0, #0x7
	str	r0, [r1]
	b	.L1444
.L1448:
	.align	2, 0
.L1447:
	.word	gAIScriptPtr
.L1443:
	ldr	r3, .L1449
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L1444:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1450:
	.align	2, 0
.L1449:
	.word	gAIScriptPtr
.Lfe145:
	.size	 Cmd_if_has_move_with_type,.Lfe145-Cmd_if_has_move_with_type
	.align	2, 0
	.type	 Cmd_if_has_move_with_flag,function
	.thumb_func
Cmd_if_has_move_with_flag:
	push	{r4, r5, r6, lr}
	ldr	r4, .L1458
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetMovesArray
	ldr	r2, [r4]
	ldrb	r3, [r2, #0x2]
	ldrb	r1, [r2, #0x3]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	ldrb	r1, [r2, #0x4]
	lsl	r1, r1, #0x10
	orr	r3, r3, r1
	ldrb	r1, [r2, #0x5]
	lsl	r1, r1, #0x18
	orr	r3, r3, r1
	mov	r5, #0x0
	ldr	r6, .L1458+0x4
	add	r2, r0, #0
.L1455:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L1454	@cond_branch
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldr	r0, [r1]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L1454	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x6]
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1451
.L1459:
	.align	2, 0
.L1458:
	.word	gAIScriptPtr
	.word	gBattleMoves+0xc
.L1454:
	add	r2, r2, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	bls	.L1455	@cond_branch
	ldr	r1, .L1460
	ldr	r0, [r1]
	add	r0, r0, #0xa
	str	r0, [r1]
.L1451:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1461:
	.align	2, 0
.L1460:
	.word	gAIScriptPtr
.Lfe146:
	.size	 Cmd_if_has_move_with_flag,.Lfe146-Cmd_if_has_move_with_flag
	.align	2, 0
	.type	 Cmd_if_no_move_used,function
	.thumb_func
Cmd_if_no_move_used:
	push	{r4, r5, lr}
	ldr	r5, .L1472
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	bne	.L1463	@cond_branch
	mov	r3, #0x0
	lsl	r1, r4, #0x3
	ldr	r0, .L1472+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0xc
	ldr	r4, .L1472+0x8
	add	r0, r1, r0
.L1467:
	ldrh	r2, [r0]
	cmp	r2, #0
	beq	.L1466	@cond_branch
	cmp	r2, r4
	bne	.L1471	@cond_branch
.L1466:
	add	r0, r0, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	bls	.L1467	@cond_branch
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L1462
.L1473:
	.align	2, 0
.L1472:
	.word	gAIScriptPtr
	.word	gBattleResources
	.word	0xffff
.L1471:
.L1463:
	ldr	r0, [r5]
	add	r0, r0, #0x6
	str	r0, [r5]
.L1462:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe147:
	.size	 Cmd_if_no_move_used,.Lfe147-Cmd_if_no_move_used
	.align	2, 0
	.type	 Cmd_if_battler_absent,function
	.thumb_func
Cmd_if_battler_absent:
	push	{r4, lr}
	ldr	r4, .L1477
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.L1475	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1476
.L1478:
	.align	2, 0
.L1477:
	.word	gAIScriptPtr
.L1475:
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
.L1476:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe148:
	.size	 Cmd_if_battler_absent,.Lfe148-Cmd_if_battler_absent
	.align	2, 0
	.type	 Cmd_is_grounded,function
	.thumb_func
Cmd_is_grounded:
	push	{r4, lr}
	ldr	r4, .L1482
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerGrounded
	cmp	r0, #0
	beq	.L1480	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1481
.L1483:
	.align	2, 0
.L1482:
	.word	gAIScriptPtr
.L1480:
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
.L1481:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe149:
	.size	 Cmd_is_grounded,.Lfe149-Cmd_is_grounded
	.align	2, 0
	.type	 Cmd_get_best_dmg_hp_percent,function
	.thumb_func
Cmd_get_best_dmg_hp_percent:
	push	{r4, r5, r6, r7, lr}
	mov	r3, #0x0
	ldr	r4, .L1491
	ldr	r5, .L1491+0x4
	ldr	r7, .L1491+0x8
	ldr	r6, .L1491+0xc
	ldr	r0, [r4]
	ldr	r2, [r0, #0x14]
	ldrb	r1, [r5]
	ldr	r0, .L1491+0x10
	ldrb	r0, [r0]
	lsl	r1, r1, #0x4
	lsl	r0, r0, #0x6
	add	r0, r0, #0x14
	add	r1, r1, r0
	add	r1, r1, r2
	mov	r2, #0x3
.L1488:
	ldr	r0, [r1]
	cmp	r0, r3
	ble	.L1487	@cond_branch
	add	r3, r0, #0
.L1487:
	add	r1, r1, #0x4
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L1488	@cond_branch
	ldr	r0, [r4]
	ldr	r4, [r0, #0x14]
	mov	r0, #0x64
	mul	r0, r0, r3
	ldrb	r2, [r5]
	mov	r1, #0x5c
	mul	r1, r1, r2
	add	r1, r1, r7
	ldrh	r1, [r1, #0x2e]
	bl	__divsi3
	str	r0, [r4, #0x8]
	ldr	r0, [r6]
	add	r0, r0, #0x1
	str	r0, [r6]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1492:
	.align	2, 0
.L1491:
	.word	gBattleResources
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gAIScriptPtr
	.word	sBattler_AI
.Lfe150:
	.size	 Cmd_get_best_dmg_hp_percent,.Lfe150-Cmd_get_best_dmg_hp_percent
	.align	2, 0
	.type	 Cmd_get_curr_dmg_hp_percent,function
	.thumb_func
Cmd_get_curr_dmg_hp_percent:
	push	{r4, lr}
	ldr	r0, .L1494
	ldr	r0, [r0]
	ldr	r4, [r0, #0x14]
	ldrb	r1, [r4, #0x1]
	lsl	r1, r1, #0x2
	ldr	r0, .L1494+0x4
	ldrb	r3, [r0]
	lsl	r0, r3, #0x4
	add	r1, r1, r0
	ldr	r0, .L1494+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r0, r4, #0
	add	r0, r0, #0x14
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r2, .L1494+0xc
	mov	r1, #0x5c
	mul	r1, r1, r3
	add	r1, r1, r2
	ldrh	r1, [r1, #0x2e]
	bl	__divsi3
	str	r0, [r4, #0x8]
	ldr	r1, .L1494+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1495:
	.align	2, 0
.L1494:
	.word	gBattleResources
	.word	gBattlerTarget
	.word	sBattler_AI
	.word	gBattleMons
	.word	gAIScriptPtr
.Lfe151:
	.size	 Cmd_get_curr_dmg_hp_percent,.Lfe151-Cmd_get_curr_dmg_hp_percent
	.align	2, 0
	.type	 Cmd_get_move_split_from_result,function
	.thumb_func
Cmd_get_move_split_from_result:
	push	{r4, lr}
	ldr	r4, .L1497
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0x8]
	bl	GetBattleMoveSplit
	ldr	r1, [r4]
	ldr	r1, [r1, #0x14]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [r1, #0x8]
	ldr	r1, .L1497+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1498:
	.align	2, 0
.L1497:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe152:
	.size	 Cmd_get_move_split_from_result,.Lfe152-Cmd_get_move_split_from_result
	.align	2, 0
	.type	 Cmd_get_considered_move_split,function
	.thumb_func
Cmd_get_considered_move_split:
	push	{r4, lr}
	ldr	r4, .L1500
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	ldrh	r0, [r0, #0x2]
	bl	GetBattleMoveSplit
	ldr	r1, [r4]
	ldr	r1, [r1, #0x14]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [r1, #0x8]
	ldr	r1, .L1500+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1501:
	.align	2, 0
.L1500:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe153:
	.size	 Cmd_get_considered_move_split,.Lfe153-Cmd_get_considered_move_split
	.align	2, 0
	.type	 Cmd_get_considered_move_target,function
	.thumb_func
Cmd_get_considered_move_target:
	ldr	r0, .L1503
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L1503+0x4
	ldrh	r1, [r3, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x7]
	str	r0, [r3, #0x8]
	ldr	r1, .L1503+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L1504:
	.align	2, 0
.L1503:
	.word	gBattleResources
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe154:
	.size	 Cmd_get_considered_move_target,.Lfe154-Cmd_get_considered_move_target
	.align	2, 0
	.type	 Cmd_compare_speeds,function
	.thumb_func
Cmd_compare_speeds:
	push	{r4, r5, lr}
	ldr	r5, .L1506
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x2]
	bl	BattleAI_GetWantedBattler
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	mov	r2, #0x1
	bl	GetWhoStrikesFirst
	ldr	r1, .L1506+0x4
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [r1, #0x8]
	ldr	r0, [r5]
	add	r0, r0, #0x3
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1507:
	.align	2, 0
.L1506:
	.word	gAIScriptPtr
	.word	gBattleResources
.Lfe155:
	.size	 Cmd_compare_speeds,.Lfe155-Cmd_compare_speeds
	.align	2, 0
	.type	 FindMoveUsedXTurnsAgo,function
	.thumb_func
FindMoveUsedXTurnsAgo:
	push	{r4, r5, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	ldr	r1, .L1515
	ldr	r0, [r1]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0x44
	add	r0, r0, r5
	ldrb	r2, [r0]
	mov	r3, #0x0
	cmp	r3, r4
	bcs	.L1510	@cond_branch
.L1512:
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L1511	@cond_branch
	mov	r2, #0x2
.L1511:
	add	r3, r3, #0x1
	cmp	r3, r4
	bcc	.L1512	@cond_branch
.L1510:
	ldr	r0, [r1]
	ldr	r1, [r0, #0x18]
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	add	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r1, r1, #0x2c
	add	r1, r1, r0
	ldrh	r0, [r1]
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L1516:
	.align	2, 0
.L1515:
	.word	gBattleResources
.Lfe156:
	.size	 FindMoveUsedXTurnsAgo,.Lfe156-FindMoveUsedXTurnsAgo
	.align	2, 0
	.type	 Cmd_is_wakeup_turn,function
	.thumb_func
Cmd_is_wakeup_turn:
	push	{r4, lr}
	ldr	r0, .L1520
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L1520+0x4
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r4, [r0]
	mov	r0, #0x7
	and	r4, r4, r0
	cmp	r4, #0x1
	bne	.L1518	@cond_branch
	add	r0, r2, #0
	mov	r1, #0x2
	bl	FindMoveUsedXTurnsAgo
	cmp	r0, #0x9c
	bne	.L1518	@cond_branch
	ldr	r0, .L1520+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	str	r4, [r0, #0x8]
	b	.L1519
.L1521:
	.align	2, 0
.L1520:
	.word	gAIScriptPtr
	.word	gBattleMons
	.word	gBattleResources
.L1518:
	ldr	r0, .L1522
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x0
	str	r0, [r1, #0x8]
.L1519:
	ldr	r1, .L1522+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1523:
	.align	2, 0
.L1522:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe157:
	.size	 Cmd_is_wakeup_turn,.Lfe157-Cmd_is_wakeup_turn
	.align	2, 0
	.type	 Cmd_if_has_move_with_accuracy_lt,function
	.thumb_func
Cmd_if_has_move_with_accuracy_lt:
	push	{r4, r5, lr}
	ldr	r4, .L1533
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [r4]
	ldrb	r4, [r1, #0x2]
	bl	GetMovesArray
	mov	r3, #0x0
	ldr	r5, .L1533+0x4
	add	r2, r0, #0
.L1528:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L1527	@cond_branch
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrh	r0, [r1]
	cmp	r0, #0x26
	beq	.L1527	@cond_branch
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0x1
	bls	.L1527	@cond_branch
	cmp	r0, r4
	bcc	.L1526	@cond_branch
.L1527:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	bls	.L1528	@cond_branch
.L1526:
	cmp	r3, #0x4
	bne	.L1531	@cond_branch
	ldr	r1, .L1533
	ldr	r0, [r1]
	add	r0, r0, #0x7
	str	r0, [r1]
	b	.L1532
.L1534:
	.align	2, 0
.L1533:
	.word	gAIScriptPtr
	.word	gBattleMoves
.L1531:
	ldr	r3, .L1535
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L1532:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1536:
	.align	2, 0
.L1535:
	.word	gAIScriptPtr
.Lfe158:
	.size	 Cmd_if_has_move_with_accuracy_lt,.Lfe158-Cmd_if_has_move_with_accuracy_lt
.text
	.align	2, 0

