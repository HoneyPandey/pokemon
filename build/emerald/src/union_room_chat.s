@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sChat,object
	.size	 sChat,4
sChat:
	.word	0x0
	.align	2, 0
	.type	 sDisplay,object
	.size	 sDisplay,4
sDisplay:
	.word	0x0
	.align	2, 0
	.type	 sSprites,object
	.size	 sSprites,4
sSprites:
	.word	0x0
	.section .rodata
	.align	2, 0
	.type	 sChatMainFunctions,object
sChatMainFunctions:
	.word	Chat_Join
	.word	Chat_HandleInput
	.word	Chat_Switch
	.word	Chat_AskQuitChatting
	.word	Chat_SendMessage
	.word	Chat_Register
	.word	Chat_Exit
	.word	Chat_Drop
	.word	Chat_Disbanded
	.word	Chat_SaveAndExit
	.size	 sChatMainFunctions,40
	.type	 sKeyboardPageMaxRow,object
	.size	 sKeyboardPageMaxRow,4
sKeyboardPageMaxRow:
	.byte	0x9
	.byte	0x9
	.byte	0x9
	.byte	0x9
	.type	 sCaseToggleTable,object
	.size	 sCaseToggleTable,256
sCaseToggleTable:
	.space	1
	.byte	0x16
	.byte	0x17
	.byte	0x68
	.byte	0x19
	.byte	0x1a
	.byte	0x1b
	.byte	0x1c
	.byte	0x1d
	.byte	0x1e
	.space	1
	.byte	0x20
	.byte	0x21
	.byte	0x22
	.byte	0x23
	.byte	0x24
	.byte	0x25
	.byte	0x26
	.byte	0x27
	.byte	0x28
	.byte	0x29
	.byte	0x15
	.byte	0x1
	.byte	0x2
	.space	1
	.byte	0x4
	.byte	0x5
	.byte	0x6
	.byte	0x7
	.byte	0x8
	.byte	0x9
	.space	1
	.byte	0xb
	.byte	0xc
	.byte	0xd
	.byte	0xe
	.byte	0xf
	.byte	0x10
	.byte	0x11
	.byte	0x12
	.byte	0x13
	.byte	0x14
	.byte	0x2a
	.byte	0x2b
	.byte	0x2c
	.byte	0x2d
	.space	7
	.byte	0x35
	.byte	0x36
	.space	28
	.byte	0x53
	.byte	0x54
	.byte	0x55
	.byte	0x56
	.space	3
	.byte	0x6f
	.byte	0x5b
	.byte	0x5c
	.byte	0x5d
	.space	10
	.byte	0x3
	.space	6
	.byte	0x5a
	.space	20
	.byte	0x84
	.byte	0x85
	.byte	0x86
	.space	25
	.byte	0xa0
	.byte	0xa1
	.byte	0xa2
	.byte	0xa3
	.byte	0xa4
	.byte	0xa5
	.byte	0xa6
	.byte	0xa7
	.byte	0xa8
	.byte	0xa9
	.byte	0xaa
	.byte	0xab
	.byte	0xac
	.byte	0xad
	.byte	0xae
	.byte	0xaf
	.byte	0xb0
	.byte	0xb1
	.byte	0xb2
	.byte	0xb3
	.byte	0xb4
	.byte	0xb5
	.byte	0xb6
	.byte	0xb7
	.byte	0xb8
	.byte	0xb9
	.byte	0xba
	.byte	0xd5
	.byte	0xd6
	.byte	0xd7
	.byte	0xd8
	.byte	0xd9
	.byte	0xda
	.byte	0xdb
	.byte	0xdc
	.byte	0xdd
	.byte	0xde
	.byte	0xdf
	.byte	0xe0
	.byte	0xe1
	.byte	0xe2
	.byte	0xe3
	.byte	0xe4
	.byte	0xe5
	.byte	0xe6
	.byte	0xe7
	.byte	0xe8
	.byte	0xe9
	.byte	0xea
	.byte	0xeb
	.byte	0xec
	.byte	0xed
	.byte	0xee
	.byte	0xbb
	.byte	0xbc
	.byte	0xbd
	.byte	0xbe
	.byte	0xbf
	.byte	0xc0
	.byte	0xc1
	.byte	0xc2
	.byte	0xc3
	.byte	0xc4
	.byte	0xc5
	.byte	0xc6
	.byte	0xc7
	.byte	0xc8
	.byte	0xc9
	.byte	0xca
	.byte	0xcb
	.byte	0xcc
	.byte	0xcd
	.byte	0xce
	.byte	0xcf
	.byte	0xd0
	.byte	0xd1
	.byte	0xd2
	.byte	0xd3
	.byte	0xd4
	.byte	0xef
	.byte	0xf0
	.byte	0xf4
	.byte	0xf5
	.byte	0xf6
	.byte	0xf1
	.byte	0xf2
	.byte	0xf3
	.space	9
	.align	2, 0
	.type	 sUnionRoomKeyboardText,object
	.size	 sUnionRoomKeyboardText,120
sUnionRoomKeyboardText:
	.word	gText_UnionRoomChatKeyboard_ABCDE
	.word	gText_UnionRoomChatKeyboard_FGHIJ
	.word	gText_UnionRoomChatKeyboard_KLMNO
	.word	gText_UnionRoomChatKeyboard_PQRST
	.word	gText_UnionRoomChatKeyboard_UVWXY
	.word	gText_UnionRoomChatKeyboard_Z
	.word	gText_UnionRoomChatKeyboard_01234Upper
	.word	gText_UnionRoomChatKeyboard_56789Upper
	.word	gText_UnionRoomChatKeyboard_PunctuationUpper
	.word	gText_UnionRoomChatKeyboard_SymbolsUpper
	.word	gText_UnionRoomChatKeyboard_abcde
	.word	gText_UnionRoomChatKeyboard_fghij
	.word	gText_UnionRoomChatKeyboard_klmno
	.word	gText_UnionRoomChatKeyboard_pqrst
	.word	gText_UnionRoomChatKeyboard_uvwxy
	.word	gText_UnionRoomChatKeyboard_z
	.word	gText_UnionRoomChatKeyboard_01234Lower
	.word	gText_UnionRoomChatKeyboard_56789Lower
	.word	gText_UnionRoomChatKeyboard_PunctuationLower
	.word	gText_UnionRoomChatKeyboard_SymbolsLower
	.word	gText_UnionRoomChatKeyboard_Emoji1
	.word	gText_UnionRoomChatKeyboard_Emoji2
	.word	gText_UnionRoomChatKeyboard_Emoji3
	.word	gText_UnionRoomChatKeyboard_Emoji4
	.word	gText_UnionRoomChatKeyboard_Emoji5
	.word	gText_UnionRoomChatKeyboard_Emoji6
	.word	gText_UnionRoomChatKeyboard_Emoji7
	.word	gText_UnionRoomChatKeyboard_Emoji8
	.word	gText_UnionRoomChatKeyboard_Emoji9
	.word	gText_UnionRoomChatKeyboard_Emoji10
	.align	1, 0
	.type	 sUnk_Palette1,object
sUnk_Palette1:
	.short	0x0
	.short	0x0
	.short	0x7fff
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sUnk_Palette1,32
	.align	1, 0
	.type	 sUnk_Palette2,object
sUnk_Palette2:
	.short	0x0
	.short	0x7fde
	.short	0x0
	.short	0x7339
	.short	0x346
	.short	0x6b9b
	.short	0x7c00
	.short	0x6f59
	.short	0x1f
	.short	0x635b
	.short	0x2ff
	.short	0x6f9c
	.short	0x6318
	.short	0x1085
	.short	0x0
	.short	0x1ce7
	.size	 sUnk_Palette2,32
	.align	2, 0
	.type	 sBgTemplates,object
	.size	 sBgTemplates,16
sBgTemplates:
	.byte	0x70
	.byte	0x0
	.byte	0x0
	.space	1
	.byte	0xfd
	.byte	0x11
	.byte	0x0
	.space	1
	.byte	0x7a
	.byte	0x21
	.byte	0x0
	.space	1
	.byte	0xf7
	.byte	0x70
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 sWinTemplates,object
sWinTemplates:
	.byte	0x3
	.byte	0x8
	.byte	0x1
	.byte	0x15
	.byte	0x13
	.byte	0xf
	.short	0x1
	.byte	0x1
	.byte	0x9
	.byte	0x12
	.byte	0xf
	.byte	0x2
	.byte	0xc
	.short	0x7a
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x6
	.byte	0xf
	.byte	0x7
	.short	0x20
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x7
	.byte	0x9
	.byte	0xe
	.short	0x13
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sWinTemplates,40
	.align	2, 0
	.type	 sDisplaySubtasks,object
sDisplaySubtasks:
	.short	0x0
	.space	2
	.word	Display_LoadGfx
	.short	0x3
	.space	2
	.word	Display_ShowKeyboardSwapMenu
	.short	0x4
	.space	2
	.word	Display_HideKeyboardSwapMenu
	.short	0x5
	.space	2
	.word	Display_SwitchPages
	.short	0x1
	.space	2
	.word	Display_MoveKeyboardCursor
	.short	0x6
	.space	2
	.word	Display_AskQuitChatting
	.short	0x7
	.space	2
	.word	Display_DestroyYesNoDialog
	.short	0x8
	.space	2
	.word	Display_UpdateMessageBuffer
	.short	0x9
	.space	2
	.word	Display_AskRegisterText
	.short	0xa
	.space	2
	.word	Display_CancelRegister
	.short	0xb
	.space	2
	.word	Display_ReturnToKeyboard
	.short	0xc
	.space	2
	.word	Display_ScrollChat
	.short	0x2
	.space	2
	.word	Display_AnimateKeyboardCursor
	.short	0xd
	.space	2
	.word	Display_PrintInputText
	.short	0x12
	.space	2
	.word	Display_PrintExitingChat
	.short	0x13
	.space	2
	.word	Display_PrintLeaderLeft
	.short	0xe
	.space	2
	.word	Display_AskSave
	.short	0xf
	.space	2
	.word	Display_AskOverwriteSave
	.short	0x10
	.space	2
	.word	Display_PrintSavingDontTurnOff
	.short	0x11
	.space	2
	.word	Display_PrintSavedTheGame
	.short	0x14
	.space	2
	.word	Display_AskConfirmLeaderLeave
	.size	 sDisplaySubtasks,168
	.align	2, 0
	.type	 sDisplayStdMessages,object
sDisplayStdMessages:
	.word	gText_QuitChatting
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	1
	.word	gText_RegisterTextWhere
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	1
	.word	gText_RegisterTextHere
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	1
	.word	gText_InputText
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	1
	.word	gText_ExitingChat
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	1
	.word	gText_LeaderLeftEndingChat
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.space	1
	.word	gText_RegisteredTextChangedOKToSave
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.space	1
	.word	gText_AlreadySavedFile_Chat
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.space	1
	.word	gText_SavingDontTurnOff_Chat
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.space	1
	.word	gText_PlayerSavedGame_Chat
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.space	1
	.word	gText_IfLeaderLeavesChatEnds
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.space	1
	.size	 sDisplayStdMessages,132
	.type	 sText_Ellipsis,object
sText_Ellipsis:
	.byte	0xb0
	.byte	0xff
	.size	 sText_Ellipsis,2
	.align	2, 0
	.type	 sKeyboardPageTitleTexts,object
	.size	 sKeyboardPageTitleTexts,40
sKeyboardPageTitleTexts:
	.word	gText_Upper
	.word	0x0
	.word	gText_Lower
	.word	0x0
	.word	gText_Symbols
	.word	0x0
	.word	gText_Register2
	.word	0x0
	.word	gText_Exit2
	.word	0x0
	.align	1, 0
	.type	 sUnionRoomChatInterfacePal,object
sUnionRoomChatInterfacePal:
	.short	0x3313
	.short	0x18df
	.short	0x18d3
	.short	0x7d86
	.short	0x3000
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x7f9c
	.short	0x7f5a
	.short	0x56b5
	.short	0x39ce
	.short	0x7fff
	.short	0x2108
	.size	 sUnionRoomChatInterfacePal,32
	.align	2, 0
	.type	 sKeyboardCursorTiles,object
sKeyboardCursorTiles:
	.word	0x100010
	.word	-0xfffffc1
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xffe0f04
	.word	-0xffe0fff
	.word	0x5001f001
	.word	0xddd001
	.word	0x11d00ddd
	.word	0x21d00d11
	.word	-0x2ffdddf3
	.word	0x100f0021
	.word	0x1ff02d03
	.word	0x12222002
	.word	0x5000000d
	.word	0xffd203
	.word	-0xffe0ffd
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xcff18a0
	.word	0xb11ff60
	.word	0x1311ff
	.word	0x102170fb
	.word	0x11ff30f3
	.word	-0xfe00ff5
	.word	0x1f0ff01
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xf00fe10
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xffe0f01
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	0x1f0fc01
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0x2222fe80
	.word	0x1d00dd00
	.word	0x1d001111
	.word	0x220622
	.word	-0x2ffffde3
	.word	0x111e1003
	.word	0xd11100
	.word	0xd12222
	.word	-0xfdf8100
	.word	-0xfaf0ffd
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	0x1f0ff01
	.word	0x1f001f0
	.word	0x1a001f0
	.word	0x311efa0
	.word	0x10ff0b01
	.word	-0x7fe0af0c
	.word	0x110311eb
	.word	-0xfe16ff5
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xffe0f01
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	0x1f0ff01
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xf00fe10
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0x176509ff
	.word	0x32003f0
	.word	0x200be43
	.word	0x21000093
	.word	0x300227f
	.word	0x3100f00
	.word	0x1f0be87
	.word	0x1f001f0
	.word	-0xffe0f07
	.word	-0xffe0fff
	.word	0x22a1a001
	.word	-0x40f3ffee
	.word	0x50d20350
	.word	-0xfbfe8e3
	.word	-0xfba0ffd
	.word	-0xf84e01
	.word	-0xaf0cf0
	.word	0x71100b11
	.word	0x1f0a6f3
	.word	0x1f001f0
	.word	-0xffe0f01
	.word	-0x1ffe0fff
	.word	0x40f31001
	.word	-0x4ff4ee01
	.word	0x3f1ffa1
	.word	0x1f007f1
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xf00fe10
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xffe0f01
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0x75e575ff
	.word	0x601111d
	.word	-0x3199fd3e
	.word	0x300ffdd
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0x4368fe10
	.word	0x7100068
	.word	0x48a8203c
	.word	0x1f0a1f3
	.word	-0x6ffe0f01
	.word	0xbea7f7
	.word	-0x4fcfe05
	.word	-0xffe0f6a
	.word	0x1f0ff01
	.word	0x1f001f0
	.word	0x1d001f0
	.word	-0x10bf1cf0
	.word	0x11fffb10
	.word	-0xff4eefd
	.word	-0xffe0fd8
	.word	-0xffe0fff
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xffe0f20
	.word	0x14001
	.size	 sKeyboardCursorTiles,644
	.align	2, 0
	.type	 sTextEntryCursorTiles,object
sTextEntryCursorTiles:
	.word	0x4010
	.word	-0xfffffc8
	.word	0x3001f001
	.word	-0x222222ff
	.word	0x444d0d00
	.word	-0xf2bc
	.word	0x500f40ff
	.word	0x13
	.size	 sTextEntryCursorTiles,32
	.align	2, 0
	.type	 sTextEntryArrowTiles,object
sTextEntryArrowTiles:
	.word	0x4010
	.word	-0x4fffffe0
	.word	0xddd001
	.word	0x4429f000
	.word	-0x2bfcfff3
	.word	0xd440300
	.word	0xf080300
	.word	0xf444f0
	.word	-0xffff0f5
	.word	0x2dd0ff40
	.word	0x0
	.size	 sTextEntryArrowTiles,44
	.align	2, 0
	.type	 sRButtonGfxTiles,object
sRButtonGfxTiles:
	.word	0x8010
	.word	-0x5fffffd6
	.word	0x300f001
	.word	-0x12f9ff21
	.word	-0x20100000
	.word	-0x2220ff13
	.word	0x1c9080ed
	.word	0xfff
	.word	0xfddd
	.word	0xfddee00
	.word	-0x2212300
	.word	-0x2111f0e4
	.word	0x23100d00
	.word	0xdd0330
	.word	-0xff0
	.word	-0x12ffb040
	.word	-0x2d62223
	.word	-0x22d8ff23
	.word	-0xf900
	.word	-0x4f7fbef0
	.word	0x1
	.size	 sRButtonGfxTiles,84
	.align	2, 0
	.type	 sSpriteSheets,object
sSpriteSheets:
	.word	sKeyboardCursorTiles
	.short	0x1000
	.short	0x0
	.word	sTextEntryArrowTiles
	.short	0x40
	.short	0x1
	.word	sTextEntryCursorTiles
	.short	0x40
	.short	0x2
	.word	sRButtonGfxTiles
	.short	0x80
	.short	0x3
	.word	gUnionRoomChat_RButtonLabels
	.short	0x400
	.short	0x4
	.size	 sSpriteSheets,40
	.align	2, 0
	.type	 sSpritePalette,object
	.size	 sSpritePalette,8
sSpritePalette:
	.word	sUnionRoomChatInterfacePal
	.short	0x0
	.space	2
	.align	2, 0
	.type	 sOam_KeyboardCursor,object
	.size	 sOam_KeyboardCursor,8
sOam_KeyboardCursor:
	.space	1
	.byte	0x40
	.space	1
	.byte	0xc0
	.space	1
	.byte	0x4
	.space	2
	.align	2, 0
	.type	 sAnim_KeyboardCursor_Open,object
sAnim_KeyboardCursor_Open:
	.short	0x0
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_KeyboardCursor_Open,8
	.align	2, 0
	.type	 sAnim_KeyboardCursor_Closed,object
sAnim_KeyboardCursor_Closed:
	.short	0x20
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_KeyboardCursor_Closed,8
	.align	2, 0
	.type	 sAnim_KeyboardCursorWide_Open,object
sAnim_KeyboardCursorWide_Open:
	.short	0x40
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_KeyboardCursorWide_Open,8
	.align	2, 0
	.type	 sAnim_KeyboardCursorWide_Closed,object
sAnim_KeyboardCursorWide_Closed:
	.short	0x60
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_KeyboardCursorWide_Closed,8
	.align	2, 0
	.type	 sAnims_KeyboardCursor,object
sAnims_KeyboardCursor:
	.word	sAnim_KeyboardCursor_Open
	.word	sAnim_KeyboardCursor_Closed
	.word	sAnim_KeyboardCursorWide_Open
	.word	sAnim_KeyboardCursorWide_Closed
	.size	 sAnims_KeyboardCursor,16
	.align	2, 0
	.type	 sSpriteTemplate_KeyboardCursor,object
	.size	 sSpriteTemplate_KeyboardCursor,24
sSpriteTemplate_KeyboardCursor:
	.short	0x0
	.short	0x0
	.word	sOam_KeyboardCursor
	.word	sAnims_KeyboardCursor
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sOam_TextEntrySprite,object
	.size	 sOam_TextEntrySprite,8
sOam_TextEntrySprite:
	.space	1
	.byte	0x80
	.space	1
	.byte	0x0
	.space	1
	.byte	0x8
	.space	2
	.align	2, 0
	.type	 sSpriteTemplate_TextEntryCursor,object
	.size	 sSpriteTemplate_TextEntryCursor,24
sSpriteTemplate_TextEntryCursor:
	.short	0x2
	.short	0x0
	.word	sOam_TextEntrySprite
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_TextEntryCursor
	.align	2, 0
	.type	 sSpriteTemplate_TextEntryArrow,object
	.size	 sSpriteTemplate_TextEntryArrow,24
sSpriteTemplate_TextEntryArrow:
	.short	0x1
	.short	0x0
	.word	sOam_TextEntrySprite
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_TextEntryArrow
	.align	2, 0
	.type	 sOam_RButtonIcon,object
	.size	 sOam_RButtonIcon,8
sOam_RButtonIcon:
	.space	1
	.byte	0x0
	.space	1
	.byte	0x40
	.space	1
	.byte	0x8
	.space	2
	.align	2, 0
	.type	 sOam_RButtonLabel,object
	.size	 sOam_RButtonLabel,8
sOam_RButtonLabel:
	.space	1
	.byte	0x40
	.space	1
	.byte	0x80
	.space	1
	.byte	0x8
	.space	2
	.align	2, 0
	.type	 sAnim_ToggleCaseIcon,object
sAnim_ToggleCaseIcon:
	.short	0x0
	.byte	0x2
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_ToggleCaseIcon,8
	.align	2, 0
	.type	 sAnim_ToggleCaseIcon_Duplicate1,object
sAnim_ToggleCaseIcon_Duplicate1:
	.short	0x8
	.byte	0x2
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_ToggleCaseIcon_Duplicate1,8
	.align	2, 0
	.type	 sAnim_ToggleCaseIcon_Duplicate2,object
sAnim_ToggleCaseIcon_Duplicate2:
	.short	0x10
	.byte	0x2
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_ToggleCaseIcon_Duplicate2,8
	.align	2, 0
	.type	 sAnim_RegisterIcon,object
sAnim_RegisterIcon:
	.short	0x18
	.byte	0x2
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_RegisterIcon,8
	.align	2, 0
	.type	 sAnims_RButtonLabels,object
sAnims_RButtonLabels:
	.word	sAnim_ToggleCaseIcon
	.word	sAnim_ToggleCaseIcon_Duplicate1
	.word	sAnim_ToggleCaseIcon_Duplicate2
	.word	sAnim_RegisterIcon
	.size	 sAnims_RButtonLabels,16
	.align	2, 0
	.type	 sSpriteTemplate_RButtonIcon,object
	.size	 sSpriteTemplate_RButtonIcon,24
sSpriteTemplate_RButtonIcon:
	.short	0x3
	.short	0x0
	.word	sOam_RButtonIcon
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteTemplate_RButtonLabels,object
	.size	 sSpriteTemplate_RButtonLabels,24
sSpriteTemplate_RButtonLabels:
	.short	0x4
	.short	0x0
	.word	sOam_RButtonLabel
	.word	sAnims_RButtonLabels
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
.text
	.align	2, 0
	.globl	EnterUnionRoomChat
	.type	 EnterUnionRoomChat,function
	.thumb_func
EnterUnionRoomChat:
	push	{r4, lr}
	ldr	r4, .L3
	mov	r0, #0xde
	lsl	r0, r0, #0x1
	bl	Alloc
	str	r0, [r4]
	bl	InitUnionRoomChat
	ldr	r1, .L3+0x4
	mov	r0, #0x14
	strh	r0, [r1]
	mov	r0, #0x0
	bl	SetVBlankCallback
	ldr	r0, .L3+0x8
	bl	SetMainCallback2
	pop	{r4}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	sChat
	.word	gKeyRepeatStartDelay
	.word	CB2_LoadInterface
.Lfe1:
	.size	 EnterUnionRoomChat,.Lfe1-EnterUnionRoomChat
	.align	2, 0
	.type	 InitUnionRoomChat,function
	.thumb_func
InitUnionRoomChat:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	mov	r5, #0x0
	mov	r0, #0x0
	strh	r0, [r4, #0x4]
	strh	r0, [r4, #0x6]
	strb	r5, [r4, #0x10]
	strb	r5, [r4, #0x11]
	strb	r5, [r4, #0x12]
	strb	r5, [r4, #0x14]
	strb	r5, [r4, #0x15]
	strb	r5, [r4, #0x16]
	mov	r0, #0xff
	strb	r0, [r4, #0x1a]
	bl	GetLinkPlayerCount
	strb	r0, [r4, #0xd]
	bl	GetMultiplayerId
	strb	r0, [r4, #0x13]
	strb	r5, [r4, #0x17]
	strb	r5, [r4, #0x18]
	mov	r1, #0xc8
	lsl	r1, r1, #0x1
	add	r0, r4, r1
	bl	PrepareSendBuffer_Null
	ldr	r7, .L11
	ldr	r6, .L11+0x4
	add	r4, r4, #0xb9
	mov	r5, #0x9
.L9:
	ldr	r1, [r7]
	add	r1, r1, r6
	add	r0, r4, #0
	bl	StringCopy
	add	r6, r6, #0x15
	add	r4, r4, #0x15
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L9	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L12:
	.align	2, 0
.L11:
	.word	gSaveBlock1Ptr
	.word	0x3bb8
.Lfe2:
	.size	 InitUnionRoomChat,.Lfe2-InitUnionRoomChat
	.align	2, 0
	.type	 FreeUnionRoomChat,function
	.thumb_func
FreeUnionRoomChat:
	push	{r4, lr}
	ldr	r4, .L14
	ldr	r0, [r4]
	ldrb	r0, [r0, #0xe]
	bl	DestroyTask
	ldr	r0, [r4]
	ldrb	r0, [r0, #0xf]
	bl	DestroyTask
	ldr	r0, [r4]
	bl	Free
	pop	{r4}
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	sChat
.Lfe3:
	.size	 FreeUnionRoomChat,.Lfe3-FreeUnionRoomChat
	.align	2, 0
	.type	 CB2_LoadInterface,function
	.thumb_func
CB2_LoadInterface:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L27
	mov	r1, #0x87
	lsl	r1, r1, #0x3
	add	r6, r0, r1
	ldrb	r0, [r6]
	cmp	r0, #0x1
	beq	.L19	@cond_branch
	cmp	r0, #0x1
	bgt	.L25	@cond_branch
	cmp	r0, #0
	beq	.L18	@cond_branch
	b	.L17
.L28:
	.align	2, 0
.L27:
	.word	gMain
.L25:
	cmp	r0, #0x2
	beq	.L21	@cond_branch
	b	.L17
.L18:
	bl	ResetTasks
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	bl	TryAllocDisplay
	b	.L26
.L19:
	bl	RunDisplaySubtasks
	bl	IsDisplaySubtask0Active
	add	r5, r0, #0
	cmp	r5, #0
	bne	.L17	@cond_branch
	mov	r4, #0x1
	neg	r4, r4
	add	r0, r4, #0
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalettes
	str	r5, [sp]
	add	r0, r4, #0
	add	r1, r4, #0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r0, .L29
	bl	SetVBlankCallback
.L26:
	ldrb	r0, [r6]
	add	r0, r0, #0x1
	strb	r0, [r6]
	b	.L17
.L30:
	.align	2, 0
.L29:
	.word	VBlankCB_UnionRoomChatMain
.L21:
	bl	UpdatePaletteFade
	ldr	r0, .L31
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L17	@cond_branch
	ldr	r0, .L31+0x4
	bl	SetMainCallback2
	ldr	r0, .L31+0x8
	mov	r1, #0x8
	bl	CreateTask
	ldr	r4, .L31+0xc
	ldr	r1, [r4]
	strb	r0, [r1, #0xe]
	ldr	r0, .L31+0x10
	mov	r1, #0x7
	bl	CreateTask
	ldr	r1, [r4]
	strb	r0, [r1, #0xf]
	bl	LoadWirelessStatusIndicatorSpriteGfx
	mov	r0, #0xe8
	mov	r1, #0x96
	bl	CreateWirelessStatusIndicatorSprite
.L17:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L32:
	.align	2, 0
.L31:
	.word	gPaletteFade
	.word	CB2_UnionRoomChatMain
	.word	Task_HandlePlayerInput
	.word	sChat
	.word	Task_ReceiveChatMessage
.Lfe4:
	.size	 CB2_LoadInterface,.Lfe4-CB2_LoadInterface
	.align	2, 0
	.type	 VBlankCB_UnionRoomChatMain,function
	.thumb_func
VBlankCB_UnionRoomChatMain:
	push	{lr}
	bl	TransferPlttBuffer
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	ScanlineEffect_InitHBlankDmaTransfer
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 VBlankCB_UnionRoomChatMain,.Lfe5-VBlankCB_UnionRoomChatMain
	.align	2, 0
	.type	 CB2_UnionRoomChatMain,function
	.thumb_func
CB2_UnionRoomChatMain:
	push	{lr}
	bl	RunTasks
	bl	RunDisplaySubtasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 CB2_UnionRoomChatMain,.Lfe6-CB2_UnionRoomChatMain
	.align	2, 0
	.type	 Task_HandlePlayerInput,function
	.thumb_func
Task_HandlePlayerInput:
	push	{r4, lr}
	ldr	r4, .L44
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x17]
	cmp	r0, #0x2
	beq	.L38	@cond_branch
	cmp	r0, #0x2
	bgt	.L42	@cond_branch
	cmp	r0, #0x1
	beq	.L37	@cond_branch
	b	.L36
.L45:
	.align	2, 0
.L44:
	.word	sChat
.L42:
	cmp	r0, #0x3
	beq	.L39	@cond_branch
	b	.L36
.L37:
	mov	r0, #0x6
	b	.L43
.L38:
	mov	r0, #0x7
	b	.L43
.L39:
	mov	r0, #0x8
.L43:
	bl	SetChatFunction
	ldr	r1, [r4]
	mov	r0, #0x0
	strb	r0, [r1, #0x17]
.L36:
	ldr	r1, .L46
	ldr	r0, .L46+0x4
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	pop	{r4}
	pop	{r0}
	bx	r0
.L47:
	.align	2, 0
.L46:
	.word	sChatMainFunctions
	.word	sChat
.Lfe7:
	.size	 Task_HandlePlayerInput,.Lfe7-Task_HandlePlayerInput
	.align	2, 0
	.type	 Chat_Join,function
	.thumb_func
Chat_Join:
	push	{r4, lr}
	ldr	r4, .L59
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x6]
	cmp	r1, #0x1
	beq	.L51	@cond_branch
	cmp	r1, #0x1
	bgt	.L58	@cond_branch
	cmp	r1, #0
	beq	.L50	@cond_branch
	b	.L49
.L60:
	.align	2, 0
.L59:
	.word	sChat
.L58:
	cmp	r1, #0x2
	beq	.L54	@cond_branch
	b	.L49
.L50:
	mov	r1, #0xc8
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	bl	PrepareSendBuffer_Join
	ldr	r1, [r4]
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
.L51:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L49	@cond_branch
	bl	sub_8011A9C
	cmp	r0, #0
	bne	.L49	@cond_branch
	ldr	r4, .L61
	ldr	r1, [r4]
	mov	r0, #0xc8
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	mov	r0, #0x0
	mov	r2, #0x28
	bl	SendBlock
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L49	@cond_branch
	ldr	r1, [r4]
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
	b	.L49
.L62:
	.align	2, 0
.L61:
	.word	sChat
.L54:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L49	@cond_branch
	mov	r0, #0x1
	bl	SetChatFunction
.L49:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 Chat_Join,.Lfe8-Chat_Join
	.align	2, 0
	.type	 Chat_HandleInput,function
	.thumb_func
Chat_HandleInput:
	push	{r4, r5, lr}
	ldr	r5, .L88
	ldr	r3, [r5]
	ldrh	r0, [r3, #0x6]
	cmp	r0, #0
	beq	.L65	@cond_branch
	cmp	r0, #0x1
	beq	.L82	@cond_branch
	b	.L64
.L89:
	.align	2, 0
.L88:
	.word	sChat
.L65:
	ldr	r1, .L90
	ldrh	r2, [r1, #0x2e]
	mov	r0, #0x8
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L66	@cond_branch
	ldrb	r0, [r3, #0x15]
	cmp	r0, #0
	beq	.L64	@cond_branch
	mov	r0, #0x4
	bl	SetChatFunction
	b	.L64
.L91:
	.align	2, 0
.L90:
	.word	gMain
.L66:
	mov	r0, #0x4
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L69	@cond_branch
	mov	r0, #0x2
	bl	SetChatFunction
	b	.L64
.L69:
	ldrh	r1, [r1, #0x30]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L71	@cond_branch
	ldrb	r0, [r3, #0x15]
	cmp	r0, #0
	beq	.L72	@cond_branch
	bl	DeleteLastMessageCharacter
	mov	r0, #0x8
	mov	r1, #0x0
	bl	StartDisplaySubtask
	ldr	r1, [r5]
	mov	r0, #0x1
	strh	r0, [r1, #0x6]
	b	.L64
.L72:
	mov	r0, #0x3
	bl	SetChatFunction
	b	.L64
.L71:
	mov	r4, #0x1
	add	r0, r4, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L75	@cond_branch
	bl	AppendTextToMessage
	mov	r0, #0x8
	mov	r1, #0x0
	bl	StartDisplaySubtask
	mov	r0, #0x2
	mov	r1, #0x1
	b	.L86
.L75:
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L77	@cond_branch
	ldrb	r0, [r3, #0x10]
	cmp	r0, #0x3
	beq	.L78	@cond_branch
	bl	SwitchCaseOfLastMessageCharacter
	mov	r0, #0x8
	b	.L87
.L78:
	mov	r0, #0x5
	bl	SetChatFunction
	b	.L64
.L77:
	bl	HandleDPadInput
	cmp	r0, #0
	beq	.L64	@cond_branch
	mov	r0, #0x1
.L87:
	mov	r1, #0x0
.L86:
	bl	StartDisplaySubtask
	ldr	r0, [r5]
	strh	r4, [r0, #0x6]
	b	.L64
.L82:
	mov	r0, #0x0
	bl	IsDisplaySubtaskActive
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	bl	IsDisplaySubtaskActive
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r4, #0
	bne	.L64	@cond_branch
	cmp	r1, #0
	bne	.L64	@cond_branch
	ldr	r0, [r5]
	strh	r1, [r0, #0x6]
.L64:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 Chat_HandleInput,.Lfe9-Chat_HandleInput
	.align	2, 0
	.type	 Chat_Switch,function
	.thumb_func
Chat_Switch:
	push	{r4, r5, r6, lr}
	ldr	r0, .L115
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x6]
	cmp	r0, #0x4
	bls	.LCB640
	b	.L92	@long jump
.LCB640:
	lsl	r0, r0, #0x2
	ldr	r1, .L115+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L116:
	.align	2, 0
.L115:
	.word	sChat
	.word	.L111
	.align	2, 0
	.align	2, 0
.L111:
	.word	.L94
	.word	.L95
	.word	.L97
	.word	.L107
	.word	.L109
.L94:
	mov	r0, #0x3
	mov	r1, #0x0
	bl	StartDisplaySubtask
	b	.L114
.L95:
	mov	r0, #0x0
	bl	IsDisplaySubtaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L92	@cond_branch
.L114:
	ldr	r0, .L117
	ldr	r1, [r0]
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
	b	.L92
.L118:
	.align	2, 0
.L117:
	.word	sChat
.L97:
	bl	Menu_ProcessInput
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x8
	lsr	r6, r0, #0x10
	asr	r4, r0, #0x10
	mov	r0, #0x2
	neg	r0, r0
	cmp	r4, r0
	beq	.L102	@cond_branch
	add	r0, r0, #0x1
	cmp	r4, r0
	beq	.L104	@cond_branch
	mov	r0, #0x4
	mov	r1, #0x0
	bl	StartDisplaySubtask
	ldr	r5, .L119
	ldr	r2, [r5]
	ldrb	r0, [r2, #0x10]
	cmp	r0, r4
	beq	.L113	@cond_branch
	cmp	r4, #0x3
	ble	.L106	@cond_branch
	b	.L113
.L120:
	.align	2, 0
.L119:
	.word	sChat
.L102:
	ldr	r0, .L121
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L92	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	bl	Menu_MoveCursor
	b	.L92
.L122:
	.align	2, 0
.L121:
	.word	gMain
.L104:
	mov	r0, #0x4
	mov	r1, #0x0
	bl	StartDisplaySubtask
.L113:
	ldr	r0, .L123
	ldr	r1, [r0]
	mov	r0, #0x3
	strh	r0, [r1, #0x6]
	b	.L92
.L124:
	.align	2, 0
.L123:
	.word	sChat
.L106:
	mov	r1, #0x0
	strb	r1, [r2, #0x11]
	ldr	r0, [r5]
	strb	r1, [r0, #0x12]
	mov	r0, #0x5
	mov	r1, #0x1
	bl	StartDisplaySubtask
	ldr	r0, [r5]
	strb	r6, [r0, #0x10]
	ldr	r1, [r5]
	mov	r0, #0x4
	strh	r0, [r1, #0x6]
	b	.L92
.L107:
	mov	r0, #0x0
	bl	IsDisplaySubtaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L92	@cond_branch
	mov	r0, #0x1
	bl	SetChatFunction
	b	.L92
.L109:
	mov	r0, #0x0
	bl	IsDisplaySubtaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L92	@cond_branch
	mov	r0, #0x1
	bl	IsDisplaySubtaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L92	@cond_branch
	mov	r0, #0x1
	bl	SetChatFunction
.L92:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 Chat_Switch,.Lfe10-Chat_Switch
	.align	2, 0
	.type	 Chat_AskQuitChatting,function
	.thumb_func
Chat_AskQuitChatting:
	push	{r4, r5, lr}
	ldr	r1, .L167
	ldr	r0, [r1]
	ldrh	r0, [r0, #0x6]
	add	r2, r1, #0
	cmp	r0, #0xa
	bls	.LCB830
	b	.L126	@long jump
.LCB830:
	lsl	r0, r0, #0x2
	ldr	r1, .L167+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L168:
	.align	2, 0
.L167:
	.word	sChat
	.word	.L163
	.align	2, 0
	.align	2, 0
.L163:
	.word	.L127
	.word	.L128
	.word	.L130
	.word	.L140
	.word	.L154
	.word	.L159
	.word	.L126
	.word	.L126
	.word	.L146
	.word	.L142
	.word	.L144
.L127:
	mov	r0, #0x6
	mov	r1, #0x0
	bl	StartDisplaySubtask
	ldr	r0, .L169
	ldr	r1, [r0]
	mov	r0, #0x1
	strh	r0, [r1, #0x6]
	b	.L126
.L170:
	.align	2, 0
.L169:
	.word	sChat
.L128:
	mov	r0, #0x0
	bl	IsDisplaySubtaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB872
	b	.L126	@long jump
.LCB872:
	ldr	r0, .L171
	ldr	r1, [r0]
	mov	r0, #0x2
	strh	r0, [r1, #0x6]
	b	.L126
.L172:
	.align	2, 0
.L171:
	.word	sChat
.L130:
	bl	ProcessMenuInput
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L134	@cond_branch
	cmp	r1, #0
	bgt	.L139	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L149	@cond_branch
	b	.L126
.L139:
	cmp	r1, #0x1
	beq	.LCB905
	b	.L126	@long jump
.LCB905:
	b	.L149
.L134:
	ldr	r4, .L173
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0
	bne	.L135	@cond_branch
	mov	r2, #0xc8
	lsl	r2, r2, #0x1
	add	r0, r1, r2
	bl	PrepareSendBuffer_Disband
	mov	r0, #0x7
	mov	r1, #0x0
	bl	StartDisplaySubtask
	ldr	r1, [r4]
	mov	r0, #0x9
	strh	r0, [r1, #0x6]
	b	.L126
.L174:
	.align	2, 0
.L173:
	.word	sChat
.L135:
	mov	r2, #0xc8
	lsl	r2, r2, #0x1
	add	r0, r1, r2
	bl	PrepareSendBuffer_Leave
	ldr	r1, [r4]
	mov	r0, #0x4
	strh	r0, [r1, #0x6]
	b	.L126
.L140:
	mov	r0, #0x0
	bl	IsDisplaySubtaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB959
	b	.L126	@long jump
.LCB959:
	mov	r0, #0x1
	bl	SetChatFunction
	b	.L126
.L142:
	mov	r0, #0x0
	bl	IsDisplaySubtaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB971
	b	.L126	@long jump
.LCB971:
	mov	r0, #0x14
	mov	r1, #0x0
	bl	StartDisplaySubtask
	ldr	r0, .L175
	ldr	r1, [r0]
	mov	r0, #0xa
	strh	r0, [r1, #0x6]
	b	.L126
.L176:
	.align	2, 0
.L175:
	.word	sChat
.L144:
	mov	r0, #0x0
	bl	IsDisplaySubtaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB995
	b	.L126	@long jump
.LCB995:
	ldr	r0, .L177
	ldr	r1, [r0]
	mov	r0, #0x8
	strh	r0, [r1, #0x6]
	b	.L126
.L178:
	.align	2, 0
.L177:
	.word	sChat
.L146:
	bl	ProcessMenuInput
	lsl	r0, r0, #0x18
	asr	r5, r0, #0x18
	cmp	r5, #0
	beq	.L150	@cond_branch
	cmp	r5, #0
	bgt	.L153	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r5, r0
	beq	.L149	@cond_branch
	b	.L126
.L153:
	cmp	r5, #0x1
	bne	.L126	@cond_branch
.L149:
	mov	r0, #0x7
	mov	r1, #0x0
	bl	StartDisplaySubtask
	ldr	r0, .L179
	ldr	r1, [r0]
	mov	r0, #0x3
	strh	r0, [r1, #0x6]
	b	.L126
.L180:
	.align	2, 0
.L179:
	.word	sChat
.L150:
	bl	sub_80104B0
	ldr	r4, .L181
	ldr	r0, [r4]
	mov	r1, #0xc8
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	bl	PrepareSendBuffer_Disband
	ldr	r0, [r4]
	mov	r1, #0x4
	strh	r1, [r0, #0x6]
	mov	r2, #0xdc
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	strh	r5, [r0]
	b	.L126
.L182:
	.align	2, 0
.L181:
	.word	sChat
.L154:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L155	@cond_branch
	bl	sub_8011A9C
	cmp	r0, #0
	bne	.L155	@cond_branch
	ldr	r4, .L183
	ldr	r1, [r4]
	mov	r0, #0xc8
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	mov	r0, #0x0
	mov	r2, #0x28
	bl	SendBlock
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L155	@cond_branch
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0
	bne	.L156	@cond_branch
	mov	r0, #0x6
	b	.L165
.L184:
	.align	2, 0
.L183:
	.word	sChat
.L156:
	mov	r0, #0x5
.L165:
	strh	r0, [r1, #0x6]
.L155:
	ldr	r0, .L185
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L126	@cond_branch
	b	.L166
.L186:
	.align	2, 0
.L185:
	.word	gReceivedRemoteLinkPlayers
.L159:
	ldr	r0, .L187
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L160	@cond_branch
.L166:
	mov	r0, #0x9
	bl	SetChatFunction
	b	.L126
.L188:
	.align	2, 0
.L187:
	.word	gReceivedRemoteLinkPlayers
.L160:
	ldr	r3, [r2]
	mov	r1, #0xdc
	lsl	r1, r1, #0x1
	add	r2, r3, r1
	ldrh	r0, [r2]
	add	r0, r0, #0x1
	strh	r0, [r2]
	lsl	r0, r0, #0x10
	mov	r1, #0x96
	lsl	r1, r1, #0x11
	cmp	r0, r1
	bls	.L126	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2]
	mov	r0, #0x4
	strh	r0, [r3, #0x6]
.L126:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 Chat_AskQuitChatting,.Lfe11-Chat_AskQuitChatting
	.align	2, 0
	.type	 Chat_Exit,function
	.thumb_func
Chat_Exit:
	push	{r4, lr}
	ldr	r1, .L212
	ldr	r0, [r1]
	ldrh	r0, [r0, #0x6]
	add	r2, r1, #0
	cmp	r0, #0x7
	bls	.LCB1195
	b	.L190	@long jump
.LCB1195:
	lsl	r0, r0, #0x2
	ldr	r1, .L212+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L213:
	.align	2, 0
.L212:
	.word	sChat
	.word	.L209
	.align	2, 0
	.align	2, 0
.L209:
	.word	.L191
	.word	.L193
	.word	.L195
	.word	.L197
	.word	.L199
	.word	.L201
	.word	.L203
	.word	.L206
.L191:
	ldr	r0, .L214
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB1222
	b	.L190	@long jump
.LCB1222:
	mov	r0, #0x7
	mov	r1, #0x0
	bl	StartDisplaySubtask
	ldr	r0, .L214+0x4
	ldr	r1, [r0]
	b	.L211
.L215:
	.align	2, 0
.L214:
	.word	Task_ReceiveChatMessage
	.word	sChat
.L193:
	mov	r0, #0x0
	bl	IsDisplaySubtaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L190	@cond_branch
	mov	r0, #0x12
	mov	r1, #0x0
	bl	StartDisplaySubtask
	ldr	r0, .L216
	ldr	r1, [r0]
	b	.L211
.L217:
	.align	2, 0
.L216:
	.word	sChat
.L195:
	mov	r0, #0x0
	bl	IsDisplaySubtaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L190	@cond_branch
	ldr	r4, .L218
	ldr	r0, [r4]
	mov	r1, #0xc8
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	bl	PrepareSendBuffer_Drop
	ldr	r1, [r4]
	b	.L211
.L219:
	.align	2, 0
.L218:
	.word	sChat
.L197:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L190	@cond_branch
	bl	sub_8011A9C
	cmp	r0, #0
	bne	.L190	@cond_branch
	ldr	r4, .L220
	ldr	r1, [r4]
	mov	r0, #0xc8
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	mov	r0, #0x0
	mov	r2, #0x28
	bl	SendBlock
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L190	@cond_branch
	ldr	r1, [r4]
	b	.L211
.L221:
	.align	2, 0
.L220:
	.word	sChat
.L199:
	bl	GetBlockReceivedStatus
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L190	@cond_branch
	bl	sub_8011A9C
	cmp	r0, #0
	bne	.L190	@cond_branch
	ldr	r0, .L222
	ldr	r1, [r0]
	b	.L211
.L223:
	.align	2, 0
.L222:
	.word	sChat
.L201:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L190	@cond_branch
	bl	sub_8011A9C
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L190	@cond_branch
	bl	SetCloseLinkCallback
	ldr	r0, .L224
	ldr	r1, [r0]
	strh	r4, [r1, #0xa]
	b	.L211
.L225:
	.align	2, 0
.L224:
	.word	sChat
.L203:
	ldr	r1, [r2]
	ldrh	r0, [r1, #0xa]
	cmp	r0, #0x95
	bhi	.L204	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
.L204:
	ldr	r0, .L226
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L190	@cond_branch
	ldr	r1, [r2]
.L211:
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
	b	.L190
.L227:
	.align	2, 0
.L226:
	.word	gReceivedRemoteLinkPlayers
.L206:
	ldr	r1, [r2]
	ldrh	r0, [r1, #0xa]
	cmp	r0, #0x95
	bls	.L207	@cond_branch
	mov	r0, #0x9
	bl	SetChatFunction
	b	.L190
.L207:
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
.L190:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 Chat_Exit,.Lfe12-Chat_Exit
	.align	2, 0
	.type	 Chat_Drop,function
	.thumb_func
Chat_Drop:
	push	{r4, r5, lr}
	ldr	r5, .L245
	ldr	r1, [r5]
	ldrh	r0, [r1, #0x6]
	cmp	r0, #0x1
	beq	.L232	@cond_branch
	cmp	r0, #0x1
	bgt	.L242	@cond_branch
	cmp	r0, #0
	beq	.L230	@cond_branch
	b	.L229
.L246:
	.align	2, 0
.L245:
	.word	sChat
.L242:
	cmp	r0, #0x2
	beq	.L234	@cond_branch
	cmp	r0, #0x3
	beq	.L237	@cond_branch
	b	.L229
.L230:
	ldr	r0, .L247
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L229	@cond_branch
	mov	r0, #0x7
	mov	r1, #0x0
	bl	StartDisplaySubtask
	b	.L243
.L248:
	.align	2, 0
.L247:
	.word	Task_ReceiveChatMessage
.L232:
	mov	r0, #0x0
	bl	IsDisplaySubtaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L229	@cond_branch
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L229	@cond_branch
	bl	sub_8011A9C
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L229	@cond_branch
	bl	SetCloseLinkCallback
	ldr	r1, [r5]
	strh	r4, [r1, #0xa]
	b	.L244
.L234:
	ldrh	r0, [r1, #0xa]
	cmp	r0, #0x95
	bhi	.L235	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
.L235:
	ldr	r0, .L249
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L229	@cond_branch
.L243:
	ldr	r1, [r5]
.L244:
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
	b	.L229
.L250:
	.align	2, 0
.L249:
	.word	gReceivedRemoteLinkPlayers
.L237:
	ldrh	r0, [r1, #0xa]
	cmp	r0, #0x95
	bls	.L238	@cond_branch
	mov	r0, #0x9
	bl	SetChatFunction
	b	.L229
.L238:
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
.L229:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 Chat_Drop,.Lfe13-Chat_Drop
	.align	2, 0
	.type	 Chat_Disbanded,function
	.thumb_func
Chat_Disbanded:
	push	{r4, lr}
	ldr	r1, .L270
	ldr	r0, [r1]
	ldrh	r0, [r0, #0x6]
	add	r2, r1, #0
	cmp	r0, #0x4
	bhi	.L252	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L270+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L271:
	.align	2, 0
.L270:
	.word	sChat
	.word	.L267
	.align	2, 0
	.align	2, 0
.L267:
	.word	.L253
	.word	.L256
	.word	.L259
	.word	.L261
	.word	.L264
.L253:
	ldr	r0, .L272
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L252	@cond_branch
	ldr	r4, .L272+0x4
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0
	beq	.L255	@cond_branch
	mov	r0, #0x7
	mov	r1, #0x0
	bl	StartDisplaySubtask
.L255:
	ldr	r1, [r4]
	b	.L269
.L273:
	.align	2, 0
.L272:
	.word	Task_ReceiveChatMessage
	.word	sChat
.L256:
	mov	r0, #0x0
	bl	IsDisplaySubtaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L252	@cond_branch
	ldr	r4, .L274
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0
	beq	.L258	@cond_branch
	mov	r0, #0x13
	mov	r1, #0x0
	bl	StartDisplaySubtask
.L258:
	ldr	r1, [r4]
	b	.L269
.L275:
	.align	2, 0
.L274:
	.word	sChat
.L259:
	mov	r0, #0x0
	bl	IsDisplaySubtaskActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L252	@cond_branch
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L252	@cond_branch
	bl	sub_8011A9C
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L252	@cond_branch
	bl	SetCloseLinkCallback
	ldr	r0, .L276
	ldr	r1, [r0]
	strh	r4, [r1, #0xa]
	b	.L269
.L277:
	.align	2, 0
.L276:
	.word	sChat
.L261:
	ldr	r1, [r2]
	ldrh	r0, [r1, #0xa]
	cmp	r0, #0x95
	bhi	.L262	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
.L262:
	ldr	r0, .L278
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L252	@cond_branch
	ldr	r1, [r2]
.L269:
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
	b	.L252
.L279:
	.align	2, 0
.L278:
	.word	gReceivedRemoteLinkPlayers
.L264:
	ldr	r1, [r2]
	ldrh	r0, [r1, #0xa]
	cmp	r0, #0x95
	bls	.L265	@cond_branch
	mov	r0, #0x9
	bl	SetChatFunction
	b	.L252
.L265:
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
.L252:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 Chat_Disbanded,.Lfe14-Chat_Disbanded
	.align	2, 0
	.type	 Chat_SendMessage,function
	.thumb_func
Chat_SendMessage:
	push	{r4, lr}
	ldr	r1, .L295
	ldr	r0, [r1]
	ldrh	r0, [r0, #0x6]
	add	r4, r1, #0
	cmp	r0, #0x4
	bhi	.L281	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L295+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L296:
	.align	2, 0
.L295:
	.word	sChat
	.word	.L291
	.align	2, 0
	.align	2, 0
.L291:
	.word	.L282
	.word	.L284
	.word	.L286
	.word	.L287
	.word	.L289
.L282:
	ldr	r0, .L297
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L283	@cond_branch
	mov	r0, #0x1
	bl	SetChatFunction
	b	.L281
.L298:
	.align	2, 0
.L297:
	.word	gReceivedRemoteLinkPlayers
.L283:
	ldr	r0, [r4]
	mov	r1, #0xc8
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	bl	PrepareSendBuffer_Chat
	ldr	r1, [r4]
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
.L284:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L281	@cond_branch
	bl	sub_8011A9C
	cmp	r0, #0
	bne	.L281	@cond_branch
	ldr	r4, .L299
	ldr	r1, [r4]
	mov	r0, #0xc8
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	mov	r0, #0x0
	mov	r2, #0x28
	bl	SendBlock
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L281	@cond_branch
	ldr	r1, [r4]
	b	.L293
.L300:
	.align	2, 0
.L299:
	.word	sChat
.L286:
	bl	ResetMessageEntryBuffer
	mov	r0, #0x8
	mov	r1, #0x0
	bl	StartDisplaySubtask
	b	.L294
.L287:
	mov	r0, #0x0
	bl	IsDisplaySubtaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L281	@cond_branch
.L294:
	ldr	r0, .L301
	ldr	r1, [r0]
.L293:
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
	b	.L281
.L302:
	.align	2, 0
.L301:
	.word	sChat
.L289:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L281	@cond_branch
	mov	r0, #0x1
	bl	SetChatFunction
.L281:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 Chat_SendMessage,.Lfe15-Chat_SendMessage
	.align	2, 0
	.type	 Chat_Register,function
	.thumb_func
Chat_Register:
	push	{r4, lr}
	ldr	r0, .L328
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x6]
	cmp	r0, #0x6
	bls	.LCB1862
	b	.L304	@long jump
.LCB1862:
	lsl	r0, r0, #0x2
	ldr	r1, .L328+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L329:
	.align	2, 0
.L328:
	.word	sChat
	.word	.L324
	.align	2, 0
	.align	2, 0
.L324:
	.word	.L305
	.word	.L308
	.word	.L314
	.word	.L316
	.word	.L318
	.word	.L320
	.word	.L322
.L305:
	bl	ChatMessageIsNotEmpty
	cmp	r0, #0
	beq	.L306	@cond_branch
	mov	r0, #0x9
	mov	r1, #0x0
	bl	StartDisplaySubtask
	ldr	r0, .L330
	ldr	r1, [r0]
	mov	r0, #0x2
	b	.L326
.L331:
	.align	2, 0
.L330:
	.word	sChat
.L306:
	mov	r0, #0xd
	mov	r1, #0x0
	bl	StartDisplaySubtask
	ldr	r0, .L332
	ldr	r1, [r0]
	mov	r0, #0x5
	b	.L326
.L333:
	.align	2, 0
.L332:
	.word	sChat
.L308:
	ldr	r0, .L334
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L309	@cond_branch
	bl	RegisterTextAtRow
	mov	r0, #0xb
	mov	r1, #0x0
	bl	StartDisplaySubtask
	ldr	r0, .L334+0x4
	ldr	r1, [r0]
	mov	r0, #0x3
	b	.L326
.L335:
	.align	2, 0
.L334:
	.word	gMain
	.word	sChat
.L309:
	mov	r4, #0x2
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L311	@cond_branch
	mov	r0, #0xa
	b	.L327
.L311:
	bl	HandleDPadInput
	cmp	r0, #0
	beq	.L304	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x0
	bl	StartDisplaySubtask
	ldr	r0, .L336
	ldr	r0, [r0]
	strh	r4, [r0, #0x6]
	b	.L304
.L337:
	.align	2, 0
.L336:
	.word	sChat
.L314:
	mov	r0, #0x0
	bl	IsDisplaySubtaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L304	@cond_branch
	ldr	r0, .L338
	ldr	r1, [r0]
	mov	r0, #0x1
	b	.L326
.L339:
	.align	2, 0
.L338:
	.word	sChat
.L316:
	mov	r0, #0x0
	bl	IsDisplaySubtaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L304	@cond_branch
	mov	r0, #0xa
	b	.L327
.L318:
	mov	r0, #0x0
	bl	IsDisplaySubtaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L304	@cond_branch
	mov	r0, #0x1
	bl	SetChatFunction
	b	.L304
.L320:
	mov	r0, #0x0
	bl	IsDisplaySubtaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L304	@cond_branch
	ldr	r0, .L340
	ldr	r1, [r0]
	mov	r0, #0x6
	b	.L326
.L341:
	.align	2, 0
.L340:
	.word	sChat
.L322:
	ldr	r0, .L342
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L304	@cond_branch
	mov	r0, #0x7
.L327:
	mov	r1, #0x0
	bl	StartDisplaySubtask
	ldr	r0, .L342+0x4
	ldr	r1, [r0]
	mov	r0, #0x4
.L326:
	strh	r0, [r1, #0x6]
.L304:
	pop	{r4}
	pop	{r0}
	bx	r0
.L343:
	.align	2, 0
.L342:
	.word	gMain
	.word	sChat
.Lfe16:
	.size	 Chat_Register,.Lfe16-Chat_Register
	.align	2, 0
	.type	 Chat_SaveAndExit,function
	.thumb_func
Chat_SaveAndExit:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L387
	ldr	r0, [r1]
	ldrh	r0, [r0, #0x6]
	add	r4, r1, #0
	cmp	r0, #0xd
	bls	.LCB2089
	b	.L345	@long jump
.LCB2089:
	lsl	r0, r0, #0x2
	ldr	r1, .L387+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L388:
	.align	2, 0
.L387:
	.word	sChat
	.word	.L384
	.align	2, 0
	.align	2, 0
.L384:
	.word	.L346
	.word	.L349
	.word	.L351
	.word	.L359
	.word	.L361
	.word	.L363
	.word	.L371
	.word	.L373
	.word	.L375
	.word	.L376
	.word	.L378
	.word	.L379
	.word	.L381
	.word	.L382
.L346:
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x18]
	cmp	r0, #0
	bne	.LCB2115
	b	.L386	@long jump
.LCB2115:
	mov	r0, #0x7
	mov	r1, #0x0
	bl	StartDisplaySubtask
	ldr	r1, [r4]
	mov	r0, #0x1
	strh	r0, [r1, #0x6]
	b	.L345
.L349:
	mov	r0, #0x0
	bl	IsDisplaySubtaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB2133
	b	.L345	@long jump
.LCB2133:
	mov	r0, #0xe
	mov	r1, #0x0
	bl	StartDisplaySubtask
	ldr	r0, .L389
	ldr	r1, [r0]
	mov	r0, #0x2
	strh	r0, [r1, #0x6]
	b	.L345
.L390:
	.align	2, 0
.L389:
	.word	sChat
.L351:
	bl	ProcessMenuInput
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L355	@cond_branch
	cmp	r1, #0
	bgt	.L358	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L354	@cond_branch
	b	.L345
.L358:
	cmp	r1, #0x1
	beq	.LCB2170
	b	.L345	@long jump
.LCB2170:
.L354:
	ldr	r0, .L391
	ldr	r1, [r0]
	b	.L386
.L392:
	.align	2, 0
.L391:
	.word	sChat
.L355:
	mov	r0, #0x7
	mov	r1, #0x0
	bl	StartDisplaySubtask
	ldr	r0, .L393
	ldr	r1, [r0]
	mov	r0, #0x3
	strh	r0, [r1, #0x6]
	b	.L345
.L394:
	.align	2, 0
.L393:
	.word	sChat
.L359:
	mov	r0, #0x0
	bl	IsDisplaySubtaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB2207
	b	.L345	@long jump
.LCB2207:
	mov	r0, #0xf
	mov	r1, #0x0
	bl	StartDisplaySubtask
	ldr	r0, .L395
	ldr	r1, [r0]
	mov	r0, #0x4
	strh	r0, [r1, #0x6]
	b	.L345
.L396:
	.align	2, 0
.L395:
	.word	sChat
.L361:
	mov	r0, #0x0
	bl	IsDisplaySubtaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB2231
	b	.L345	@long jump
.LCB2231:
	ldr	r0, .L397
	ldr	r1, [r0]
	mov	r0, #0x5
	strh	r0, [r1, #0x6]
	b	.L345
.L398:
	.align	2, 0
.L397:
	.word	sChat
.L363:
	bl	ProcessMenuInput
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L367	@cond_branch
	cmp	r1, #0
	bgt	.L370	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L366	@cond_branch
	b	.L345
.L370:
	cmp	r1, #0x1
	beq	.LCB2264
	b	.L345	@long jump
.LCB2264:
.L366:
	ldr	r0, .L399
	ldr	r1, [r0]
	b	.L386
.L400:
	.align	2, 0
.L399:
	.word	sChat
.L367:
	mov	r0, #0x7
	mov	r1, #0x0
	bl	StartDisplaySubtask
	ldr	r0, .L401
	ldr	r1, [r0]
	mov	r0, #0x6
	strh	r0, [r1, #0x6]
	b	.L345
.L402:
	.align	2, 0
.L401:
	.word	sChat
.L371:
	mov	r0, #0x0
	bl	IsDisplaySubtaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L345	@cond_branch
	mov	r0, #0x10
	mov	r1, #0x0
	bl	StartDisplaySubtask
	bl	SaveRegisteredTexts
	ldr	r0, .L403
	ldr	r1, [r0]
	mov	r0, #0x7
	strh	r0, [r1, #0x6]
	b	.L345
.L404:
	.align	2, 0
.L403:
	.word	sChat
.L373:
	mov	r0, #0x0
	bl	IsDisplaySubtaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L345	@cond_branch
	bl	SetContinueGameWarpStatusToDynamicWarp
	mov	r0, #0x0
	bl	TrySavingData
	ldr	r0, .L405
	ldr	r1, [r0]
	mov	r0, #0x8
	strh	r0, [r1, #0x6]
	b	.L345
.L406:
	.align	2, 0
.L405:
	.word	sChat
.L375:
	mov	r0, #0x11
	mov	r1, #0x0
	bl	StartDisplaySubtask
	ldr	r0, .L407
	ldr	r1, [r0]
	mov	r0, #0x9
	strh	r0, [r1, #0x6]
	b	.L345
.L408:
	.align	2, 0
.L407:
	.word	sChat
.L376:
	mov	r0, #0x0
	bl	IsDisplaySubtaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L345	@cond_branch
	mov	r0, #0x37
	bl	PlaySE
	bl	ClearContinueGameWarpStatus2
	ldr	r0, .L409
	ldr	r1, [r0]
	mov	r0, #0xa
	strh	r0, [r1, #0x6]
	b	.L345
.L410:
	.align	2, 0
.L409:
	.word	sChat
.L378:
	ldr	r1, [r4]
	mov	r0, #0x0
	strb	r0, [r1, #0x19]
	ldr	r1, [r4]
	mov	r0, #0xb
	strh	r0, [r1, #0x6]
	b	.L345
.L379:
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x19]
	add	r1, r1, #0x1
	strb	r1, [r0, #0x19]
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x19]
	cmp	r0, #0x78
	bls	.L345	@cond_branch
.L386:
	mov	r0, #0xc
	strh	r0, [r1, #0x6]
	b	.L345
.L381:
	mov	r1, #0x1
	neg	r1, r1
	mov	r0, #0x0
	str	r0, [sp]
	add	r0, r1, #0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r0, .L411
	ldr	r1, [r0]
	mov	r0, #0xd
	strh	r0, [r1, #0x6]
	b	.L345
.L412:
	.align	2, 0
.L411:
	.word	sChat
.L382:
	ldr	r0, .L413
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L345	@cond_branch
	bl	FreeDisplay
	bl	FreeUnionRoomChat
	ldr	r0, .L413+0x4
	bl	SetMainCallback2
.L345:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L414:
	.align	2, 0
.L413:
	.word	gPaletteFade
	.word	CB2_ReturnToField
.Lfe17:
	.size	 Chat_SaveAndExit,.Lfe17-Chat_SaveAndExit
	.align	2, 0
	.type	 SetChatFunction,function
	.thumb_func
SetChatFunction:
	ldr	r1, .L416
	ldr	r1, [r1]
	mov	r2, #0x0
	strh	r0, [r1, #0x4]
	strh	r2, [r1, #0x6]
	bx	lr
.L417:
	.align	2, 0
.L416:
	.word	sChat
.Lfe18:
	.size	 SetChatFunction,.Lfe18-SetChatFunction
	.align	2, 0
	.type	 HandleDPadInput,function
	.thumb_func
HandleDPadInput:
	push	{lr}
	ldr	r0, .L441
	ldrh	r2, [r0, #0x30]
	mov	r0, #0x40
	and	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0
	bne	.L439	@cond_branch
	mov	r0, #0x80
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L425	@cond_branch
	ldr	r0, .L441+0x4
	ldr	r2, [r0]
	ldr	r1, .L441+0x8
	ldrb	r0, [r2, #0x10]
	add	r0, r0, r1
	ldrb	r1, [r2, #0x12]
	ldrb	r0, [r0]
	cmp	r1, r0
	bcs	.L426	@cond_branch
	add	r0, r1, #0x1
	b	.L440
.L442:
	.align	2, 0
.L441:
	.word	gMain
	.word	sChat
	.word	sKeyboardPageMaxRow
.L426:
	strb	r3, [r2, #0x12]
	b	.L420
.L425:
	ldr	r0, .L443
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x10]
	cmp	r0, #0x3
	beq	.L428	@cond_branch
	mov	r0, #0x20
	and	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0
	beq	.L429	@cond_branch
	ldrb	r0, [r1, #0x11]
	cmp	r0, #0
	beq	.L430	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x11]
	b	.L420
.L444:
	.align	2, 0
.L443:
	.word	sChat
.L430:
	mov	r0, #0x4
	strb	r0, [r1, #0x11]
	b	.L420
.L429:
	mov	r0, #0x10
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L428	@cond_branch
	ldrb	r0, [r1, #0x11]
	cmp	r0, #0x3
	bhi	.L434	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1, #0x11]
	b	.L420
.L434:
	strb	r3, [r1, #0x11]
	b	.L420
.L428:
	mov	r0, #0x0
	b	.L438
.L439:
	ldr	r0, .L445
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x12]
	cmp	r0, #0
	beq	.L423	@cond_branch
	sub	r0, r0, #0x1
	b	.L440
.L446:
	.align	2, 0
.L445:
	.word	sChat
.L423:
	ldr	r0, .L447
	ldrb	r1, [r2, #0x10]
	add	r1, r1, r0
	ldrb	r0, [r1]
.L440:
	strb	r0, [r2, #0x12]
.L420:
	mov	r0, #0x1
.L438:
	pop	{r1}
	bx	r1
.L448:
	.align	2, 0
.L447:
	.word	sKeyboardPageMaxRow
.Lfe19:
	.size	 HandleDPadInput,.Lfe19-HandleDPadInput
	.align	2, 0
	.type	 AppendTextToMessage,function
	.thumb_func
AppendTextToMessage:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x18
	ldr	r0, .L465
	ldr	r5, [r0]
	ldrb	r0, [r5, #0x10]
	cmp	r0, #0x3
	beq	.L450	@cond_branch
	ldr	r3, .L465+0x4
	ldrb	r1, [r5, #0x12]
	lsl	r1, r1, #0x2
	add	r2, r0, #0
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r1, r1, r3
	ldr	r4, [r1]
	ldrb	r0, [r5, #0x11]
	cmp	r0, #0
	beq	.L452	@cond_branch
	add	r1, r0, #0
.L454:
	ldrb	r0, [r4]
	cmp	r0, #0xf9
	bne	.L455	@cond_branch
	add	r4, r4, #0x1
.L455:
	add	r4, r4, #0x1
	sub	r1, r1, #0x1
	cmp	r1, #0
	bne	.L454	@cond_branch
.L452:
	mov	r5, #0x1
	b	.L457
.L466:
	.align	2, 0
.L465:
	.word	sChat
	.word	sUnionRoomKeyboardText
.L450:
	ldrb	r0, [r5, #0x12]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	add	r1, r1, #0xb9
	add	r1, r5, r1
	mov	r0, sp
	bl	StringCopy
	mov	r1, #0x0
	strb	r1, [r0]
	mov	r1, #0xff
	strb	r1, [r0, #0x1]
	mov	r4, sp
	mov	r0, sp
	bl	StringLength_Multibyte
	add	r5, r0, #0
.L457:
	ldr	r6, .L467
	ldr	r1, [r6]
	ldrb	r0, [r1, #0x15]
	strb	r0, [r1, #0x14]
	cmp	r4, #0
	beq	.L449	@cond_branch
	bl	GetEndOfMessagePtr
	add	r2, r0, #0
	sub	r5, r5, #0x1
	mov	r0, #0x1
	neg	r0, r0
	cmp	r5, r0
	beq	.L460	@cond_branch
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x15]
	cmp	r0, #0xe
	bhi	.L460	@cond_branch
	add	r3, r6, #0
.L461:
	ldrb	r0, [r4]
	cmp	r0, #0xf9
	bne	.L463	@cond_branch
	strb	r0, [r2]
	add	r4, r4, #0x1
	add	r2, r2, #0x1
.L463:
	ldrb	r0, [r4]
	strb	r0, [r2]
	add	r4, r4, #0x1
	add	r2, r2, #0x1
	ldr	r1, [r3]
	ldrb	r0, [r1, #0x15]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x15]
	sub	r5, r5, #0x1
	mov	r0, #0x1
	neg	r0, r0
	cmp	r5, r0
	beq	.L460	@cond_branch
	ldr	r0, [r3]
	ldrb	r0, [r0, #0x15]
	cmp	r0, #0xe
	bls	.L461	@cond_branch
.L460:
	mov	r0, #0xff
	strb	r0, [r2]
.L449:
	add	sp, sp, #0x18
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L468:
	.align	2, 0
.L467:
	.word	sChat
.Lfe20:
	.size	 AppendTextToMessage,.Lfe20-AppendTextToMessage
	.align	2, 0
	.type	 DeleteLastMessageCharacter,function
	.thumb_func
DeleteLastMessageCharacter:
	push	{r4, lr}
	ldr	r4, .L471
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x15]
	strb	r0, [r1, #0x14]
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x15]
	cmp	r0, #0
	beq	.L470	@cond_branch
	bl	GetLastCharOfMessagePtr
	mov	r1, #0xff
	strb	r1, [r0]
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x15]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x15]
.L470:
	pop	{r4}
	pop	{r0}
	bx	r0
.L472:
	.align	2, 0
.L471:
	.word	sChat
.Lfe21:
	.size	 DeleteLastMessageCharacter,.Lfe21-DeleteLastMessageCharacter
	.align	2, 0
	.type	 SwitchCaseOfLastMessageCharacter,function
	.thumb_func
SwitchCaseOfLastMessageCharacter:
	push	{lr}
	ldr	r0, .L476
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x15]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x14]
	bl	GetLastCharOfMessagePtr
	add	r2, r0, #0
	ldrb	r0, [r2]
	cmp	r0, #0xf9
	beq	.L474	@cond_branch
	ldr	r1, .L476+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L474	@cond_branch
	strb	r0, [r2]
.L474:
	pop	{r0}
	bx	r0
.L477:
	.align	2, 0
.L476:
	.word	sChat
	.word	sCaseToggleTable
.Lfe22:
	.size	 SwitchCaseOfLastMessageCharacter,.Lfe22-SwitchCaseOfLastMessageCharacter
	.align	2, 0
	.type	 ChatMessageIsNotEmpty,function
	.thumb_func
ChatMessageIsNotEmpty:
	push	{lr}
	ldr	r0, .L482
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x15]
	cmp	r0, #0
	bne	.L479	@cond_branch
	mov	r0, #0x0
	b	.L481
.L483:
	.align	2, 0
.L482:
	.word	sChat
.L479:
	mov	r0, #0x1
.L481:
	pop	{r1}
	bx	r1
.Lfe23:
	.size	 ChatMessageIsNotEmpty,.Lfe23-ChatMessageIsNotEmpty
	.align	2, 0
	.type	 RegisterTextAtRow,function
	.thumb_func
RegisterTextAtRow:
	push	{r4, lr}
	bl	GetLimitedMessageStartPtr
	add	r1, r0, #0
	ldr	r4, .L485
	ldr	r0, [r4]
	ldrb	r3, [r0, #0x12]
	lsl	r2, r3, #0x2
	add	r2, r2, r3
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	add	r2, r2, #0xb9
	add	r0, r0, r2
	bl	StringCopy
	ldr	r1, [r4]
	mov	r0, #0x1
	strb	r0, [r1, #0x18]
	pop	{r4}
	pop	{r0}
	bx	r0
.L486:
	.align	2, 0
.L485:
	.word	sChat
.Lfe24:
	.size	 RegisterTextAtRow,.Lfe24-RegisterTextAtRow
	.align	2, 0
	.type	 ResetMessageEntryBuffer,function
	.thumb_func
ResetMessageEntryBuffer:
	ldr	r1, .L488
	ldr	r2, [r1]
	mov	r0, #0xff
	strb	r0, [r2, #0x1a]
	ldr	r2, [r1]
	mov	r3, #0x0
	mov	r0, #0xf
	strb	r0, [r2, #0x14]
	ldr	r0, [r1]
	strb	r3, [r0, #0x15]
	bx	lr
.L489:
	.align	2, 0
.L488:
	.word	sChat
.Lfe25:
	.size	 ResetMessageEntryBuffer,.Lfe25-ResetMessageEntryBuffer
	.align	2, 0
	.type	 SaveRegisteredTexts,function
	.thumb_func
SaveRegisteredTexts:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L496
	mov	r8, r0
	ldr	r7, .L496+0x4
	mov	r6, #0xb9
	ldr	r5, .L496+0x8
	mov	r4, #0x9
.L494:
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, r5
	ldr	r1, [r7]
	add	r1, r1, r6
	bl	StringCopy
	add	r6, r6, #0x15
	add	r5, r5, #0x15
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L494	@cond_branch
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L497:
	.align	2, 0
.L496:
	.word	gSaveBlock1Ptr
	.word	sChat
	.word	0x3bb8
.Lfe26:
	.size	 SaveRegisteredTexts,.Lfe26-SaveRegisteredTexts
	.align	2, 0
	.type	 GetRegisteredTextByRow,function
	.thumb_func
GetRegisteredTextByRow:
	ldr	r2, .L499
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	add	r1, r1, #0xb9
	ldr	r0, [r2]
	add	r0, r0, r1
	bx	lr
.L500:
	.align	2, 0
.L499:
	.word	sChat
.Lfe27:
	.size	 GetRegisteredTextByRow,.Lfe27-GetRegisteredTextByRow
	.align	2, 0
	.type	 GetEndOfMessagePtr,function
	.thumb_func
GetEndOfMessagePtr:
	push	{lr}
	ldr	r0, .L506
	ldr	r0, [r0]
	add	r1, r0, #0
	add	r1, r1, #0x1a
	ldrb	r0, [r0, #0x1a]
	cmp	r0, #0xff
	beq	.L503	@cond_branch
.L504:
	add	r1, r1, #0x1
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.L504	@cond_branch
.L503:
	add	r0, r1, #0
	pop	{r1}
	bx	r1
.L507:
	.align	2, 0
.L506:
	.word	sChat
.Lfe28:
	.size	 GetEndOfMessagePtr,.Lfe28-GetEndOfMessagePtr
	.align	2, 0
	.type	 GetLastCharOfMessagePtr,function
	.thumb_func
GetLastCharOfMessagePtr:
	push	{lr}
	ldr	r0, .L514
	ldr	r0, [r0]
	add	r2, r0, #0
	add	r2, r2, #0x1a
	add	r1, r2, #0
	ldrb	r0, [r0, #0x1a]
	cmp	r0, #0xff
	beq	.L510	@cond_branch
.L511:
	add	r2, r1, #0
	ldrb	r0, [r2]
	cmp	r0, #0xf9
	bne	.L512	@cond_branch
	add	r1, r2, #0x1
.L512:
	add	r1, r1, #0x1
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.L511	@cond_branch
.L510:
	add	r0, r2, #0
	pop	{r1}
	bx	r1
.L515:
	.align	2, 0
.L514:
	.word	sChat
.Lfe29:
	.size	 GetLastCharOfMessagePtr,.Lfe29-GetLastCharOfMessagePtr
	.align	2, 0
	.type	 GetNumOverflowCharsInMessage,function
	.thumb_func
GetNumOverflowCharsInMessage:
	push	{r4, lr}
	ldr	r4, .L524
	ldr	r0, [r4]
	add	r0, r0, #0x1a
	bl	StringLength_Multibyte
	add	r2, r0, #0
	ldr	r0, [r4]
	add	r1, r0, #0
	add	r1, r1, #0x1a
	mov	r4, #0x0
	cmp	r2, #0xa
	bls	.L517	@cond_branch
	sub	r2, r2, #0xa
	mov	r3, #0x0
	cmp	r4, r2
	bcs	.L517	@cond_branch
.L521:
	ldrb	r0, [r1]
	cmp	r0, #0xf9
	bne	.L522	@cond_branch
	add	r1, r1, #0x1
.L522:
	add	r1, r1, #0x1
	add	r4, r4, #0x1
	add	r3, r3, #0x1
	cmp	r3, r2
	bcc	.L521	@cond_branch
.L517:
	lsl	r0, r4, #0x10
	lsr	r0, r0, #0x10
	pop	{r4}
	pop	{r1}
	bx	r1
.L525:
	.align	2, 0
.L524:
	.word	sChat
.Lfe30:
	.size	 GetNumOverflowCharsInMessage,.Lfe30-GetNumOverflowCharsInMessage
	.align	2, 0
	.type	 PrepareSendBuffer_Null,function
	.thumb_func
PrepareSendBuffer_Null:
	mov	r1, #0x0
	strb	r1, [r0]
	bx	lr
.Lfe31:
	.size	 PrepareSendBuffer_Null,.Lfe31-PrepareSendBuffer_Null
	.align	2, 0
	.type	 PrepareSendBuffer_Join,function
	.thumb_func
PrepareSendBuffer_Join:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x2
	strb	r0, [r4]
	add	r0, r4, #0x1
	ldr	r1, .L528
	ldr	r1, [r1]
	bl	StringCopy
	ldr	r0, .L528+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	strb	r0, [r4, #0x9]
	pop	{r4}
	pop	{r0}
	bx	r0
.L529:
	.align	2, 0
.L528:
	.word	gSaveBlock2Ptr
	.word	sChat
.Lfe32:
	.size	 PrepareSendBuffer_Join,.Lfe32-PrepareSendBuffer_Join
	.align	2, 0
	.type	 PrepareSendBuffer_Chat,function
	.thumb_func
PrepareSendBuffer_Chat:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x1
	strb	r0, [r4]
	add	r0, r4, #0x1
	ldr	r1, .L531
	ldr	r1, [r1]
	bl	StringCopy
	add	r4, r4, #0x9
	ldr	r0, .L531+0x4
	ldr	r1, [r0]
	add	r1, r1, #0x1a
	add	r0, r4, #0
	bl	StringCopy
	pop	{r4}
	pop	{r0}
	bx	r0
.L532:
	.align	2, 0
.L531:
	.word	gSaveBlock2Ptr
	.word	sChat
.Lfe33:
	.size	 PrepareSendBuffer_Chat,.Lfe33-PrepareSendBuffer_Chat
	.align	2, 0
	.type	 PrepareSendBuffer_Leave,function
	.thumb_func
PrepareSendBuffer_Leave:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x3
	strb	r0, [r4]
	add	r0, r4, #0x1
	ldr	r1, .L534
	ldr	r1, [r1]
	bl	StringCopy
	ldr	r0, .L534+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	strb	r0, [r4, #0x9]
	bl	sub_8011A50
	pop	{r4}
	pop	{r0}
	bx	r0
.L535:
	.align	2, 0
.L534:
	.word	gSaveBlock2Ptr
	.word	sChat
.Lfe34:
	.size	 PrepareSendBuffer_Leave,.Lfe34-PrepareSendBuffer_Leave
	.align	2, 0
	.type	 PrepareSendBuffer_Drop,function
	.thumb_func
PrepareSendBuffer_Drop:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x4
	strb	r0, [r4]
	add	r0, r4, #0x1
	ldr	r1, .L537
	ldr	r1, [r1]
	bl	StringCopy
	ldr	r0, .L537+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	strb	r0, [r4, #0x9]
	pop	{r4}
	pop	{r0}
	bx	r0
.L538:
	.align	2, 0
.L537:
	.word	gSaveBlock2Ptr
	.word	sChat
.Lfe35:
	.size	 PrepareSendBuffer_Drop,.Lfe35-PrepareSendBuffer_Drop
	.align	2, 0
	.type	 PrepareSendBuffer_Disband,function
	.thumb_func
PrepareSendBuffer_Disband:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x5
	strb	r0, [r4]
	add	r0, r4, #0x1
	ldr	r1, .L540
	ldr	r1, [r1]
	bl	StringCopy
	ldr	r0, .L540+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	strb	r0, [r4, #0x9]
	pop	{r4}
	pop	{r0}
	bx	r0
.L541:
	.align	2, 0
.L540:
	.word	gSaveBlock2Ptr
	.word	sChat
.Lfe36:
	.size	 PrepareSendBuffer_Disband,.Lfe36-PrepareSendBuffer_Disband
	.align	2, 0
	.type	 ProcessReceivedChatMessage,function
	.thumb_func
ProcessReceivedChatMessage:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	add	r5, r1, #0
	ldrb	r0, [r5]
	add	r1, r0, #0
	add	r4, r5, #0x1
	add	r5, r4, #0
	add	r5, r5, #0x8
	cmp	r0, #0x2
	beq	.L544	@cond_branch
	cmp	r0, #0x2
	bgt	.L552	@cond_branch
	cmp	r0, #0x1
	beq	.L546	@cond_branch
	b	.L543
.L552:
	cmp	r1, #0x3
	beq	.L548	@cond_branch
	cmp	r1, #0x5
	beq	.L547	@cond_branch
	b	.L543
.L544:
	ldr	r0, .L555
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	ldrb	r1, [r4, #0x8]
	cmp	r0, r1
	beq	.L543	@cond_branch
	bl	DynamicPlaceholderTextUtil_Reset
	mov	r0, #0x0
	add	r1, r4, #0
	bl	DynamicPlaceholderTextUtil_SetPlaceholderPtr
	ldr	r1, .L555+0x4
	b	.L554
.L556:
	.align	2, 0
.L555:
	.word	sChat
	.word	gText_F700JoinedChat
.L546:
	add	r0, r6, #0
	add	r1, r4, #0
	bl	StringCopy
	mov	r1, #0xfc
	strb	r1, [r0]
	add	r0, r0, #0x1
	mov	r1, #0x13
	strb	r1, [r0]
	add	r0, r0, #0x1
	mov	r1, #0x2a
	strb	r1, [r0]
	add	r0, r0, #0x1
	mov	r1, #0xf0
	strb	r1, [r0]
	add	r0, r0, #0x1
	add	r1, r5, #0
	bl	StringCopy
	mov	r0, #0x1
	b	.L553
.L547:
	ldr	r0, .L557
	ldr	r0, [r0]
	add	r0, r0, #0x79
	add	r1, r4, #0
	bl	StringCopy
.L548:
	ldr	r0, .L557
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	ldrb	r5, [r5]
	cmp	r0, r5
	beq	.L543	@cond_branch
	bl	DynamicPlaceholderTextUtil_Reset
	mov	r0, #0x0
	add	r1, r4, #0
	bl	DynamicPlaceholderTextUtil_SetPlaceholderPtr
	ldr	r1, .L557+0x4
.L554:
	add	r0, r6, #0
	bl	DynamicPlaceholderTextUtil_ExpandPlaceholders
	mov	r0, #0x1
	b	.L553
.L558:
	.align	2, 0
.L557:
	.word	sChat
	.word	gText_F700LeftChat
.L543:
	mov	r0, #0x0
.L553:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe37:
	.size	 ProcessReceivedChatMessage,.Lfe37-ProcessReceivedChatMessage
	.align	2, 0
	.type	 GetCurrentKeyboardPage,function
	.thumb_func
GetCurrentKeyboardPage:
	ldr	r0, .L560
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x10]
	bx	lr
.L561:
	.align	2, 0
.L560:
	.word	sChat
.Lfe38:
	.size	 GetCurrentKeyboardPage,.Lfe38-GetCurrentKeyboardPage
	.align	2, 0
	.type	 GetCurrentKeyboardColAndRow,function
	.thumb_func
GetCurrentKeyboardColAndRow:
	ldr	r2, .L563
	ldr	r3, [r2]
	ldrb	r2, [r3, #0x11]
	strb	r2, [r0]
	ldrb	r0, [r3, #0x12]
	strb	r0, [r1]
	bx	lr
.L564:
	.align	2, 0
.L563:
	.word	sChat
.Lfe39:
	.size	 GetCurrentKeyboardColAndRow,.Lfe39-GetCurrentKeyboardColAndRow
	.align	2, 0
	.type	 GetMessageEntryBuffer,function
	.thumb_func
GetMessageEntryBuffer:
	ldr	r0, .L566
	ldr	r0, [r0]
	add	r0, r0, #0x1a
	bx	lr
.L567:
	.align	2, 0
.L566:
	.word	sChat
.Lfe40:
	.size	 GetMessageEntryBuffer,.Lfe40-GetMessageEntryBuffer
	.align	2, 0
	.type	 GetLengthOfMessageEntry,function
	.thumb_func
GetLengthOfMessageEntry:
	push	{lr}
	bl	GetMessageEntryBuffer
	bl	StringLength_Multibyte
	pop	{r1}
	bx	r1
.Lfe41:
	.size	 GetLengthOfMessageEntry,.Lfe41-GetLengthOfMessageEntry
	.align	2, 0
	.type	 GetBufferSelectionRegion,function
	.thumb_func
GetBufferSelectionRegion:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L572
	ldr	r0, [r0]
	ldrb	r3, [r0, #0x15]
	ldrb	r2, [r0, #0x14]
	sub	r0, r3, r2
	cmp	r0, #0
	bge	.L570	@cond_branch
	neg	r0, r0
	str	r3, [r4]
	b	.L571
.L573:
	.align	2, 0
.L572:
	.word	sChat
.L570:
	str	r2, [r4]
.L571:
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 GetBufferSelectionRegion,.Lfe42-GetBufferSelectionRegion
	.align	2, 0
	.type	 GetLimitedMessageStartPtr,function
	.thumb_func
GetLimitedMessageStartPtr:
	push	{lr}
	bl	GetNumOverflowCharsInMessage
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldr	r0, .L581
	ldr	r0, [r0]
	add	r1, r0, #0
	add	r1, r1, #0x1a
	cmp	r2, #0
	beq	.L576	@cond_branch
.L578:
	ldrb	r0, [r1]
	cmp	r0, #0xf9
	bne	.L579	@cond_branch
	add	r1, r1, #0x1
.L579:
	add	r1, r1, #0x1
	sub	r2, r2, #0x1
	cmp	r2, #0
	bne	.L578	@cond_branch
.L576:
	add	r0, r1, #0
	pop	{r1}
	bx	r1
.L582:
	.align	2, 0
.L581:
	.word	sChat
.Lfe43:
	.size	 GetLimitedMessageStartPtr,.Lfe43-GetLimitedMessageStartPtr
	.align	2, 0
	.type	 GetLimitedMessageStartPos,function
	.thumb_func
GetLimitedMessageStartPos:
	push	{r4, lr}
	bl	GetNumOverflowCharsInMessage
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L590
	ldr	r0, [r0]
	add	r1, r0, #0
	add	r1, r1, #0x1a
	mov	r2, #0x0
	mov	r3, #0x0
	cmp	r2, r4
	bcs	.L585	@cond_branch
.L587:
	ldrb	r0, [r1]
	cmp	r0, #0xf9
	bne	.L588	@cond_branch
	add	r1, r1, #0x1
.L588:
	add	r1, r1, #0x1
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	add	r3, r3, #0x1
	cmp	r3, r4
	bcc	.L587	@cond_branch
.L585:
	add	r0, r2, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L591:
	.align	2, 0
.L590:
	.word	sChat
.Lfe44:
	.size	 GetLimitedMessageStartPos,.Lfe44-GetLimitedMessageStartPos
	.align	2, 0
	.type	 GetLastReceivedMessage,function
	.thumb_func
GetLastReceivedMessage:
	ldr	r0, .L593
	ldr	r0, [r0]
	add	r0, r0, #0x39
	bx	lr
.L594:
	.align	2, 0
.L593:
	.word	sChat
.Lfe45:
	.size	 GetLastReceivedMessage,.Lfe45-GetLastReceivedMessage
	.align	2, 0
	.type	 GetReceivedPlayerIndex,function
	.thumb_func
GetReceivedPlayerIndex:
	ldr	r0, .L596
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x16]
	bx	lr
.L597:
	.align	2, 0
.L596:
	.word	sChat
.Lfe46:
	.size	 GetReceivedPlayerIndex,.Lfe46-GetReceivedPlayerIndex
	.align	2, 0
	.type	 GetTextEntryCursorPosition,function
	.thumb_func
GetTextEntryCursorPosition:
	ldr	r0, .L599
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x15]
	bx	lr
.L600:
	.align	2, 0
.L599:
	.word	sChat
.Lfe47:
	.size	 GetTextEntryCursorPosition,.Lfe47-GetTextEntryCursorPosition
	.align	2, 0
	.type	 GetShouldShowCaseToggleIcon,function
	.thumb_func
GetShouldShowCaseToggleIcon:
	push	{lr}
	bl	GetLastCharOfMessagePtr
	ldrb	r1, [r0]
	cmp	r1, #0xff
	bhi	.L603	@cond_branch
	ldr	r0, .L606
	add	r0, r1, r0
	ldrb	r0, [r0]
	cmp	r0, r1
	beq	.L603	@cond_branch
	cmp	r0, #0
	bne	.L602	@cond_branch
.L603:
	mov	r0, #0x3
	b	.L605
.L607:
	.align	2, 0
.L606:
	.word	sCaseToggleTable
.L602:
	mov	r0, #0x0
.L605:
	pop	{r1}
	bx	r1
.Lfe48:
	.size	 GetShouldShowCaseToggleIcon,.Lfe48-GetShouldShowCaseToggleIcon
	.align	2, 0
	.type	 GetChatHostName,function
	.thumb_func
GetChatHostName:
	ldr	r0, .L609
	ldr	r0, [r0]
	add	r0, r0, #0x79
	bx	lr
.L610:
	.align	2, 0
.L609:
	.word	sChat
.Lfe49:
	.size	 GetChatHostName,.Lfe49-GetChatHostName
	.align	2, 0
	.globl	InitUnionRoomChatRegisteredTexts
	.type	 InitUnionRoomChatRegisteredTexts,function
	.thumb_func
InitUnionRoomChatRegisteredTexts:
	push	{r4, lr}
	ldr	r4, .L612
	ldr	r0, [r4]
	ldr	r1, .L612+0x4
	add	r0, r0, r1
	ldr	r1, .L612+0x8
	bl	StringCopy
	ldr	r0, [r4]
	ldr	r1, .L612+0xc
	add	r0, r0, r1
	ldr	r1, .L612+0x10
	bl	StringCopy
	ldr	r0, [r4]
	ldr	r1, .L612+0x14
	add	r0, r0, r1
	ldr	r1, .L612+0x18
	bl	StringCopy
	ldr	r0, [r4]
	ldr	r1, .L612+0x1c
	add	r0, r0, r1
	ldr	r1, .L612+0x20
	bl	StringCopy
	ldr	r0, [r4]
	ldr	r1, .L612+0x24
	add	r0, r0, r1
	ldr	r1, .L612+0x28
	bl	StringCopy
	ldr	r0, [r4]
	ldr	r1, .L612+0x2c
	add	r0, r0, r1
	ldr	r1, .L612+0x30
	bl	StringCopy
	ldr	r0, [r4]
	ldr	r1, .L612+0x34
	add	r0, r0, r1
	ldr	r1, .L612+0x38
	bl	StringCopy
	ldr	r0, [r4]
	ldr	r1, .L612+0x3c
	add	r0, r0, r1
	ldr	r1, .L612+0x40
	bl	StringCopy
	ldr	r0, [r4]
	ldr	r1, .L612+0x44
	add	r0, r0, r1
	ldr	r1, .L612+0x48
	bl	StringCopy
	ldr	r0, [r4]
	ldr	r1, .L612+0x4c
	add	r0, r0, r1
	ldr	r1, .L612+0x50
	bl	StringCopy
	pop	{r4}
	pop	{r0}
	bx	r0
.L613:
	.align	2, 0
.L612:
	.word	gSaveBlock1Ptr
	.word	0x3bb8
	.word	gText_Hello
	.word	0x3bcd
	.word	gText_Pokemon2
	.word	0x3be2
	.word	gText_Trade
	.word	0x3bf7
	.word	gText_Battle
	.word	0x3c0c
	.word	gText_Lets
	.word	0x3c21
	.word	gText_Ok
	.word	0x3c36
	.word	gText_Sorry
	.word	0x3c4b
	.word	gText_YaySmileEmoji
	.word	0x3c60
	.word	gText_ThankYou
	.word	0x3c75
	.word	gText_ByeBye
.Lfe50:
	.size	 InitUnionRoomChatRegisteredTexts,.Lfe50-InitUnionRoomChatRegisteredTexts
	.align	2, 0
	.type	 Task_ReceiveChatMessage,function
	.thumb_func
Task_ReceiveChatMessage:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L657
	add	r4, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x7
	bls	.LCB3968
	b	.L614	@long jump
.LCB3968:
	lsl	r0, r0, #0x2
	ldr	r1, .L657+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L658:
	.align	2, 0
.L657:
	.word	gTasks+0x8
	.word	.L650
	.align	2, 0
	.align	2, 0
.L650:
	.word	.L616
	.word	.L618
	.word	.L647
	.word	.L621
	.word	.L641
	.word	.L644
	.word	.L646
	.word	.L639
.L616:
	ldr	r0, .L659
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB3993
	b	.L652	@long jump
.LCB3993:
	mov	r0, #0x1
	strh	r0, [r4]
.L618:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r2, r0, #0
	strh	r0, [r4, #0x8]
	ldr	r3, .L659+0x4
	ldr	r0, [r3]
	ldrb	r1, [r0, #0xd]
	mov	r5, #0x8
	ldrsh	r0, [r4, r5]
	cmp	r1, r0
	beq	.L619	@cond_branch
	mov	r0, #0x2
	strh	r0, [r4]
	ldr	r0, [r3]
	strb	r2, [r0, #0xd]
	b	.L614
.L660:
	.align	2, 0
.L659:
	.word	gReceivedRemoteLinkPlayers
	.word	sChat
.L619:
	bl	GetBlockReceivedStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x6]
	cmp	r0, #0
	bne	.L620	@cond_branch
	bl	sub_8011A9C
	cmp	r0, #0
	beq	.LCB4038
	b	.L614	@long jump
.LCB4038:
.L620:
	mov	r0, #0x0
	strh	r0, [r4, #0x2]
	mov	r0, #0x3
	strh	r0, [r4]
.L621:
	mov	r1, #0x2
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4
	bgt	.L623	@cond_branch
	mov	r2, #0x6
	ldrsh	r0, [r4, r2]
	mov	r3, #0x2
	ldrsh	r1, [r4, r3]
	asr	r0, r0, r1
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L623	@cond_branch
	mov	r2, #0x1
.L624:
	ldrh	r0, [r4, #0x2]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bgt	.L623	@cond_branch
	mov	r5, #0x6
	ldrsh	r0, [r4, r5]
	mov	r3, #0x2
	ldrsh	r1, [r4, r3]
	asr	r0, r0, r1
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L624	@cond_branch
.L623:
	ldrh	r1, [r4, #0x2]
	mov	r5, #0x2
	ldrsh	r0, [r4, r5]
	cmp	r0, #0x5
	bne	.LCB4082
	b	.L649	@long jump
.LCB4082:
	strh	r1, [r4, #0x4]
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	bl	ResetBlockReceivedFlag
	mov	r1, #0x2
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x8
	ldr	r1, .L661
	add	r0, r0, r1
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r0, #0x4
	bhi	.L631	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L661+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L662:
	.align	2, 0
.L661:
	.word	gBlockRecvBuffer
	.word	.L636
	.align	2, 0
	.align	2, 0
.L636:
	.word	.L631
	.word	.L632
	.word	.L633
	.word	.L634
	.word	.L635
.L631:
	mov	r0, #0x3
	b	.L653
.L632:
	mov	r0, #0x3
	b	.L653
.L633:
	mov	r0, #0x4
	b	.L653
.L634:
	mov	r0, #0x5
	b	.L653
.L635:
	mov	r0, #0x6
.L653:
	strh	r0, [r4, #0xa]
	ldr	r5, .L663
	ldr	r0, [r5]
	add	r0, r0, #0x39
	mov	r2, #0x2
	ldrsh	r1, [r4, r2]
	lsl	r1, r1, #0x8
	ldr	r2, .L663+0x4
	add	r1, r1, r2
	bl	ProcessReceivedChatMessage
	cmp	r0, #0
	beq	.L637	@cond_branch
	ldr	r0, [r5]
	ldrh	r1, [r4, #0x2]
	strb	r1, [r0, #0x16]
	mov	r0, #0xc
	mov	r1, #0x2
	bl	StartDisplaySubtask
	mov	r0, #0x7
	b	.L654
.L664:
	.align	2, 0
.L663:
	.word	sChat
	.word	gBlockRecvBuffer
.L637:
	ldrh	r0, [r4, #0xa]
.L654:
	strh	r0, [r4]
	ldrh	r0, [r4, #0x2]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2]
	b	.L614
.L639:
	mov	r0, #0x2
	bl	IsDisplaySubtaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L614	@cond_branch
	ldrh	r0, [r4, #0xa]
	b	.L655
.L641:
	ldr	r6, .L665
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0
	bne	.L642	@cond_branch
	mov	r3, #0x4
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L642	@cond_branch
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L643	@cond_branch
	bl	sub_80104B0
	ldr	r1, [r6]
	mov	r0, #0x1
	b	.L656
.L666:
	.align	2, 0
.L665:
	.word	sChat
.L643:
	mov	r5, #0x4
	ldrsh	r0, [r4, r5]
	bl	sub_8011DE0
.L642:
	mov	r0, #0x3
	b	.L655
.L644:
	ldr	r0, .L667
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0
	beq	.L652	@cond_branch
	mov	r0, #0x2
	b	.L656
.L668:
	.align	2, 0
.L667:
	.word	sChat
.L646:
	ldr	r0, .L669
	ldr	r1, [r0]
	mov	r0, #0x3
.L656:
	strb	r0, [r1, #0x17]
.L652:
	add	r0, r5, #0
	bl	DestroyTask
	b	.L614
.L670:
	.align	2, 0
.L669:
	.word	sChat
.L647:
	bl	sub_8011A9C
	cmp	r0, #0
	bne	.L614	@cond_branch
	ldr	r0, .L671
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0
	bne	.L649	@cond_branch
	ldrb	r0, [r1, #0xd]
	bl	sub_80110B8
.L649:
	mov	r0, #0x1
.L655:
	strh	r0, [r4]
.L614:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L672:
	.align	2, 0
.L671:
	.word	sChat
.Lfe51:
	.size	 Task_ReceiveChatMessage,.Lfe51-Task_ReceiveChatMessage
	.align	2, 0
	.type	 TryAllocDisplay,function
	.thumb_func
TryAllocDisplay:
	push	{r4, lr}
	ldr	r4, .L677
	ldr	r0, .L677+0x4
	bl	Alloc
	str	r0, [r4]
	cmp	r0, #0
	beq	.L674	@cond_branch
	bl	TryAllocSprites
	cmp	r0, #0
	beq	.L674	@cond_branch
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L677+0x8
	mov	r0, #0x0
	mov	r2, #0x4
	bl	InitBgsFromTemplates
	ldr	r0, .L677+0xc
	bl	InitWindows
	bl	ResetTempTileDataBuffers
	bl	InitScanlineEffect
	ldr	r0, [r4]
	bl	InitDisplay
	bl	ResetDisplaySubtasks
	mov	r0, #0x0
	mov	r1, #0x0
	bl	StartDisplaySubtask
	mov	r0, #0x1
	b	.L676
.L678:
	.align	2, 0
.L677:
	.word	sDisplay
	.word	0x2168
	.word	sBgTemplates
	.word	sWinTemplates
.L674:
	mov	r0, #0x0
.L676:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe52:
	.size	 TryAllocDisplay,.Lfe52-TryAllocDisplay
	.align	2, 0
	.type	 IsDisplaySubtask0Active,function
	.thumb_func
IsDisplaySubtask0Active:
	push	{lr}
	mov	r0, #0x0
	bl	IsDisplaySubtaskActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe53:
	.size	 IsDisplaySubtask0Active,.Lfe53-IsDisplaySubtask0Active
	.align	2, 0
	.type	 FreeDisplay,function
	.thumb_func
FreeDisplay:
	push	{r4, lr}
	bl	FreeSprites
	ldr	r4, .L682
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L681	@cond_branch
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
.L681:
	bl	FreeAllWindowBuffers
	ldr	r1, .L682+0x4
	mov	r0, #0x3
	strb	r0, [r1, #0x15]
	pop	{r4}
	pop	{r0}
	bx	r0
.L683:
	.align	2, 0
.L682:
	.word	sDisplay
	.word	gScanlineEffect
.Lfe54:
	.size	 FreeDisplay,.Lfe54-FreeDisplay
	.align	2, 0
	.type	 InitDisplay,function
	.thumb_func
InitDisplay:
	mov	r2, #0x0
	mov	r1, #0xff
	strh	r1, [r0, #0x18]
	strh	r1, [r0, #0x1e]
	strh	r2, [r0, #0x1a]
	bx	lr
.Lfe55:
	.size	 InitDisplay,.Lfe55-InitDisplay
	.align	2, 0
	.type	 ResetDisplaySubtasks,function
	.thumb_func
ResetDisplaySubtasks:
	push	{r4, r5, lr}
	ldr	r1, .L692
	ldr	r0, [r1]
	cmp	r0, #0
	beq	.L685	@cond_branch
	mov	r2, #0x0
	add	r4, r1, #0
	ldr	r5, .L692+0x4
	mov	r3, #0x0
.L690:
	ldr	r0, [r4]
	lsl	r1, r2, #0x3
	add	r0, r0, r1
	str	r5, [r0]
	strb	r3, [r0, #0x4]
	ldr	r0, [r4]
	add	r0, r0, r1
	strb	r3, [r0, #0x5]
	add	r2, r2, #0x1
	cmp	r2, #0x2
	ble	.L690	@cond_branch
.L685:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L693:
	.align	2, 0
.L692:
	.word	sDisplay
	.word	Display_Dummy
.Lfe56:
	.size	 ResetDisplaySubtasks,.Lfe56-ResetDisplaySubtasks
	.align	2, 0
	.type	 RunDisplaySubtasks,function
	.thumb_func
RunDisplaySubtasks:
	push	{r4, r5, r6, lr}
	ldr	r1, .L701
	ldr	r0, [r1]
	cmp	r0, #0
	beq	.L694	@cond_branch
	mov	r5, #0x0
	add	r6, r1, #0
.L699:
	ldr	r1, [r6]
	lsl	r4, r5, #0x3
	add	r1, r1, r4
	add	r0, r1, #0x5
	ldr	r1, [r1]
	bl	_call_via_r1
	ldr	r1, [r6]
	add	r1, r1, r4
	strb	r0, [r1, #0x4]
	add	r5, r5, #0x1
	cmp	r5, #0x2
	ble	.L699	@cond_branch
.L694:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L702:
	.align	2, 0
.L701:
	.word	sDisplay
.Lfe57:
	.size	 RunDisplaySubtasks,.Lfe57-RunDisplaySubtasks
	.align	2, 0
	.type	 StartDisplaySubtask,function
	.thumb_func
StartDisplaySubtask:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x18
	ldr	r3, .L710
	ldr	r0, [r3]
	lsr	r1, r1, #0x15
	add	r0, r0, r1
	ldr	r2, .L710+0x4
	str	r2, [r0]
	mov	r4, #0x0
	add	r5, r3, #0
	add	r3, r1, #0
	mov	ip, r4
	ldr	r1, .L710+0x8
	mov	r7, #0x1
	add	r2, r1, #0x4
.L707:
	ldrh	r0, [r1]
	cmp	r0, r6
	bne	.L706	@cond_branch
	ldr	r1, [r5]
	add	r1, r1, r3
	ldr	r0, [r2]
	str	r0, [r1]
	strb	r7, [r1, #0x4]
	ldr	r0, [r5]
	add	r0, r0, r3
	mov	r1, ip
	strb	r1, [r0, #0x5]
	b	.L705
.L711:
	.align	2, 0
.L710:
	.word	sDisplay
	.word	Display_Dummy
	.word	sDisplaySubtasks
.L706:
	add	r1, r1, #0x8
	add	r2, r2, #0x8
	add	r4, r4, #0x1
	cmp	r4, #0x14
	bls	.L707	@cond_branch
.L705:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 StartDisplaySubtask,.Lfe58-StartDisplaySubtask
	.align	2, 0
	.type	 IsDisplaySubtaskActive,function
	.thumb_func
IsDisplaySubtaskActive:
	lsl	r0, r0, #0x18
	ldr	r1, .L713
	ldr	r1, [r1]
	lsr	r0, r0, #0x15
	add	r1, r1, r0
	ldrb	r0, [r1, #0x4]
	bx	lr
.L714:
	.align	2, 0
.L713:
	.word	sDisplay
.Lfe59:
	.size	 IsDisplaySubtaskActive,.Lfe59-IsDisplaySubtaskActive
	.align	2, 0
	.type	 Display_LoadGfx,function
	.thumb_func
Display_LoadGfx:
	push	{r4, lr}
	add	r4, r0, #0
	bl	FreeTempTileDataBuffersIfPossible
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L729	@cond_branch
	ldrb	r0, [r4]
	cmp	r0, #0x6
	bhi	.L726	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L730
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L731:
	.align	2, 0
.L730:
	.word	.L727
	.align	2, 0
	.align	2, 0
.L727:
	.word	.L718
	.word	.L719
	.word	.L720
	.word	.L721
	.word	.L722
	.word	.L723
	.word	.L724
.L718:
	bl	ResetGpuBgState
	bl	SetBgTilemapBuffers
	b	.L717
.L719:
	bl	ClearBg0
	b	.L717
.L720:
	bl	LoadChatWindowBorderGfx
	b	.L717
.L721:
	bl	LoadChatWindowGfx
	b	.L717
.L722:
	bl	sub_8020680
	b	.L717
.L723:
	bl	LoadChatMessagesWindow
	bl	LoadKeyboardWindow
	bl	LoadKeyboardSwapWindow
	bl	LoadTextEntryWindow
	b	.L717
.L724:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L717	@cond_branch
	bl	CreateKeyboardCursorSprite
	bl	CreateTextEntrySprites
	bl	CreateRButtonSprites
	b	.L717
.L726:
	mov	r0, #0x0
	b	.L728
.L717:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
.L729:
	mov	r0, #0x1
.L728:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe60:
	.size	 Display_LoadGfx,.Lfe60-Display_LoadGfx
	.align	2, 0
	.type	 Display_ShowKeyboardSwapMenu,function
	.thumb_func
Display_ShowKeyboardSwapMenu:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L734	@cond_branch
	cmp	r0, #0x1
	beq	.L735	@cond_branch
	b	.L733
.L734:
	bl	ShowKeyboardSwapMenu
	mov	r0, #0x3
	mov	r1, #0x3
	bl	CopyWindowToVram
	b	.L733
.L735:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L738
.L733:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	mov	r0, #0x1
.L738:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe61:
	.size	 Display_ShowKeyboardSwapMenu,.Lfe61-Display_ShowKeyboardSwapMenu
	.align	2, 0
	.type	 Display_HideKeyboardSwapMenu,function
	.thumb_func
Display_HideKeyboardSwapMenu:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L741	@cond_branch
	cmp	r0, #0x1
	beq	.L742	@cond_branch
	b	.L740
.L741:
	bl	HideKeyboardSwapMenu
	mov	r0, #0x3
	mov	r1, #0x3
	bl	CopyWindowToVram
	b	.L740
.L742:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L745
.L740:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	mov	r0, #0x1
.L745:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe62:
	.size	 Display_HideKeyboardSwapMenu,.Lfe62-Display_HideKeyboardSwapMenu
	.align	2, 0
	.type	 Display_SwitchPages,function
	.thumb_func
Display_SwitchPages:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0x1
	beq	.L750	@cond_branch
	cmp	r0, #0x1
	bgt	.L756	@cond_branch
	cmp	r0, #0
	beq	.L748	@cond_branch
	b	.L747
.L756:
	cmp	r0, #0x2
	beq	.L752	@cond_branch
	b	.L747
.L748:
	mov	r0, #0x1
	bl	SetKeyboardCursorInvisibility
	bl	sub_8020320
	cmp	r0, #0
	bne	.L758	@cond_branch
	bl	PrintCurrentKeyboardPage
	mov	r0, #0x2
	mov	r1, #0x2
	bl	CopyWindowToVram
	b	.L747
.L750:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L747	@cond_branch
	b	.L758
.L752:
	bl	sub_8020368
	cmp	r0, #0
	bne	.L758	@cond_branch
	bl	MoveKeyboardCursor
	mov	r0, #0x0
	bl	SetKeyboardCursorInvisibility
	bl	UpdateRButtonLabel
	mov	r0, #0x0
	b	.L757
.L747:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
.L758:
	mov	r0, #0x1
.L757:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe63:
	.size	 Display_SwitchPages,.Lfe63-Display_SwitchPages
	.align	2, 0
	.type	 Display_MoveKeyboardCursor,function
	.thumb_func
Display_MoveKeyboardCursor:
	push	{lr}
	bl	MoveKeyboardCursor
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe64:
	.size	 Display_MoveKeyboardCursor,.Lfe64-Display_MoveKeyboardCursor
	.align	2, 0
	.type	 Display_AskQuitChatting,function
	.thumb_func
Display_AskQuitChatting:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L762	@cond_branch
	cmp	r0, #0x1
	beq	.L763	@cond_branch
	b	.L761
.L762:
	mov	r0, #0x0
	mov	r1, #0x0
	bl	AddStdMessageWindow
	mov	r0, #0x17
	mov	r1, #0xb
	mov	r2, #0x1
	bl	AddYesNoMenuAt
	ldr	r0, .L767
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	b	.L761
.L768:
	.align	2, 0
.L767:
	.word	sDisplay
.L763:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L766
.L761:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	mov	r0, #0x1
.L766:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe65:
	.size	 Display_AskQuitChatting,.Lfe65-Display_AskQuitChatting
	.align	2, 0
	.type	 Display_DestroyYesNoDialog,function
	.thumb_func
Display_DestroyYesNoDialog:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L771	@cond_branch
	cmp	r0, #0x1
	beq	.L772	@cond_branch
	b	.L770
.L771:
	bl	HideStdMessageWindow
	bl	HideYesNoMenuWindow
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	b	.L770
.L772:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L777	@cond_branch
	bl	DestroyStdMessageWindow
	bl	DestroyYesNoMenuWindow
	mov	r0, #0x0
	b	.L776
.L770:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
.L777:
	mov	r0, #0x1
.L776:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe66:
	.size	 Display_DestroyYesNoDialog,.Lfe66-Display_DestroyYesNoDialog
	.align	2, 0
	.type	 Display_UpdateMessageBuffer,function
	.thumb_func
Display_UpdateMessageBuffer:
	push	{r4, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L780	@cond_branch
	cmp	r0, #0x1
	beq	.L781	@cond_branch
	b	.L779
.L780:
	add	r1, sp, #0x8
	add	r0, sp, #0x4
	bl	GetBufferSelectionRegion
	ldr	r0, [sp, #0x4]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, [sp, #0x8]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r2, #0x0
	bl	FillTextEntryWindow
	bl	GetMessageEntryBuffer
	add	r1, r0, #0
	mov	r0, #0x2
	str	r0, [sp]
	mov	r0, #0x0
	mov	r2, #0x3
	mov	r3, #0x1
	bl	DrawTextEntryMessage
	mov	r0, #0x1
	mov	r1, #0x2
	bl	CopyWindowToVram
	b	.L779
.L781:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L786	@cond_branch
	bl	UpdateRButtonLabel
	mov	r0, #0x0
	b	.L785
.L779:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
.L786:
	mov	r0, #0x1
.L785:
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe67:
	.size	 Display_UpdateMessageBuffer,.Lfe67-Display_UpdateMessageBuffer
	.align	2, 0
	.type	 Display_AskRegisterText,function
	.thumb_func
Display_AskRegisterText:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	ldrb	r0, [r6]
	cmp	r0, #0x1
	beq	.L790	@cond_branch
	cmp	r0, #0x1
	bgt	.L799	@cond_branch
	cmp	r0, #0
	beq	.L789	@cond_branch
	b	.L788
.L799:
	cmp	r0, #0x2
	beq	.L793	@cond_branch
	cmp	r0, #0x3
	beq	.L796	@cond_branch
	b	.L788
.L789:
	bl	GetLimitedMessageStartPos
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	bl	GetLimitedMessageStartPtr
	add	r5, r0, #0
	bl	StringLength_Multibyte
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x66
	bl	FillTextEntryWindow
	mov	r0, #0x5
	str	r0, [sp]
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x0
	mov	r3, #0x4
	bl	DrawTextEntryMessage
	mov	r0, #0x1
	mov	r1, #0x2
	bl	CopyWindowToVram
	b	.L788
.L790:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L801	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x10
	bl	AddStdMessageWindow
	ldr	r0, .L802
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	b	.L788
.L803:
	.align	2, 0
.L802:
	.word	sDisplay
.L793:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L801	@cond_branch
	mov	r0, #0x1
	bl	SetRegisteredTextPalette
	b	.L788
.L796:
	mov	r0, #0x0
	b	.L800
.L788:
	ldrb	r0, [r6]
	add	r0, r0, #0x1
	strb	r0, [r6]
.L801:
	mov	r0, #0x1
.L800:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe68:
	.size	 Display_AskRegisterText,.Lfe68-Display_AskRegisterText
	.align	2, 0
	.type	 Display_CancelRegister,function
	.thumb_func
Display_CancelRegister:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	ldrb	r0, [r6]
	cmp	r0, #0x1
	beq	.L807	@cond_branch
	cmp	r0, #0x1
	bgt	.L816	@cond_branch
	cmp	r0, #0
	beq	.L806	@cond_branch
	b	.L805
.L816:
	cmp	r0, #0x2
	beq	.L810	@cond_branch
	cmp	r0, #0x3
	beq	.L813	@cond_branch
	b	.L805
.L806:
	bl	GetLimitedMessageStartPos
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	bl	GetLimitedMessageStartPtr
	add	r5, r0, #0
	bl	StringLength_Multibyte
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x0
	bl	FillTextEntryWindow
	mov	r0, #0x2
	str	r0, [sp]
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x3
	mov	r3, #0x1
	bl	DrawTextEntryMessage
	mov	r0, #0x1
	mov	r1, #0x2
	bl	CopyWindowToVram
	b	.L805
.L807:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L818	@cond_branch
	bl	HideStdMessageWindow
	ldr	r0, .L819
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	b	.L805
.L820:
	.align	2, 0
.L819:
	.word	sDisplay
.L810:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L818	@cond_branch
	mov	r0, #0x0
	bl	SetRegisteredTextPalette
	bl	DestroyStdMessageWindow
	b	.L805
.L813:
	mov	r0, #0x0
	b	.L817
.L805:
	ldrb	r0, [r6]
	add	r0, r0, #0x1
	strb	r0, [r6]
.L818:
	mov	r0, #0x1
.L817:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe69:
	.size	 Display_CancelRegister,.Lfe69-Display_CancelRegister
	.align	2, 0
	.type	 Display_ReturnToKeyboard,function
	.thumb_func
Display_ReturnToKeyboard:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L823	@cond_branch
	cmp	r0, #0x1
	beq	.L824	@cond_branch
	b	.L822
.L823:
	bl	PrintCurrentKeyboardPage
	mov	r0, #0x2
	mov	r1, #0x2
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L822
.L824:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L822	@cond_branch
	mov	r0, #0x0
	b	.L829
.L822:
	mov	r0, #0x1
.L829:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe70:
	.size	 Display_ReturnToKeyboard,.Lfe70-Display_ReturnToKeyboard
	.align	2, 0
	.type	 Display_ScrollChat,function
	.thumb_func
Display_ScrollChat:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	ldrb	r0, [r6]
	cmp	r0, #0x4
	bhi	.L845	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L848
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L849:
	.align	2, 0
.L848:
	.word	.L843
	.align	2, 0
	.align	2, 0
.L843:
	.word	.L832
	.word	.L833
	.word	.L837
	.word	.L838
	.word	.L847
.L832:
	ldr	r0, .L850
	ldr	r0, [r0]
	ldrh	r5, [r0, #0x1a]
	bl	GetLastReceivedMessage
	add	r4, r0, #0
	bl	GetReceivedPlayerIndex
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r5, #0
	add	r1, r4, #0
	bl	PrintChatMessage
	mov	r0, #0x0
	mov	r1, #0x2
	bl	CopyWindowToVram
	b	.L831
.L851:
	.align	2, 0
.L850:
	.word	sDisplay
.L833:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	bne	.L845	@cond_branch
	ldr	r0, .L852
	ldr	r1, [r0]
	ldrh	r0, [r1, #0x1a]
	cmp	r0, #0x8
	bhi	.L835	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1a]
	mov	r0, #0x4
	strb	r0, [r6]
.L847:
	mov	r0, #0x0
	b	.L844
.L853:
	.align	2, 0
.L852:
	.word	sDisplay
.L835:
	strh	r2, [r1, #0x1c]
	ldrb	r0, [r6]
	add	r0, r0, #0x1
	strb	r0, [r6]
.L837:
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x5
	mov	r3, #0x11
	bl	ScrollWindow
	mov	r0, #0x0
	mov	r1, #0x2
	bl	CopyWindowToVram
	ldr	r0, .L854
	ldr	r1, [r0]
	ldrh	r0, [r1, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1c]
	ldrb	r0, [r6]
	add	r0, r0, #0x1
	strb	r0, [r6]
.L838:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L845	@cond_branch
	ldr	r0, .L854
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x1c]
	cmp	r0, #0x2
	bhi	.L831	@cond_branch
	ldrb	r0, [r6]
	sub	r0, r0, #0x1
	b	.L846
.L855:
	.align	2, 0
.L854:
	.word	sDisplay
.L831:
	ldrb	r0, [r6]
	add	r0, r0, #0x1
.L846:
	strb	r0, [r6]
.L845:
	mov	r0, #0x1
.L844:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe71:
	.size	 Display_ScrollChat,.Lfe71-Display_ScrollChat
	.align	2, 0
	.type	 Display_AnimateKeyboardCursor,function
	.thumb_func
Display_AnimateKeyboardCursor:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L858	@cond_branch
	cmp	r0, #0x1
	beq	.L859	@cond_branch
	b	.L857
.L858:
	bl	StartKeyboardCursorAnim
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L857
.L859:
	bl	TryKeyboardCursorReopen
	b	.L862
.L857:
	mov	r0, #0x1
.L862:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe72:
	.size	 Display_AnimateKeyboardCursor,.Lfe72-Display_AnimateKeyboardCursor
	.align	2, 0
	.type	 Display_PrintInputText,function
	.thumb_func
Display_PrintInputText:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L865	@cond_branch
	cmp	r0, #0x1
	beq	.L866	@cond_branch
	b	.L864
.L865:
	mov	r0, #0x3
	mov	r1, #0x10
	bl	AddStdMessageWindow
	ldr	r0, .L870
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L864
.L871:
	.align	2, 0
.L870:
	.word	sDisplay
.L866:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L869
.L864:
	mov	r0, #0x1
.L869:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe73:
	.size	 Display_PrintInputText,.Lfe73-Display_PrintInputText
	.align	2, 0
	.type	 Display_PrintExitingChat,function
	.thumb_func
Display_PrintExitingChat:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L874	@cond_branch
	cmp	r0, #0x1
	beq	.L875	@cond_branch
	b	.L873
.L874:
	mov	r0, #0x4
	mov	r1, #0x0
	bl	AddStdMessageWindow
	ldr	r0, .L879
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L873
.L880:
	.align	2, 0
.L879:
	.word	sDisplay
.L875:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L878
.L873:
	mov	r0, #0x1
.L878:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe74:
	.size	 Display_PrintExitingChat,.Lfe74-Display_PrintExitingChat
	.align	2, 0
	.type	 Display_PrintLeaderLeft,function
	.thumb_func
Display_PrintLeaderLeft:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L883	@cond_branch
	cmp	r0, #0x1
	beq	.L884	@cond_branch
	b	.L882
.L883:
	bl	DynamicPlaceholderTextUtil_Reset
	bl	GetChatHostName
	add	r1, r0, #0
	mov	r0, #0x0
	bl	DynamicPlaceholderTextUtil_SetPlaceholderPtr
	mov	r0, #0x5
	mov	r1, #0x0
	bl	AddStdMessageWindow
	ldr	r0, .L888
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L882
.L889:
	.align	2, 0
.L888:
	.word	sDisplay
.L884:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L887
.L882:
	mov	r0, #0x1
.L887:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe75:
	.size	 Display_PrintLeaderLeft,.Lfe75-Display_PrintLeaderLeft
	.align	2, 0
	.type	 Display_AskSave,function
	.thumb_func
Display_AskSave:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L892	@cond_branch
	cmp	r0, #0x1
	beq	.L893	@cond_branch
	b	.L891
.L892:
	mov	r0, #0x6
	mov	r1, #0x0
	bl	AddStdMessageWindow
	mov	r0, #0x17
	mov	r1, #0xa
	mov	r2, #0x1
	bl	AddYesNoMenuAt
	ldr	r0, .L897
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L891
.L898:
	.align	2, 0
.L897:
	.word	sDisplay
.L893:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L896
.L891:
	mov	r0, #0x1
.L896:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe76:
	.size	 Display_AskSave,.Lfe76-Display_AskSave
	.align	2, 0
	.type	 Display_AskOverwriteSave,function
	.thumb_func
Display_AskOverwriteSave:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L901	@cond_branch
	cmp	r0, #0x1
	beq	.L902	@cond_branch
	b	.L900
.L901:
	mov	r0, #0x7
	mov	r1, #0x0
	bl	AddStdMessageWindow
	mov	r0, #0x17
	mov	r1, #0xa
	mov	r2, #0x1
	bl	AddYesNoMenuAt
	ldr	r0, .L906
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L900
.L907:
	.align	2, 0
.L906:
	.word	sDisplay
.L902:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L905
.L900:
	mov	r0, #0x1
.L905:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe77:
	.size	 Display_AskOverwriteSave,.Lfe77-Display_AskOverwriteSave
	.align	2, 0
	.type	 Display_PrintSavingDontTurnOff,function
	.thumb_func
Display_PrintSavingDontTurnOff:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L910	@cond_branch
	cmp	r0, #0x1
	beq	.L911	@cond_branch
	b	.L909
.L910:
	mov	r0, #0x8
	mov	r1, #0x0
	bl	AddStdMessageWindow
	ldr	r0, .L915
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L909
.L916:
	.align	2, 0
.L915:
	.word	sDisplay
.L911:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L914
.L909:
	mov	r0, #0x1
.L914:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe78:
	.size	 Display_PrintSavingDontTurnOff,.Lfe78-Display_PrintSavingDontTurnOff
	.align	2, 0
	.type	 Display_PrintSavedTheGame,function
	.thumb_func
Display_PrintSavedTheGame:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L919	@cond_branch
	cmp	r0, #0x1
	beq	.L920	@cond_branch
	b	.L918
.L919:
	bl	DynamicPlaceholderTextUtil_Reset
	ldr	r0, .L924
	ldr	r1, [r0]
	mov	r0, #0x0
	bl	DynamicPlaceholderTextUtil_SetPlaceholderPtr
	mov	r0, #0x9
	mov	r1, #0x0
	bl	AddStdMessageWindow
	ldr	r0, .L924+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L918
.L925:
	.align	2, 0
.L924:
	.word	gSaveBlock2Ptr
	.word	sDisplay
.L920:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L923
.L918:
	mov	r0, #0x1
.L923:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe79:
	.size	 Display_PrintSavedTheGame,.Lfe79-Display_PrintSavedTheGame
	.align	2, 0
	.type	 Display_AskConfirmLeaderLeave,function
	.thumb_func
Display_AskConfirmLeaderLeave:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L928	@cond_branch
	cmp	r0, #0x1
	beq	.L929	@cond_branch
	b	.L927
.L928:
	mov	r0, #0xa
	mov	r1, #0x0
	bl	AddStdMessageWindow
	mov	r0, #0x17
	mov	r1, #0xa
	mov	r2, #0x1
	bl	AddYesNoMenuAt
	ldr	r0, .L933
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L927
.L934:
	.align	2, 0
.L933:
	.word	sDisplay
.L929:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L932
.L927:
	mov	r0, #0x1
.L932:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe80:
	.size	 Display_AskConfirmLeaderLeave,.Lfe80-Display_AskConfirmLeaderLeave
	.align	2, 0
	.type	 Display_Dummy,function
	.thumb_func
Display_Dummy:
	mov	r0, #0x0
	bx	lr
.Lfe81:
	.size	 Display_Dummy,.Lfe81-Display_Dummy
	.align	2, 0
	.type	 AddYesNoMenuAt,function
	.thumb_func
AddYesNoMenuAt:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	ldr	r4, .L938
	ldr	r2, [sp, #0xc]
	and	r2, r2, r4
	lsr	r0, r0, #0x10
	ldr	r3, .L938+0x4
	and	r2, r2, r3
	orr	r2, r2, r0
	lsr	r1, r1, #0x8
	ldr	r0, .L938+0x8
	and	r2, r2, r0
	orr	r2, r2, r1
	ldr	r0, .L938+0xc
	and	r2, r2, r0
	mov	r0, #0xc0
	lsl	r0, r0, #0x13
	orr	r2, r2, r0
	str	r2, [sp, #0xc]
	ldr	r0, [sp, #0x10]
	and	r0, r0, r4
	mov	r1, #0x4
	orr	r0, r0, r1
	and	r0, r0, r3
	mov	r1, #0xe0
	lsl	r1, r1, #0x4
	orr	r0, r0, r1
	ldr	r1, .L938+0x10
	and	r0, r0, r1
	mov	r1, #0xa4
	lsl	r1, r1, #0xf
	orr	r0, r0, r1
	str	r0, [sp, #0x10]
	add	r0, sp, #0xc
	bl	AddWindow
	add	r1, r0, #0
	ldr	r5, .L938+0x14
	ldr	r0, [r5]
	mov	r6, #0x0
	strh	r1, [r0, #0x18]
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xff
	beq	.L937	@cond_branch
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x18]
	bl	PutWindowTilemap
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x18]
	ldr	r2, .L938+0x18
	mov	r1, #0x1
	str	r1, [sp]
	mov	r4, #0xff
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r3, #0x8
	bl	AddTextPrinterParameterized
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x18]
	ldr	r2, .L938+0x1c
	mov	r1, #0x11
	str	r1, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x8
	bl	AddTextPrinterParameterized
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x18]
	mov	r1, #0x1
	mov	r2, #0xd
	bl	DrawTextBorderOuter
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x18]
	mov	r1, #0x2
	add	r2, r7, #0
	bl	InitMenuInUpperLeftCornerPlaySoundWhenAPressed
.L937:
	add	sp, sp, #0x14
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L939:
	.align	2, 0
.L938:
	.word	-0x100
	.word	-0xff01
	.word	-0xff0001
	.word	0xffffff
	.word	0xffff
	.word	sDisplay
	.word	gText_Yes
	.word	gText_No
.Lfe82:
	.size	 AddYesNoMenuAt,.Lfe82-AddYesNoMenuAt
	.align	2, 0
	.type	 HideYesNoMenuWindow,function
	.thumb_func
HideYesNoMenuWindow:
	push	{r4, lr}
	ldr	r4, .L942
	ldr	r0, [r4]
	ldrh	r0, [r0, #0x18]
	cmp	r0, #0xff
	beq	.L941	@cond_branch
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x18]
	bl	ClearWindowTilemap
.L941:
	pop	{r4}
	pop	{r0}
	bx	r0
.L943:
	.align	2, 0
.L942:
	.word	sDisplay
.Lfe83:
	.size	 HideYesNoMenuWindow,.Lfe83-HideYesNoMenuWindow
	.align	2, 0
	.type	 DestroyYesNoMenuWindow,function
	.thumb_func
DestroyYesNoMenuWindow:
	push	{r4, lr}
	ldr	r4, .L946
	ldr	r0, [r4]
	ldrh	r0, [r0, #0x18]
	cmp	r0, #0xff
	beq	.L945	@cond_branch
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	RemoveWindow
	ldr	r1, [r4]
	mov	r0, #0xff
	strh	r0, [r1, #0x18]
.L945:
	pop	{r4}
	pop	{r0}
	bx	r0
.L947:
	.align	2, 0
.L946:
	.word	sDisplay
.Lfe84:
	.size	 DestroyYesNoMenuWindow,.Lfe84-DestroyYesNoMenuWindow
	.align	2, 0
	.type	 ProcessMenuInput,function
	.thumb_func
ProcessMenuInput:
	push	{lr}
	bl	Menu_ProcessInput
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe85:
	.size	 ProcessMenuInput,.Lfe85-ProcessMenuInput
	.align	2, 0
	.type	 AddStdMessageWindow,function
	.thumb_func
AddStdMessageWindow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x1c
	add	r7, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r9, r1
	ldr	r1, .L956
	ldr	r3, [sp, #0x14]
	and	r3, r3, r1
	ldr	r2, .L956+0x4
	and	r3, r3, r2
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	orr	r3, r3, r0
	ldr	r0, .L956+0x8
	and	r3, r3, r0
	mov	r0, #0x80
	lsl	r0, r0, #0xd
	orr	r3, r3, r0
	ldr	r5, .L956+0xc
	and	r3, r3, r5
	mov	r0, #0xa8
	lsl	r0, r0, #0x15
	orr	r3, r3, r0
	str	r3, [sp, #0x14]
	ldr	r0, [sp, #0x18]
	and	r0, r0, r1
	mov	r1, #0x4
	orr	r0, r0, r1
	and	r0, r0, r2
	mov	r1, #0xe0
	lsl	r1, r1, #0x4
	orr	r0, r0, r1
	ldr	r1, .L956+0x10
	and	r0, r0, r1
	mov	r1, #0xd4
	lsl	r1, r1, #0xf
	orr	r0, r0, r1
	str	r0, [sp, #0x18]
	ldr	r1, .L956+0x14
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrb	r0, [r4, #0xa]
	cmp	r0, #0
	beq	.L950	@cond_branch
	lsl	r0, r3, #0x10
	mov	r1, #0xf9
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	and	r2, r2, r3
	orr	r2, r2, r0
	lsr	r1, r2, #0x18
	add	r1, r1, #0x7
	lsl	r1, r1, #0x18
	add	r0, r5, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [sp, #0x14]
.L950:
	add	r0, sp, #0x14
	bl	AddWindow
	ldr	r5, .L956+0x18
	ldr	r1, [r5]
	strh	r0, [r1, #0x1e]
	ldrh	r0, [r1, #0x1e]
	mov	r8, r0
	cmp	r0, #0xff
	beq	.L949	@cond_branch
	ldrb	r0, [r4, #0x9]
	cmp	r0, #0
	beq	.L952	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldr	r1, [r4]
	bl	DynamicPlaceholderTextUtil_ExpandPlaceholders
	ldr	r0, [r5]
	add	r6, r0, #0
	add	r6, r6, #0x22
	b	.L953
.L957:
	.align	2, 0
.L956:
	.word	-0x100
	.word	-0xff01
	.word	-0xff0001
	.word	0xffffff
	.word	0xffff
	.word	sDisplayStdMessages
	.word	sDisplay
.L952:
	ldr	r6, [r4]
.L953:
	mov	r0, r9
	lsl	r1, r0, #0x8
	mov	r0, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r1, r8
	lsl	r0, r1, #0x18
	lsr	r5, r0, #0x18
	add	r0, r5, #0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	add	r0, r5, #0
	bl	PutWindowTilemap
	ldr	r1, .L958
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrb	r0, [r4, #0x4]
	cmp	r0, #0x1
	bne	.L954	@cond_branch
	add	r0, r5, #0
	mov	r1, #0xa
	mov	r2, #0x2
	bl	DrawTextBorderInner
	ldrb	r3, [r4, #0x5]
	add	r3, r3, #0x8
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldrb	r0, [r4, #0x6]
	add	r0, r0, #0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	ldrb	r0, [r4, #0x7]
	str	r0, [sp, #0xc]
	ldrb	r0, [r4, #0x8]
	str	r0, [sp, #0x10]
	add	r0, r5, #0
	mov	r1, #0x1
	add	r2, r6, #0
	bl	AddTextPrinterParameterized5
	b	.L955
.L959:
	.align	2, 0
.L958:
	.word	sDisplayStdMessages
.L954:
	add	r0, r5, #0
	mov	r1, #0xa
	mov	r2, #0x2
	bl	DrawTextBorderOuter
	ldrb	r3, [r4, #0x5]
	ldrb	r0, [r4, #0x6]
	str	r0, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	ldrb	r0, [r4, #0x7]
	str	r0, [sp, #0xc]
	ldrb	r0, [r4, #0x8]
	str	r0, [sp, #0x10]
	add	r0, r5, #0
	mov	r1, #0x1
	add	r2, r6, #0
	bl	AddTextPrinterParameterized5
.L955:
	ldr	r0, .L960
	ldr	r0, [r0]
	mov	r1, r8
	strh	r1, [r0, #0x1e]
.L949:
	add	sp, sp, #0x1c
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L961:
	.align	2, 0
.L960:
	.word	sDisplay
.Lfe86:
	.size	 AddStdMessageWindow,.Lfe86-AddStdMessageWindow
	.align	2, 0
	.type	 HideStdMessageWindow,function
	.thumb_func
HideStdMessageWindow:
	push	{r4, lr}
	ldr	r4, .L964
	ldr	r0, [r4]
	ldrh	r0, [r0, #0x1e]
	cmp	r0, #0xff
	beq	.L963	@cond_branch
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1e]
	bl	ClearWindowTilemap
.L963:
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	pop	{r4}
	pop	{r0}
	bx	r0
.L965:
	.align	2, 0
.L964:
	.word	sDisplay
.Lfe87:
	.size	 HideStdMessageWindow,.Lfe87-HideStdMessageWindow
	.align	2, 0
	.type	 DestroyStdMessageWindow,function
	.thumb_func
DestroyStdMessageWindow:
	push	{r4, lr}
	ldr	r4, .L968
	ldr	r0, [r4]
	ldrh	r0, [r0, #0x1e]
	cmp	r0, #0xff
	beq	.L967	@cond_branch
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	RemoveWindow
	ldr	r1, [r4]
	mov	r0, #0xff
	strh	r0, [r1, #0x1e]
.L967:
	pop	{r4}
	pop	{r0}
	bx	r0
.L969:
	.align	2, 0
.L968:
	.word	sDisplay
.Lfe88:
	.size	 DestroyStdMessageWindow,.Lfe88-DestroyStdMessageWindow
	.align	2, 0
	.type	 FillTextEntryWindow,function
	.thumb_func
FillTextEntryWindow:
	push	{lr}
	add	sp, sp, #-0x8
	add	r3, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x13
	lsr	r3, r3, #0x10
	lsl	r1, r1, #0x13
	lsr	r1, r1, #0x10
	str	r1, [sp]
	mov	r0, #0xe
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	add	r1, r2, #0
	add	r2, r3, #0
	mov	r3, #0x1
	bl	FillWindowPixelRect
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.Lfe89:
	.size	 FillTextEntryWindow,.Lfe89-FillTextEntryWindow
	.align	2, 0
	.type	 DrawTextEntryMessage,function
	.thumb_func
DrawTextEntryMessage:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x34
	mov	sl, r1
	ldr	r1, [sp, #0x54]
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r9, r5
	lsl	r2, r2, #0x18
	lsr	r4, r2, #0x18
	mov	r8, r4
	lsl	r3, r3, #0x18
	lsr	r7, r3, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	cmp	r4, #0
	beq	.L972	@cond_branch
	bl	GetTextEntryCursorPosition
	add	r1, r0, #0
	sub	r1, r1, r5
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r5, #0
	add	r2, r4, #0
	bl	FillTextEntryWindow
.L972:
	add	r0, sp, #0xc
	mov	r1, r8
	strb	r1, [r0]
	strb	r7, [r0, #0x1]
	strb	r6, [r0, #0x2]
	add	r4, sp, #0x10
	mov	r0, #0xfc
	strb	r0, [r4]
	mov	r0, #0x14
	strb	r0, [r4, #0x1]
	mov	r0, #0x8
	strb	r0, [r4, #0x2]
	mov	r0, sp
	add	r0, r0, #0x13
	mov	r1, sl
	bl	StringCopy
	mov	r0, r9
	lsl	r2, r0, #0x1b
	lsr	r2, r2, #0x18
	add	r1, sp, #0xc
	str	r1, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r3, #0x1
	bl	AddTextPrinterParameterized3
	add	sp, sp, #0x34
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe90:
	.size	 DrawTextEntryMessage,.Lfe90-DrawTextEntryMessage
	.align	2, 0
	.type	 PrintCurrentKeyboardPage,function
	.thumb_func
PrintCurrentKeyboardPage:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4c
	mov	r0, #0x2
	mov	r1, #0xff
	bl	FillWindowPixelBuffer
	bl	GetCurrentKeyboardPage
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r1, sp, #0xc
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r0, #0xe
	strb	r0, [r1, #0x1]
	mov	r0, #0xd
	strb	r0, [r1, #0x2]
	cmp	r2, #0x3
	beq	.L974	@cond_branch
	add	r1, sp, #0x10
	mov	r0, #0xfc
	strb	r0, [r1]
	mov	r0, #0x14
	strb	r0, [r1, #0x1]
	mov	r0, #0x8
	strb	r0, [r1, #0x2]
	str	r0, [sp, #0x40]
	str	r1, [sp, #0x44]
	cmp	r2, #0x2
	bne	.L975	@cond_branch
	mov	r1, #0x6
	str	r1, [sp, #0x40]
.L975:
	mov	r7, #0x0
	mov	r6, #0x0
	lsl	r0, r2, #0x2
	ldr	r1, .L996
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldr	r0, [sp, #0x40]
	lsl	r5, r0, #0x18
.L980:
	ldr	r1, [r4]
	cmp	r1, #0
	bne	.LCB6705
	b	.L973	@long jump
.LCB6705:
	mov	r0, sp
	add	r0, r0, #0x13
	bl	StringCopy
	lsl	r3, r6, #0x18
	lsr	r3, r3, #0x18
	add	r1, sp, #0xc
	str	r1, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	ldr	r0, [sp, #0x44]
	str	r0, [sp, #0x8]
	mov	r0, #0x2
	mov	r1, #0x0
	lsr	r2, r5, #0x18
	bl	AddTextPrinterParameterized3
	add	r4, r4, #0x4
	add	r7, r7, #0x1
	add	r0, r6, #0
	add	r0, r0, #0xc
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r7, #0x9
	ble	.L980	@cond_branch
	b	.L973
.L997:
	.align	2, 0
.L996:
	.word	sUnionRoomKeyboardText
.L974:
	mov	r1, #0x4
	str	r1, [sp, #0x40]
	mov	r7, #0x0
	mov	r6, #0x0
.L987:
	add	r0, r7, #0
	bl	GetRegisteredTextByRow
	add	r5, r0, #0
	mov	r0, #0x0
	add	r1, r5, #0
	mov	r2, #0x0
	bl	GetStringWidth
	cmp	r0, #0x28
	bgt	.L988	@cond_branch
	lsl	r3, r6, #0x18
	lsr	r3, r3, #0x18
	add	r4, sp, #0xc
	str	r4, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r4, #0x80
	lsl	r4, r4, #0x13
	lsr	r2, r4, #0x18
	bl	AddTextPrinterParameterized3
	add	r0, r7, #0x1
	str	r0, [sp, #0x48]
	add	r6, r6, #0xc
	mov	sl, r6
	b	.L986
.L988:
	add	r0, r5, #0
	bl	StringLength_Multibyte
	add	r4, r0, #0
	mov	r1, sp
	add	r1, r1, #0x10
	str	r1, [sp, #0x44]
	ldr	r0, [sp, #0x40]
	lsl	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r6, #0x18
	mov	r9, r1
	add	r0, r7, #0x1
	str	r0, [sp, #0x48]
	add	r6, r6, #0xc
	mov	sl, r6
	ldr	r7, [sp, #0x40]
	add	r7, r7, #0x23
	ldr	r6, [sp, #0x44]
.L990:
	sub	r4, r4, #0x1
	add	r0, r6, #0
	add	r1, r5, #0
	add	r2, r4, #0
	bl	StringCopyN_Multibyte
	mov	r0, #0x0
	add	r1, r6, #0
	mov	r2, #0x0
	bl	GetStringWidth
	cmp	r0, #0x23
	bgt	.L990	@cond_branch
	mov	r1, r8
	lsr	r2, r1, #0x18
	mov	r0, r9
	lsr	r4, r0, #0x18
	add	r1, sp, #0xc
	str	r1, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	ldr	r1, [sp, #0x44]
	str	r1, [sp, #0x8]
	mov	r0, #0x2
	mov	r1, #0x0
	add	r3, r4, #0
	bl	AddTextPrinterParameterized3
	add	r2, r7, #0
	add	r0, sp, #0xc
	str	r0, [sp]
	mov	r1, #0x1
	neg	r1, r1
	str	r1, [sp, #0x4]
	ldr	r0, .L998
	str	r0, [sp, #0x8]
	mov	r0, #0x2
	mov	r1, #0x0
	add	r3, r4, #0
	bl	AddTextPrinterParameterized3
.L986:
	ldr	r7, [sp, #0x48]
	mov	r4, sl
	lsl	r0, r4, #0x10
	lsr	r6, r0, #0x10
	cmp	r7, #0x9
	ble	.L987	@cond_branch
.L973:
	add	sp, sp, #0x4c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L999:
	.align	2, 0
.L998:
	.word	sText_Ellipsis
.Lfe91:
	.size	 PrintCurrentKeyboardPage,.Lfe91-PrintCurrentKeyboardPage
	.align	2, 0
	.type	 sub_8020320,function
	.thumb_func
sub_8020320:
	push	{r4, lr}
	ldr	r1, .L1006
	ldr	r2, [r1]
	ldrh	r3, [r2, #0x20]
	mov	r4, #0x20
	ldrsh	r0, [r2, r4]
	cmp	r0, #0x37
	bgt	.L1001	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0xc
	strh	r0, [r2, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x37
	ble	.L1005	@cond_branch
	mov	r0, #0x38
	strh	r0, [r2, #0x20]
	b	.L1001
.L1007:
	.align	2, 0
.L1006:
	.word	sDisplay
.L1005:
	mov	r1, #0x20
	ldrsh	r0, [r2, r1]
	bl	sub_80207C0
	mov	r0, #0x1
	b	.L1004
.L1001:
	ldr	r0, [r1]
	mov	r4, #0x20
	ldrsh	r0, [r0, r4]
	bl	sub_8020818
	mov	r0, #0x0
.L1004:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe92:
	.size	 sub_8020320,.Lfe92-sub_8020320
	.align	2, 0
	.type	 sub_8020368,function
	.thumb_func
sub_8020368:
	push	{r4, lr}
	ldr	r1, .L1014
	ldr	r2, [r1]
	ldrh	r3, [r2, #0x20]
	mov	r4, #0x20
	ldrsh	r0, [r2, r4]
	cmp	r0, #0
	ble	.L1009	@cond_branch
	add	r0, r3, #0
	sub	r0, r0, #0xc
	strh	r0, [r2, #0x20]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L1013	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x20]
	b	.L1009
.L1015:
	.align	2, 0
.L1014:
	.word	sDisplay
.L1013:
	mov	r1, #0x20
	ldrsh	r0, [r2, r1]
	bl	sub_80207C0
	mov	r0, #0x1
	b	.L1012
.L1009:
	ldr	r0, [r1]
	mov	r4, #0x20
	ldrsh	r0, [r0, r4]
	bl	sub_8020818
	mov	r0, #0x0
.L1012:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe93:
	.size	 sub_8020368,.Lfe93-sub_8020368
	.align	2, 0
	.type	 ShowKeyboardSwapMenu,function
	.thumb_func
ShowKeyboardSwapMenu:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	mov	r0, #0x3
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	mov	r0, #0x3
	mov	r1, #0x1
	mov	r2, #0xd
	bl	DrawTextBorderOuter
	mov	r5, #0xe
	str	r5, [sp]
	mov	r4, #0x5
	str	r4, [sp, #0x4]
	ldr	r0, .L1017
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	mov	r1, #0x2
	mov	r2, #0x8
	mov	r3, #0x1
	bl	PrintTextArray
	bl	GetCurrentKeyboardPage
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r5, [sp]
	str	r4, [sp, #0x4]
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x1
	bl	sub_81983AC
	mov	r0, #0x3
	bl	PutWindowTilemap
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1018:
	.align	2, 0
.L1017:
	.word	sKeyboardPageTitleTexts
.Lfe94:
	.size	 ShowKeyboardSwapMenu,.Lfe94-ShowKeyboardSwapMenu
	.align	2, 0
	.type	 HideKeyboardSwapMenu,function
	.thumb_func
HideKeyboardSwapMenu:
	push	{lr}
	mov	r0, #0x3
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	mov	r0, #0x3
	bl	ClearWindowTilemap
	pop	{r0}
	bx	r0
.Lfe95:
	.size	 HideKeyboardSwapMenu,.Lfe95-HideKeyboardSwapMenu
	.align	2, 0
	.type	 PrintChatMessage,function
	.thumb_func
PrintChatMessage:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	add	r5, r1, #0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r2, r2, #0x18
	add	r3, sp, #0xc
	mov	r1, #0x1
	strb	r1, [r3]
	lsr	r2, r2, #0x17
	add	r1, r2, #0x2
	strb	r1, [r3, #0x1]
	add	r1, r3, #0
	add	r2, r2, #0x3
	strb	r2, [r1, #0x2]
	lsl	r4, r0, #0x4
	sub	r4, r4, r0
	lsl	r3, r4, #0x10
	lsr	r3, r3, #0x10
	mov	r0, #0xa8
	str	r0, [sp]
	mov	r0, #0xf
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x11
	mov	r2, #0x0
	bl	FillWindowPixelRect
	add	r4, r4, #0x1
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, sp, #0xc
	str	r0, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	add	r3, r4, #0
	bl	AddTextPrinterParameterized3
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe96:
	.size	 PrintChatMessage,.Lfe96-PrintChatMessage
	.align	2, 0
	.type	 ResetGpuBgState,function
	.thumb_func
ResetGpuBgState:
	push	{lr}
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
	mov	r1, #0x82
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuRegBits
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r1, #0xe0
	lsl	r1, r1, #0x8
	mov	r0, #0x0
	bl	ClearGpuRegBits
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	mov	r0, #0x0
	bl	SetGpuRegBits
	ldr	r1, .L1022
	mov	r0, #0x40
	bl	SetGpuReg
	mov	r0, #0x44
	mov	r1, #0x90
	bl	SetGpuReg
	mov	r0, #0x48
	mov	r1, #0x3d
	bl	SetGpuReg
	mov	r0, #0x4a
	mov	r1, #0x3f
	bl	SetGpuReg
	pop	{r0}
	bx	r0
.L1023:
	.align	2, 0
.L1022:
	.word	0x40f0
.Lfe97:
	.size	 ResetGpuBgState,.Lfe97-ResetGpuBgState
	.align	2, 0
	.type	 SetBgTilemapBuffers,function
	.thumb_func
SetBgTilemapBuffers:
	push	{r4, lr}
	ldr	r4, .L1025
	ldr	r1, [r4]
	mov	r0, #0x94
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	mov	r0, #0x0
	bl	SetBgTilemapBuffer
	ldr	r1, [r4]
	ldr	r0, .L1025+0x4
	add	r1, r1, r0
	mov	r0, #0x1
	bl	SetBgTilemapBuffer
	ldr	r1, [r4]
	ldr	r0, .L1025+0x8
	add	r1, r1, r0
	mov	r0, #0x3
	bl	SetBgTilemapBuffer
	ldr	r1, [r4]
	ldr	r0, .L1025+0xc
	add	r1, r1, r0
	mov	r0, #0x2
	bl	SetBgTilemapBuffer
	pop	{r4}
	pop	{r0}
	bx	r0
.L1026:
	.align	2, 0
.L1025:
	.word	sDisplay
	.word	0x928
	.word	0x1128
	.word	0x1928
.Lfe98:
	.size	 SetBgTilemapBuffers,.Lfe98-SetBgTilemapBuffers
	.align	2, 0
	.type	 ClearBg0,function
	.thumb_func
ClearBg0:
	push	{lr}
	add	sp, sp, #-0x8
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	mov	r0, #0x0
	mov	r2, #0x20
	mov	r3, #0x1
	bl	RequestDma3Fill
	mov	r0, #0x20
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.Lfe99:
	.size	 ClearBg0,.Lfe99-ClearBg0
	.align	2, 0
	.type	 LoadChatWindowBorderGfx,function
	.thumb_func
LoadChatWindowBorderGfx:
	push	{lr}
	add	sp, sp, #-0x4
	ldr	r0, .L1029
	mov	r1, #0x70
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L1029+0x4
	mov	r1, #0xc0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r1, .L1029+0x8
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
	ldr	r1, .L1029+0xc
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L1030:
	.align	2, 0
.L1029:
	.word	gUnionRoomChat_Window_Pal2
	.word	gUnionRoomChat_Window_Pal1
	.word	gUnionRoomChat_Border_Gfx
	.word	gUnionRoomChat_Border_Tilemap
.Lfe100:
	.size	 LoadChatWindowBorderGfx,.Lfe100-LoadChatWindowBorderGfx
	.align	2, 0
	.type	 LoadChatWindowGfx,function
	.thumb_func
LoadChatWindowGfx:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L1033
	mov	r1, #0x0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r1, .L1033+0x4
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
	add	r5, r0, #0
	cmp	r5, #0
	beq	.L1032	@cond_branch
	mov	r1, #0x88
	lsl	r1, r1, #0x2
	add	r0, r5, r1
	ldr	r4, .L1033+0x8
	ldr	r1, [r4]
	ldr	r2, .L1033+0xc
	add	r1, r1, r2
	mov	r2, #0x8
	bl	CpuFastSet
	mov	r1, #0x84
	lsl	r1, r1, #0x3
	add	r0, r5, r1
	ldr	r1, [r4]
	ldr	r2, .L1033+0x10
	add	r1, r1, r2
	mov	r2, #0x8
	bl	CpuFastSet
.L1032:
	ldr	r1, .L1033+0x14
	mov	r0, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	mov	r0, #0x2
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1034:
	.align	2, 0
.L1033:
	.word	gUnionRoomChat_Background_Pal
	.word	gUnionRoomChat_Background_Gfx
	.word	sDisplay
	.word	0x2128
	.word	0x2148
	.word	gUnionRoomChat_Background_Tilemap
.Lfe101:
	.size	 LoadChatWindowGfx,.Lfe101-LoadChatWindowGfx
	.align	2, 0
	.type	 sub_8020680,function
	.thumb_func
sub_8020680:
	push	{lr}
	ldr	r0, .L1036
	mov	r1, #0x80
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r1, .L1036+0x4
	mov	r0, #0x0
	mov	r2, #0x20
	mov	r3, #0x1
	bl	RequestDma3Fill
	pop	{r0}
	bx	r0
.L1037:
	.align	2, 0
.L1036:
	.word	sUnk_Palette1
	.word	0x6004020
.Lfe102:
	.size	 sub_8020680,.Lfe102-sub_8020680
	.align	2, 0
	.type	 LoadChatMessagesWindow,function
	.thumb_func
LoadChatMessagesWindow:
	push	{lr}
	ldr	r0, .L1039
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	pop	{r0}
	bx	r0
.L1040:
	.align	2, 0
.L1039:
	.word	sUnk_Palette2
.Lfe103:
	.size	 LoadChatMessagesWindow,.Lfe103-LoadChatMessagesWindow
	.align	2, 0
	.type	 LoadKeyboardWindow,function
	.thumb_func
LoadKeyboardWindow:
	push	{lr}
	mov	r0, #0x2
	bl	PutWindowTilemap
	bl	PrintCurrentKeyboardPage
	mov	r0, #0x2
	mov	r1, #0x3
	bl	CopyWindowToVram
	pop	{r0}
	bx	r0
.Lfe104:
	.size	 LoadKeyboardWindow,.Lfe104-LoadKeyboardWindow
	.align	2, 0
	.type	 LoadTextEntryWindow,function
	.thumb_func
LoadTextEntryWindow:
	push	{r4, lr}
	add	sp, sp, #-0xc
	add	r1, sp, #0x8
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r0, #0xff
	strb	r0, [r1, #0x1]
	mov	r4, #0x0
.L1046:
	ldr	r0, .L1048
	ldr	r1, [r0]
	ldr	r0, .L1048+0x4
	add	r1, r1, r0
	lsl	r2, r4, #0x13
	lsr	r2, r2, #0x10
	mov	r0, #0x8
	str	r0, [sp]
	mov	r0, #0x10
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	mov	r3, #0x0
	bl	BlitBitmapToWindow
	add	r4, r4, #0x1
	cmp	r4, #0xe
	ble	.L1046	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x1
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r0}
	bx	r0
.L1049:
	.align	2, 0
.L1048:
	.word	sDisplay
	.word	0x2128
.Lfe105:
	.size	 LoadTextEntryWindow,.Lfe105-LoadTextEntryWindow
	.align	2, 0
	.type	 LoadKeyboardSwapWindow,function
	.thumb_func
LoadKeyboardSwapWindow:
	push	{lr}
	mov	r0, #0x3
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	mov	r0, #0x3
	mov	r1, #0x1
	mov	r2, #0xd0
	bl	LoadUserWindowBorderGfx
	mov	r0, #0x3
	mov	r1, #0xa
	mov	r2, #0x20
	bl	LoadUserWindowBorderGfx_
	ldr	r0, .L1051
	mov	r1, #0xe0
	mov	r2, #0x20
	bl	LoadPalette
	pop	{r0}
	bx	r0
.L1052:
	.align	2, 0
.L1051:
	.word	gUnknown_0860F074
.Lfe106:
	.size	 LoadKeyboardSwapWindow,.Lfe106-LoadKeyboardSwapWindow
	.align	2, 0
	.type	 InitScanlineEffect,function
	.thumb_func
InitScanlineEffect:
	push	{lr}
	add	sp, sp, #-0x10
	ldr	r0, .L1054
	str	r0, [sp, #0x4]
	ldr	r0, .L1054+0x4
	str	r0, [sp]
	mov	r2, sp
	mov	r1, #0x0
	mov	r0, #0x1
	strb	r0, [r2, #0x8]
	mov	r0, sp
	strb	r1, [r0, #0x9]
	ldr	r0, .L1054+0x8
	ldr	r0, [r0]
	strh	r1, [r0, #0x20]
	str	r1, [sp, #0xc]
	add	r0, sp, #0xc
	ldr	r1, .L1054+0xc
	ldr	r2, .L1054+0x10
	bl	CpuFastSet
	ldr	r0, [sp]
	ldr	r1, [sp, #0x4]
	ldr	r2, [sp, #0x8]
	bl	ScanlineEffect_SetParams
	add	sp, sp, #0x10
	pop	{r0}
	bx	r0
.L1055:
	.align	2, 0
.L1054:
	.word	-0x5d9fffff
	.word	0x4000014
	.word	sDisplay
	.word	gScanlineEffectRegBuffers
	.word	0x10003c0
.Lfe107:
	.size	 InitScanlineEffect,.Lfe107-InitScanlineEffect
	.align	2, 0
	.type	 sub_80207C0,function
	.thumb_func
sub_80207C0:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, sp
	strh	r0, [r1]
	ldr	r5, .L1057
	ldrb	r0, [r5, #0x14]
	lsl	r1, r0, #0x4
	sub	r1, r1, r0
	lsl	r1, r1, #0x7
	ldr	r4, .L1057+0x4
	add	r1, r1, r4
	ldr	r2, .L1057+0x8
	mov	r0, sp
	bl	CpuSet
	mov	r0, sp
	add	r0, r0, #0x2
	mov	r1, #0x0
	strh	r1, [r0]
	ldrb	r2, [r5, #0x14]
	lsl	r1, r2, #0x4
	sub	r1, r1, r2
	lsl	r1, r1, #0x7
	mov	r2, #0x90
	lsl	r2, r2, #0x1
	add	r4, r4, r2
	add	r1, r1, r4
	ldr	r2, .L1057+0xc
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1058:
	.align	2, 0
.L1057:
	.word	gScanlineEffect
	.word	gScanlineEffectRegBuffers
	.word	0x1000090
	.word	0x1000010
.Lfe108:
	.size	 sub_80207C0,.Lfe108-sub_80207C0
	.align	2, 0
	.type	 sub_8020818,function
	.thumb_func
sub_8020818:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, sp
	strh	r4, [r0]
	ldr	r5, .L1060
	ldr	r0, .L1060+0x4
	mov	r9, r0
	mov	r0, sp
	add	r1, r5, #0
	mov	r2, r9
	bl	CpuSet
	mov	r0, sp
	add	r0, r0, #0x2
	mov	r6, #0x0
	strh	r6, [r0]
	mov	r2, #0x90
	lsl	r2, r2, #0x1
	add	r1, r5, r2
	ldr	r2, .L1060+0x8
	mov	r8, r2
	bl	CpuSet
	add	r0, sp, #0x4
	strh	r4, [r0]
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r1, r5, r2
	mov	r2, r9
	bl	CpuSet
	mov	r0, sp
	add	r0, r0, #0x6
	strh	r6, [r0]
	mov	r1, #0x8a
	lsl	r1, r1, #0x4
	add	r5, r5, r1
	add	r1, r5, #0
	mov	r2, r8
	bl	CpuSet
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1061:
	.align	2, 0
.L1060:
	.word	gScanlineEffectRegBuffers
	.word	0x1000090
	.word	0x1000010
.Lfe109:
	.size	 sub_8020818,.Lfe109-sub_8020818
	.align	2, 0
	.type	 TryAllocSprites,function
	.thumb_func
TryAllocSprites:
	push	{r4, r5, lr}
	mov	r5, #0x0
	ldr	r4, .L1070
.L1066:
	add	r0, r4, #0
	bl	LoadCompressedSpriteSheet
	add	r4, r4, #0x8
	add	r5, r5, #0x1
	cmp	r5, #0x4
	bls	.L1066	@cond_branch
	ldr	r0, .L1070+0x4
	bl	LoadSpritePalette
	ldr	r4, .L1070+0x8
	mov	r0, #0x18
	bl	Alloc
	str	r0, [r4]
	cmp	r0, #0
	beq	.L1068	@cond_branch
	mov	r0, #0x1
	b	.L1069
.L1071:
	.align	2, 0
.L1070:
	.word	sSpriteSheets
	.word	sSpritePalette
	.word	sSprites
.L1068:
	mov	r0, #0x0
.L1069:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe110:
	.size	 TryAllocSprites,.Lfe110-TryAllocSprites
	.align	2, 0
	.type	 FreeSprites,function
	.thumb_func
FreeSprites:
	push	{lr}
	ldr	r0, .L1074
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L1073	@cond_branch
	bl	Free
.L1073:
	pop	{r0}
	bx	r0
.L1075:
	.align	2, 0
.L1074:
	.word	sSprites
.Lfe111:
	.size	 FreeSprites,.Lfe111-FreeSprites
	.align	2, 0
	.type	 CreateKeyboardCursorSprite,function
	.thumb_func
CreateKeyboardCursorSprite:
	push	{lr}
	ldr	r0, .L1077
	mov	r1, #0xa
	mov	r2, #0x18
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1077+0x4
	ldr	r2, [r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L1077+0x8
	add	r1, r1, r0
	str	r1, [r2]
	pop	{r0}
	bx	r0
.L1078:
	.align	2, 0
.L1077:
	.word	sSpriteTemplate_KeyboardCursor
	.word	sSprites
	.word	gSprites
.Lfe112:
	.size	 CreateKeyboardCursorSprite,.Lfe112-CreateKeyboardCursorSprite
	.align	2, 0
	.type	 SetKeyboardCursorInvisibility,function
	.thumb_func
SetKeyboardCursorInvisibility:
	ldr	r1, .L1080
	ldr	r1, [r1]
	ldr	r2, [r1]
	add	r2, r2, #0x3e
	mov	r1, #0x1
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	ldrb	r3, [r2]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r3
	orr	r1, r1, r0
	strb	r1, [r2]
	bx	lr
.L1081:
	.align	2, 0
.L1080:
	.word	sSprites
.Lfe113:
	.size	 SetKeyboardCursorInvisibility,.Lfe113-SetKeyboardCursorInvisibility
	.align	2, 0
	.type	 MoveKeyboardCursor,function
	.thumb_func
MoveKeyboardCursor:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	bl	GetCurrentKeyboardPage
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r5, sp
	add	r5, r5, #0x1
	mov	r0, sp
	add	r1, r5, #0
	bl	GetCurrentKeyboardColAndRow
	cmp	r4, #0x3
	beq	.L1083	@cond_branch
	ldr	r4, .L1086
	ldr	r0, [r4]
	ldr	r0, [r0]
	mov	r1, #0x0
	bl	StartSpriteAnim
	ldr	r1, [r4]
	ldr	r2, [r1]
	mov	r0, sp
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r0, r0, #0xa
	strh	r0, [r2, #0x20]
	ldr	r2, [r1]
	b	.L1085
.L1087:
	.align	2, 0
.L1086:
	.word	sSprites
.L1083:
	ldr	r4, .L1088
	ldr	r0, [r4]
	ldr	r0, [r0]
	mov	r1, #0x2
	bl	StartSpriteAnim
	ldr	r2, [r4]
	ldr	r1, [r2]
	mov	r0, #0x18
	strh	r0, [r1, #0x20]
	ldr	r2, [r2]
.L1085:
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, #0x18
	strh	r0, [r2, #0x22]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1089:
	.align	2, 0
.L1088:
	.word	sSprites
.Lfe114:
	.size	 MoveKeyboardCursor,.Lfe114-MoveKeyboardCursor
	.align	2, 0
	.type	 SetRegisteredTextPalette,function
	.thumb_func
SetRegisteredTextPalette:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x2
	ldr	r0, .L1091
	add	r4, r4, r0
	mov	r0, #0x0
	bl	IndexOfSpritePaletteTag
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x4
	ldr	r0, .L1091+0x4
	add	r1, r1, r0
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x4
	bl	LoadPalette
	pop	{r4}
	pop	{r0}
	bx	r0
.L1092:
	.align	2, 0
.L1091:
	.word	sUnionRoomChatInterfacePal+0x2
	.word	0x1010000
.Lfe115:
	.size	 SetRegisteredTextPalette,.Lfe115-SetRegisteredTextPalette
	.align	2, 0
	.type	 StartKeyboardCursorAnim,function
	.thumb_func
StartKeyboardCursorAnim:
	push	{lr}
	bl	GetCurrentKeyboardPage
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	beq	.L1094	@cond_branch
	ldr	r0, .L1096
	ldr	r0, [r0]
	ldr	r0, [r0]
	mov	r1, #0x1
	bl	StartSpriteAnim
	b	.L1095
.L1097:
	.align	2, 0
.L1096:
	.word	sSprites
.L1094:
	ldr	r0, .L1098
	ldr	r0, [r0]
	ldr	r0, [r0]
	mov	r1, #0x3
	bl	StartSpriteAnim
.L1095:
	ldr	r0, .L1098
	ldr	r1, [r0]
	mov	r0, #0x0
	strh	r0, [r1, #0x14]
	pop	{r0}
	bx	r0
.L1099:
	.align	2, 0
.L1098:
	.word	sSprites
.Lfe116:
	.size	 StartKeyboardCursorAnim,.Lfe116-StartKeyboardCursorAnim
	.align	2, 0
	.type	 TryKeyboardCursorReopen,function
	.thumb_func
TryKeyboardCursorReopen:
	push	{r4, lr}
	ldr	r4, .L1107
	ldr	r1, [r4]
	ldrh	r0, [r1, #0x14]
	cmp	r0, #0x3
	bls	.L1101	@cond_branch
.L1106:
	mov	r0, #0x0
	b	.L1105
.L1108:
	.align	2, 0
.L1107:
	.word	sSprites
.L1101:
	add	r0, r0, #0x1
	strh	r0, [r1, #0x14]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x3
	bls	.L1102	@cond_branch
	bl	GetCurrentKeyboardPage
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	beq	.L1103	@cond_branch
	ldr	r0, [r4]
	ldr	r0, [r0]
	mov	r1, #0x0
	bl	StartSpriteAnim
	b	.L1106
.L1103:
	ldr	r0, [r4]
	ldr	r0, [r0]
	mov	r1, #0x2
	bl	StartSpriteAnim
	b	.L1106
.L1102:
	mov	r0, #0x1
.L1105:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe117:
	.size	 TryKeyboardCursorReopen,.Lfe117-TryKeyboardCursorReopen
	.align	2, 0
	.type	 CreateTextEntrySprites,function
	.thumb_func
CreateTextEntrySprites:
	push	{r4, r5, lr}
	ldr	r0, .L1110
	mov	r1, #0x4c
	mov	r2, #0x98
	mov	r3, #0x2
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L1110+0x4
	ldr	r2, [r5]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r4, .L1110+0x8
	add	r1, r1, r4
	str	r1, [r2, #0x8]
	ldr	r0, .L1110+0xc
	mov	r1, #0x40
	mov	r2, #0x98
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, [r5]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	str	r1, [r2, #0x4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1111:
	.align	2, 0
.L1110:
	.word	sSpriteTemplate_TextEntryCursor
	.word	sSprites
	.word	gSprites
	.word	sSpriteTemplate_TextEntryArrow
.Lfe118:
	.size	 CreateTextEntrySprites,.Lfe118-CreateTextEntrySprites
	.align	2, 0
	.type	 SpriteCB_TextEntryCursor,function
	.thumb_func
SpriteCB_TextEntryCursor:
	push	{r4, lr}
	add	r4, r0, #0
	bl	GetTextEntryCursorPosition
	add	r3, r0, #0
	cmp	r3, #0xf
	bne	.L1113	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L1114
.L1113:
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r0
	strb	r1, [r2]
	lsl	r0, r3, #0x3
	add	r0, r0, #0x4c
	strh	r0, [r4, #0x20]
.L1114:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe119:
	.size	 SpriteCB_TextEntryCursor,.Lfe119-SpriteCB_TextEntryCursor
	.align	2, 0
	.type	 SpriteCB_TextEntryArrow,function
	.thumb_func
SpriteCB_TextEntryArrow:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x2e]
	add	r0, r0, #0x1
	mov	r2, #0x0
	strh	r0, [r1, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L1116	@cond_branch
	strh	r2, [r1, #0x2e]
	ldrh	r0, [r1, #0x24]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x24]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L1116	@cond_branch
	strh	r2, [r1, #0x24]
.L1116:
	pop	{r0}
	bx	r0
.Lfe120:
	.size	 SpriteCB_TextEntryArrow,.Lfe120-SpriteCB_TextEntryArrow
	.align	2, 0
	.type	 CreateRButtonSprites,function
	.thumb_func
CreateRButtonSprites:
	push	{r4, r5, lr}
	ldr	r0, .L1119
	mov	r1, #0x8
	mov	r2, #0x98
	mov	r3, #0x3
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L1119+0x4
	ldr	r2, [r5]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r4, .L1119+0x8
	add	r1, r1, r4
	str	r1, [r2, #0xc]
	ldr	r0, .L1119+0xc
	mov	r1, #0x20
	mov	r2, #0x98
	mov	r3, #0x4
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, [r5]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	str	r1, [r2, #0x10]
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1120:
	.align	2, 0
.L1119:
	.word	sSpriteTemplate_RButtonIcon
	.word	sSprites
	.word	gSprites
	.word	sSpriteTemplate_RButtonLabels
.Lfe121:
	.size	 CreateRButtonSprites,.Lfe121-CreateRButtonSprites
	.align	2, 0
	.type	 UpdateRButtonLabel,function
	.thumb_func
UpdateRButtonLabel:
	push	{r4, lr}
	bl	GetCurrentKeyboardPage
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bne	.L1122	@cond_branch
	bl	GetLengthOfMessageEntry
	cmp	r0, #0
	beq	.L1128	@cond_branch
	ldr	r3, .L1129
	ldr	r0, [r3]
	ldr	r1, [r0, #0x10]
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r3]
	ldr	r0, [r0, #0x10]
	mov	r1, #0x3
	bl	StartSpriteAnim
	b	.L1125
.L1130:
	.align	2, 0
.L1129:
	.word	sSprites
.L1122:
	bl	GetShouldShowCaseToggleIcon
	add	r4, r0, #0
	cmp	r4, #0x3
	bne	.L1126	@cond_branch
.L1128:
	ldr	r0, .L1131
	ldr	r0, [r0]
	ldr	r1, [r0, #0x10]
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	b	.L1125
.L1132:
	.align	2, 0
.L1131:
	.word	sSprites
.L1126:
	ldr	r3, .L1133
	ldr	r0, [r3]
	ldr	r1, [r0, #0x10]
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r3]
	ldr	r0, [r0, #0x10]
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	bl	StartSpriteAnim
.L1125:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1134:
	.align	2, 0
.L1133:
	.word	sSprites
.Lfe122:
	.size	 UpdateRButtonLabel,.Lfe122-UpdateRButtonLabel
.text
	.align	2, 0

